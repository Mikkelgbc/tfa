[
["index.html", "Tools for Analytics (TFA) Course notes R part 1 Introduction 1.1 How this book is organised 1.2 Learning goals 1.3 Acknowledgements", " Tools for Analytics (TFA) Course notes R part Lars Relund Nielsen 2020-06-24 1 Introduction This site/book contains course notes for the R part of the course “Tools for Analytics” held at BSS. The notes organize what we will be doing in each week. The course is an intorductonary course at the Operations and Supply Chain Analytics programme and intended to give knowledge about IT tools for Analytics. Since the amount of available data has increased extensively in many companies, there is a need for analysts with the ability to do tasks within Analytics. For instance, extract relevant data and perform valid quantitative analysis. Clearly, it is also important that the analyst can communicate the results of the analysis to their surroundings. This requires for the analyst to be particularly qualified in handling IT based tools beyond e.g. basic Excel. Business Analytics (BA) (or just Analytics) refers to the scientific process of transforming data into insight for making better decisions in business. BA can both be seen as the complete decision making process for solving a business problem and the creation of business value by integration of concepts, methods and data. As a process, it can be characterized by descriptive, predictive, and prescriptive model building using data sources. For a full definition see the appendix. Within a Business Analytics (BA) framework the course focus on giving you an introduction to programming, handeling data and doing descriptive analytics. Descriptive analytics categorizes, characterizes, consolidates, and classifies data. Examples are standard reporting and dashboards (key performance indicators (KPIs), what happened or is happening now?) and ad-hoc reporting (how many/often?). Descriptive analytics often serves as a first step in the successful application of predictive or prescriptive analytics. Predictive and prescriptive analytics are covered in other courses of the programme. Analytics may be seen as a data driven process: Figure 1.1: Analytics as a data driven process. For doing data driven analytics you first must import your data. That is, take data from a database, file, web API etc. and transform it into a data frame. In general raw data may be messy and need to be structured in a tidy way. Tidying your data means storing it in a structured form sutaiable for analysis. In brief, when your data is tidy, each column is a variable, and each row is an observation. Tidy data is important because the consistent structure lets you focus your struggle on questions about the data. Once you have tidy data, a common first step is to transform it. Transformation includes narrowing in on observations of interest (e.g. only observations from a specific year or warehouse), creating new variables based on existing variables (like the cost of using the machine that day given idle time). Together, tidying and transforming are called wrangling, because it can be a hard process to get your data in the right form. The next step is to do a simple exploration of you data such as calculating a set of summary statistics (like counts, means or KPIs). A good way to get an overview over your data is by visualisation. A good visualisation will show you things that you did not expect, raise new questions about the data or confirm your hypotesis. A good visualisation might also hint that you’re asking the wrong question, or you need to collect different data. Exploration and visusalization are descriptive analytics and used to answer questions such as: What happend? How many, how often, where? Where exactly is the problem? What actions are needed? Models are complementary tools to visualisation. Once you have made your questions sufficiently precise, you can use a model to answer them. A model is a description of a system using mathematical concepts and a simplification of the real system. That is, the results of a model are based on a set of assumptions. Models for statistical analysis, forecasting, system behaivior are predictive analytics and answer questions like: Why is this happening? What if these trends continue? What will happen next? Models for prescriptive analytics use optimization and other decision modelling techniques to suggest decision options with the goal of improving business performance and answer questions like: What is the best that can happen? Exploration, visualizaton and modelling may be seen as different steps which can be used for analysing the data and answer the overall questions. This part of the course will focus on the different parts of the course except modelling. Given an analysis, communication is an absolutely critical part. It doesn’t matter how well your models and visualisation have led you to understand the data unless you can also communicate your results to decision makers. Note that analytics is not a one-way process is is common that you several times have to tidy and transform your data, explore and visulize based on the results of a model, rerun the model given feedback on you communication the decision makers etc. Common connections are visulized using directed arrowes in Figure 1.1. Surrounding the process is programming. Programming is the swiss army knive you use during parts of the process. An introduction to programming is given in the first part of the course using VBA in Excel. We will cover functional programming using R in this part of the course. 1.1 How this book is organised The book consists of different parts each containing teaching modules about a specific topic: Part I focus on signing up for the different online resources the course will use, installing the needed programs on your computer and giving you a short introduction to R. In Part ?? the focus is on import/export, tidy and transformation of data. Part ??? consider vizualization. In all parts communication are considered … You can expect it to be updated when the course runs. The date listed above is the last time this guide was updated. The R part of the course covers learning goals: explore, groom, visualize, and analyze data, make all of that reproducible, reusable, and shareable, using R. 1.2 Learning goals The purpose of this course is to give students a knowledge about IT tools for Analytics which requires the analyst to be qualified in handling tools beyond e.g. basic Excel. After having participated in the course, the student must, in addition to achieving general academic skills, demonstrate: Knowledge of how a computer works at a basic level. basic programming such as variables, arrays, loops, functions and procedures. what an algorithm is. how to implement an algorithm based on a description. different programming languages. how to manage a code in a collaborative working environment. Skills to handle data such as import, tidy, transform, visualize and export. develop well-structured code. perform testing and debugging. implement/code selected algorithms. apply analytical techniques on data. apply relevant methods, algorithms and techniques from this course in order to solve a specific problem. Competences to independently handle data given a problem. independently analyse data given a relevant research question. compare different programming languages. compare different algorithms solving a problem and discuss their advantages and disadvantages. interpret and discuss results based on a data analysis in relation to the relevant academic literature. communicate results from applied research in a scientific way, e.g. using literate programming. 1.3 Acknowledgements Some of the materials in this book are taken from various places The bookdown scheleton and some notes are based on the Stat545 course. Notes about git and GitHub are based on Happy Git and GitHub for the useR site. Several Tools for Analytics TAs were instrumental in the development of these materials and members of the RStudio Education Team ported the original website into the modern and more maintainable framework we enjoy today source(&quot;common.R&quot;) "],
["install-git-and-github.html", "2 Install git and GitHub 2.1 Learning outcomes 2.2 Install and signup 2.3 Resources", " 2 Install git and GitHub 2.1 Learning outcomes By the end of this module, you are expected to have: Installed git. Signed up for GitHub. Tested Git and GitHub in RStudio. 2.2 Install and signup Git is a version control system. Git manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids. GitHub provide a home for your Git-based projects on the internet. If you have no idea what I’m talking about, think of it as DropBox but much, much better. It allows other people to see your stuff, sync up with you, and perhaps even make changes. Even for private solo projects, it’s a good idea to push your work to a remote location for peace of mind. We are going to Git and GitHub for maintaining the R code you produce in the groups. Install the desktop version of RStudio, a powerful user interface for R. 2.3 Resources "],
["install.html", "3 Install R, RStudio and Git 3.1 Learning outcomes 3.2 Install R and RStudio 3.3 Test your installation 3.4 Add-on packages 3.5 Recap", " 3 Install R, RStudio and Git 3.1 Learning outcomes By the end of this module, you are expected to have: Installed R. Installed RStudio. Installed Git. Tested R, RStudio and Git. Installed some packages. 3.2 Install R and RStudio R is a programming language and free software environment. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. For a further overview and description of the history of R see Chapter 2 in Peng (2018). To run R you need to install it on your computer. Moreover, you need the IDE (integrated development environment) RStudio, to save your work. Install R from CRAN (Comprehensive R Archive Network). Install the latest precompiled binary distribution for your operating system (use the links up at the top of the CRAN page)! Install the desktop version of RStudio, a powerful user interface for R. Install the latest version of Git. If you have problems, see here. If you have a pre-existing installation of R and/or RStudio, reinstall both to the latest versions. It can be considerably harder to run old software than new. 3.3 Test your installation Do whatever is appropriate for your OS to launch RStudio. You should get a window similar to the screenshot you see here, but yours will be more boring because you haven’t written any code or made any figures yet! Put your cursor in the pane labeled Console, which is where you interact with the live R process. Create a simple object with code like x &lt;- 2 * 4 (followed by enter or return). Then inspect the x object by typing x followed by enter or return. You should see the value 8 print to screen. If yes, you’ve succeeded in installing R and RStudio. Try to open a new file File &gt; New File &gt; New RMarkdown…. Use the defaults and press OK. Next save the file and compile it using Knit (Ctrl+Shift+K). You have now compiled a document with R code inside of it. Close and restart R. Go to Tools &gt; Global Options &gt; Git/SVN . The ‘Git executable’ field should point to the path where Git is installed. On windows the path looks like C:/Program Files/Git/bin/git.exe and on macOS and Linux, the path usually looks something like /usr/bin/git. If the field is not filled with a path, have a look at Chapter 13 and 14 at the Happy Git site. 3.4 Add-on packages R is an extensible system and many people share useful code they have developed as a package via CRAN and GitHub. To install a package from CRAN, for example the dplyr package for data manipulation, one way to do it in the R console. install.packages(&quot;dplyr&quot;, dependencies = TRUE) By including dependencies = TRUE, we are being explicit and extra-careful to install any additional packages the target package, dplyr in the example above, needs to have around. Install the package tidyverse which is in fact a bundle of packages by running (note this operation may take a long time): install.packages(&quot;tidyverse&quot;, dependencies = TRUE) Check if you have successfully installed tidyverse by loading the package: library(tidyverse) If your install was unsuccessful try to install the packages who fails one at a time. 3.5 Recap (Add stuff) "],
["r-basics.html", "4 R basics and workflows 4.1 Learning outcomes 4.2 Working with R at the command line in RStudio 4.3 Your first DataCamp course 4.4 RStudio projects 4.5 Global options 4.6 Working directory 4.7 Recap 4.8 Exercises", " 4 R basics and workflows 4.1 Learning outcomes By the end of this module, you are expected to have: Tried R and RStudio. Learned how the RStudio IDE works. Finished your first course on DataCamp. Solved your first exercises. 4.2 Working with R at the command line in RStudio R is a programming language and free software environment. The R language is widely used among statisticians and data miners for data analysis. To run R you need to install it on your computer. Throughout this book, we will assume that you are using R via RStudio. First time users often confuse the two. At its simplest, R is like a car’s engine while RStudio is like a car’s dashboard as illustrated in Figure 4.1. Figure 4.1: Analogy of difference between R and RStudio. More precisely, R is a programming language that runs computations, while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. So just as the way of having access to a speedometer, rearview mirrors, and a navigation system makes driving much easier, using RStudio’s interface makes using R much easier as well. Compared to Excel. The benefit of using Excel is that the initial learning curve is quite minimal, and most analysis can be done via point-and-click on the top panel. Once a user imports their data into the program, it’s not exceedingly hard to make basic graphs and charts. R is a programming language, however, meaning the initial learning curve is steeper. It will take you some time to become familiar with the interface and master the various functions. Luckily, using R can quickly become second-nature with practice. For a detailed description you may see Excel vs R: A Brief Introduction to R by Jesse Sadler. Compared to VBA, R is an interpreted language; users typically access it through a command-line or script file. To run VBA you need to compile and execute it. Recall our car analogy from earlier. Much as we don’t drive a car by interacting directly with the engine but rather by interacting with elements on the car’s dashboard, we won’t be using R directly but rather we will use RStudio’s interface. After you install R and RStudio on your computer, you’ll have two new programs (also called applications) you can open. We’ll always work in RStudio and not in the R application. Figure 4.2 shows what icon you should be clicking on your computer. Figure 4.2: Icons of R versus RStudio on your computer. Launch RStudio/R and notice the panes: Console (left) Environment/History (tabbed in upper right) Files/Plots/Packages/Help (tabbed in lower right) FYI: you can change the default location of the panes, among many other things: Customizing RStudio. Now that you’re set up with R and RStudio, you are probably asking yourself, “OK. Now how do I use R?”. The first thing to note is that unlike other statistical software programs like Excel, SPSS, or Minitab that provide point-and-click interfaces, R is an interpreted language. This means you have to type in commands written in R code. In other words, you have to code/program in R. Note that we’ll use the terms “coding” and “programming” interchangeably in this book. Go into the Console, where we interact with the live R process. Make an assignment and then inspect the object you just created: x &lt;- 3 * 4 x #&gt; [1] 12 All R statements where you create objects – “assignments” – have this form: objectName &lt;- value and in my head I hear, e.g., “x equals 12”. You will make lots of assignments and the operator &lt;- is a pain to type. Don’t be lazy and use =, although it would work, because it will just sow confusion later. Instead, utilize RStudio’s keyboard shortcut: Alt + - (the minus sign). Notice that RStudio automatically surrounds &lt;- with spaces, which demonstrates a useful code formatting practice. Give your eyes a break and use spaces. RStudio offers many handy keyboard shortcuts. Also, Alt+Shift+K brings up a keyboard shortcut reference card. Object names cannot start with a digit and cannot contain certain other characters such as a comma or a space. You will be wise to adopt a naming convention some use snake case others use camel case. Choose the naming convention you like best in your study group. But stick only to one of them. this_is_snake_case # note you don&#39;t use capital letters here thisIsCamelCase # you start each word with a capital letter Make another assignment: this_is_a_long_name &lt;- 2.5 To inspect this, try out RStudio’s completion facility: type the first few characters, press TAB, add characters until you disambiguate, then press return. In VBA you have procedures and functions. In R we only use functions which always return an object. R has a mind-blowing collection of built-in functions that are accessed like so: functionName(arg1 = val1, arg2 = val2, ...) Let’s try function seq() which makes regular sequences of numbers and, while we’re at it, demo more helpful features of RStudio. Type se and hit TAB. A pop up shows you possible completions. Specify seq() by typing more to disambiguate or using the up/down arrows to select. Notice the floating tool-tip-type help that pops up, reminding you of a function’s arguments. If you want even more help, press F1 as directed to get the full documentation in the help tab of the lower right pane. Now open the parentheses and notice the automatic addition of the closing parenthesis and the placement of cursor in the middle. Type the arguments 1, 10 and hit return. seq(1, 10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 The above also demonstrates something about how R resolves function arguments. Type seq and press F1 or type: ?seq The help tab of the lower right pane will show the help documentation of function seq with a description of usage, arguments, return value etc. Note all function arguments have names. You can always specify arguments using name = value form. But if you do not, R attempts to resolve by position. So above, it is assumed that we want a sequence from = 1 that goes to = 10. Since we didn’t specify step size, the default value of by in the function definition is used, which ends up being 1 in this case. Note since the default value for from is 1, the same result is obtained by typing: seq(to = 10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Make this assignment and notice similar help with quotation marks. yo &lt;- &quot;hello world&quot; If you just make an assignment, you don’t see the value. You may see the value by: yo # same as print(yo) #&gt; [1] &quot;hello world&quot; print(yo) #&gt; [1] &quot;hello world&quot; Now look at your Environment tab in the upper right pane where user-defined objects accumulate. You can also get a listing of these objects with commands: objects() #&gt; [1] &quot;addIcon&quot; &quot;check_quietly&quot; &quot;install_quietly&quot; &quot;pretty_install&quot; #&gt; [5] &quot;shhh_check&quot; &quot;this_is_a_long_name&quot; &quot;x&quot; &quot;yo&quot; ls() #&gt; [1] &quot;addIcon&quot; &quot;check_quietly&quot; &quot;install_quietly&quot; &quot;pretty_install&quot; #&gt; [5] &quot;shhh_check&quot; &quot;this_is_a_long_name&quot; &quot;x&quot; &quot;yo&quot; If you want to remove the object named yo, you can do this: rm(yo) To remove everything: rm(list = ls()) or click the broom in RStudio’s Environment pane. 4.3 Your first DataCamp course Datacamp is an online platform for learning data science. We are going to use the platform for online lessons and exercises. DataCamp runs all the courses in your browser. That is, R is run on a server and you don’t use RStudio here. The first course gives an [Introduction to R][datacamp-r-intro]. You are expected to have completed the course before continuing this module! 4.4 RStudio projects Let us return to RStudio. One day you will need to quit R, do something else and return to your analysis later. One day you will have multiple analyses going that use R and you want to keep them separate. One day you will need to bring data from the outside world into R and send numerical results and figures from R back out into the world. To handle these real life situations, you need to store your work in a project that keeps all the files associated with a project organized together (such as input data, R scripts, analytical results and figures). RStudio has built-in support for this via its projects. You may think of a project as a folder where you store all you work. Let’s make one to use for the rest of this module. Do this: File &gt; New Project… &gt; New Directory &gt; New Project &gt;. The directory name you choose here will be the project name. Call it whatever you want (or follow me for convenience). I used tfa_testing in my tmp directory (that is tfa_testing is now a subfolder of tmp. You now need a way to store R code in your project. We will use 2 ways of storing your code. In a R script file or a R Markdown document. Normally you store lines of R code in a script file that you need to run. R Markdown provides an easy way to produce a rich, fully-documented reproducible analysis. Here you combine text, figures and metadata needed to reproduce the analysis from beginning to end in a single file. R Markdown compiles to nicely formatted HTML, PDF, or Word. We are going to use R Markdown for larger projects (e.g. the mandatory R report in Week 48). We will come back to R Markdown later 4.4.1 Storing your code in a script file R code can be stored in a script file with file suffix .R. A script file contains a line for each R command to run (think of each line as a command added to the console). Create a new script file File &gt; New File &gt; R Script. Let us add some R code to the file: # this is a comment a &lt;- 2 b &lt;- -3 sig_sq &lt;- 0.5 x &lt;- runif(40) y &lt;- a + b * x + rnorm(40, sd = sqrt(sig_sq)) (avg_x &lt;- mean(x)) write(avg_x, &quot;avg_x.txt&quot;) plot(x, y) abline(a, b, col = &quot;purple&quot;) dev.print(pdf, &quot;toy_line_plot.pdf&quot;) Save the file as testing.R Now run each line by setting the cursor at the first line, hit Ctrl+Enter (runs the line in the Console and moves the cursor to the next line). Repeat Ctrl+Enter until you have run all the lines. Alternatively you may select all the code and hit Ctrl+Enter. Change some things about your code. Top priority would be to set a sample size n at the top, e.g. n &lt;- 40, and then replace all the hard-wired 40’s with n. Change some other minor-but-detectable stuff, e.g. alter the sample size n, the slope of the line b,the color of the line etc. Practice the different ways to re-run the code: Walk through line by line by keyboard shortcut (Ctrl+Enter) or mouse (click “Run” in the upper right corner of editor pane). Source the entire document by entering source('Testing.R') in the Console or use keyboard shortcut (Shift+Ctrl+S) or mouse (click “Source” in the upper right corner of editor pane or select from the mini-menu accessible from the associated down triangle). Source with echo from the Source mini-menu. Try to get an overview over the different planes and tabs. For instance in the Files tab (lower right plane) you can get an overview over your project files. You may also see this video about projects. 4.5 Global options Quit RStudio. Inspect the folder associated with your project if you wish. Maybe view the PDF in an external viewer. Restart RStudio. Notice that things, by default, restore to where we were earlier. Check the Environment tap (top-right plane). The environment should be empty. If it contains objects you defined before you closed R, it is because they have been restored. This is in general not advisable and please change it by opening Tools &gt; Global Options …. Under General set the check marks as: Quit RStudio and reopen it. The Environment tab should now be empty. 4.6 Working directory Any process running on your computer has a notion of its “working directory”. In R, this is where R will look, by default, for files you ask it to load. It also where, by default, any files you write to disk will go. Chances are your current working directory is the directory we inspected above, i.e. the one where RStudio wanted to save the workspace. You can explicitly check your working directory with: getwd() It is also displayed at the top of the RStudio console. In general it should be the directory of your R project. You can set R’s working directory at the command line like so: setwd(&quot;./subfolder&quot;) # sets the working dir to a subfolder of you project folder You can also use RStudio’s Files pane to navigate to a directory and then set it as working directory from the menu: Session &gt; Set Working Directory &gt; To Files Pane Location. 4.7 Recap R is a programming language that runs computations, while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. Adopt a naming convention. Either use snake case or use camel case. Choose the naming convention you like best in your study group. But stick only to one of them. Store your work in a project that keeps all the files associated with a project organized together (such as input data, R scripts, analytical results and figures). You may think of a project as a folder where you store all you work. This workflow will serve you well in the future: Create an RStudio project for an analytical project Keep inputs there (we’ll soon talk about importing) Keep scripts there; edit them, run them in bits or as a whole from there Keep outputs there (like the PDF written above) Avoid using the mouse for pieces of your analytical workflow, such as loading a dataset or saving a figure. Terribly important for reproducibility and for making it possible to retrospectively determine how a numerical table or PDF was actually produced. Store your R commands in a script file and R scripts with a .R suffix. Comments start with one or more # symbols. Use them. RStudio helps you (de)comment selected lines with Ctrl+Shift+C (Windows and Linux) or Ctrl+Shift+C (Mac). Values saved in R are stored in Objects. The interactive DataCamp course gave an introduction to some basic programming concepts and terminology: Data types: integers, doubles/numerics, logicals, and characters. Integers are values like -1, 0, 2, 4092. Doubles or numerics are a larger set of values containing both the integers but also fractions and decimal values like -24.932 and 0.8. Logicals are either TRUE or FALSE while characters are text such as “Hamilton”, “The Wire is the greatest TV show ever”, and “This ramen is delicious.” Note that characters are often denoted with the quotation marks around them. Vectors: a series of values. These are created using the c() function, where c() stands for “combine” or “concatenate.” For example, c(6, 11, 13, 31, 90, 92) creates a six element series of positive integer values . Factors: categorical data are commonly represented in R as factors. Categorical data can also be represented as strings. Data frames: rectangular spreadsheets. They are representations of datasets in R where the rows correspond to observations and the columns correspond to variables that describe the observations. 4.8 Exercises Exercises are numbered using [module number].[section number].[exercise number]. 4.8.1 Exercise (install packages) This exercise is done from the Console in RStudio. Install the package devtools using function install.packages. Note you can always get help/see documentation by typing ?install.packages or typing install.packages and press F1. You now have install the package from the default repository (CRAN). You may also install packages from other repositories (e.g. GitHub) Have a look at the documentation for function install_github in the package devtools. This can be done in different ways: library(devtools) # we here load all the functions in devtools ?install_github ?devtools::install_github # we here use the namespace devtools to load only one function Install the package tfa from github using path `` # filter the flights table to include only United and # American flights { sink(&quot;tmp.md&quot;) cat(&#39; Vi tester ```r cat(&quot;hello&quot;) cat(&quot;world&quot;) ```&#39;) sink() } bs_modal(id = &quot;hint&quot;, title = &quot;Hint&quot;, body = includeMarkdown(&quot;tmp.md&quot;)) &times; Hint Vi tester cat(&quot;hello&quot;) cat(&quot;world&quot;) Close bs_button(&quot;Hint&quot;) %&gt;% bs_attach_modal(id_modal = &quot;hint&quot;) Hint 4.8.2 Exercise [Add text] 4.8.3 Exercise () [Add text] 4.8.4 Exercise (string management) [Add text] "],
["sec-signup.html", "5 Signup for online resources 5.1 Learning outcomes 5.2 Online Tasks/activitites", " 5 Signup for online resources During the course we are going to use a set of online resources that you will need to sign up to. If you already have an account at some of the places you may use your current account. 5.1 Learning outcomes By the end of this module, you are expected to have: Signed up to Peergrade. Signed up to Datacamp. Signed up to GitHub. Signed up to Udemy. Signed up for the course using the online form. 5.2 Online Tasks/activitites Peergrade is an online platform for peer feedback activities and automates most of the process. We are going to use Peergrade in the two mandatory home assignments. You will handin your assignment in groups and do individual peer feedback. Datacamp is an online platform for learning data science. We are going to use the platform for online lessons and exercises in the R part of the course. Udemy is an online learning platform with different online courses. We are going to use Udemy in the VBA part of the course. GitHub is a code sharing and publishing service and may be seen as a social networking site for programmers. We are going to use GitHub for sharing R code in the R part of the course in the groups. Signup for the course “Tools for analytics” at Peergrade using course code XE7FMM. Signup using the institunal AU login. [SKAL STUD LOGGE IND MED AU CREDENTIALS?] Sigup for Udemy … [SKAL OPRETTES] Signup for the course “Tools for analytics” at Datacamp. Note you have to use your university e-mail with domain post.au.dk. Signup for GitHub. Add your preferences about group work in the Google sheet. Fill out the online form. Remember your user names and passwords! Peng, R. D. 2018. R Programming for Data Science. https://bookdown.org/rdpeng/rprogdatascience/. "]
]
