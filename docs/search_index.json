[["index.html", "Tools for Analytics (TFA) Course notes Module 1 Introduction to the course 1.1 Learning outcomes 1.2 Purpose for the course 1.3 R vs Excel/VBA 1.4 How a computer works 1.5 How the notes are organized 1.6 Acknowledgements 1.7 Exercises", " Tools for Analytics (TFA) Course notes Lars Relund Nielsen 2022-08-08 Module 1 Introduction to the course This site contains course notes for the course “Tools for Analytics” held at Aarhus BSS. The notes show the learning path for each week and contain. The course is an introductory course at the Operations and Supply Chain Analytics programme and intended to give knowledge about IT tools for Analytics. Expect the notes to be updated when the course runs. The date listed above is the last time the notes was updated. Learning path diagram Click/hover the nodes to follow links and see details. A detailed description of Business Analytics have been pointed out as an extra supplement in the learning path diagram. You may have a look at it if you like. 1.1 Learning outcomes By the end of this module, you are expected to: Memorize the purpose of the course. Describe what the term Business Analytics mean. Identify pros and cons of using Excel, VBA and R. Describe how a computer works. Describe what an algorithm is. Know how the course is organized. The learning outcomes relate to the overall learning goals number 1, 3 and 5 of the course. 1.2 Purpose for the course Since the amount of available data has increased extensively in many companies, there is a need for analysts with the ability to do tasks within Analytics. For instance, extract relevant data and perform valid quantitative analysis. Clearly, it is also important that the analyst can communicate the results of the analysis to their surroundings. This requires for the analyst to be particularly qualified in handling IT based tools beyond e.g. basic Excel. Business Analytics (BA) (or just Analytics) refers to the scientific process of transforming data into insight for making better decisions in business. BA can both be seen as the complete decision making process for solving a business problem and the creation of business value by integration of concepts, methods and data. As a process, it can be characterized by descriptive, predictive, and prescriptive model building using data sources. For a full definition see the appendix. Within a Business Analytics (BA) framework the course focuses on giving you an introduction to programming, handeling data and doing descriptive analytics. Descriptive analytics categorizes, characterizes, consolidates, and classifies data. Examples are standard reporting and dashboards (key performance indicators (KPIs), what happened or is happening now?) and ad-hoc reporting (how many/often?). Descriptive analytics often serves as a first step in the successful application of predictive or prescriptive analytics. Predictive and prescriptive analytics are covered in other courses of the programme. Analytics may be seen as a data driven process: Figure 1.1: Analytics as a data driven process. For doing data driven analytics you first must import your data. That is, take data from a database, file, web API etc. and transform it into a data frame/table. In general raw data may be messy and need to be structured in a tidy way. Tidying your data means storing it in a structured form suitable for analysis. In brief, when your data is tidy, each column is a variable, and each row is an observation. Tidy data is important because the consistent structure lets you focus your struggle on questions about the data. Once you have tidy data, a common first step is to transform it. Transformation includes narrowing in on observations of interest (e.g. only observations from a specific year or warehouse), creating new variables based on existing variables (e.g. the cost of using the machine that day given idle time). Together, tidying and transforming are called wrangling, because it can be a hard process to get your data in the right form. The next step is to do a simple exploration of you data such as calculating a set of summary statistics (like counts, means or KPIs). A good way to get an overview over your data is by visualization. A good visualisation will show you things that you did not expect, raise new questions about the data or confirm your hypothesis. A good visualization might also hint that you’re asking the wrong question, or you need to collect different data. Exploration and visualization are descriptive analytics and used to answer questions such as: What happened? How many, how often, where? Where exactly is the problem? What actions are needed? Models are complementary tools to visualization. Once you have made your questions sufficiently precise, you can use a model to answer them. A model is a description of a system using mathematical concepts and a simplification of the real system. That is, the results of a model are based on a set of assumptions. Models for statistical analysis, forecasting, system behavior are predictive analytics and answer questions like: Why is this happening? What if these trends continue? What will happen next? Models for prescriptive analytics use optimization and other decision modeling techniques to suggest decision options with the goal of improving business performance and answer questions like: What is the best that can happen? Exploration, visualization and modeling may be seen as different steps which can be used for analyzing the data and answer the overall questions. This course will focus on the two first steps. Given an analysis, communication is an absolutely critical part. It does not matter how well your models and visualization have led you to understand the data unless you can also communicate your results to decision makers. Note that analytics is not a one-way process, it is common that you several times have to tidy and transform your data, explore and visualize based on the results of a model, rerun the model based on feedback from the decision makers etc. Common connections are visualized using directed arrows in Figure 1.1. Surrounding the process is programming. Programming is the Swiss army knife you use during parts of the process. An introduction to programming is given using both VBA in Excel and the programming language and free software environment R. Programming focus on writing algorithms. An algorithm is a finite sequence of well-defined instructions to solve a specific problem or to perform a computation. That is, we use a programming language to program an algorithm that solves a specific task, e.g. find the best route, sort words, make a plot, etc. 1.3 R vs Excel/VBA This course gives you an introduction to programming using both VBA and R. The two programming languages are different and here are some comparisons: Excel Pros: Initial learning curve is quite minimal. Analysis can be done via point-and-click. Useful for fast analysis (you can change a cell and see effects on other cells, plots etc.) It is not exceedingly hard to make basic graphs and charts. Data can be stored inside the sheets. Cons: The mixture of data entries, analysis, and visualization makes it easy to confuse cells that contain raw data from those that are the product of analysis. The analysis directly manipulates the only copy of the raw data. Using mouse clicks means that a mistaken click or drag action can lead to errors or the overwriting of data. Do not handle non-tabular data well. VBA VBA is a compiled language implemented using compilers (translators that generate machine code from source code). That is, code need to be compiled first before running it. Pros: Can be used inside MS Office applications e.g. Excel. Already contained in Excel, i.e. if you have Excel installed you can start coding. The VBA code is stored within the spreadsheet, allowing any user with access to the spreadsheet to easily run the code. VBA is easy to learn. Especially if you are already experienced in Excel. Good for automating tasks in Excel. Still used in many companies. Cons: A programming language, meaning the initial learning curve is steeper. It will take you some time to become familiar with the interface and master the various functions. Since a compiled language, compiling code may take time. Powerful inside Excel but other programming languages are better to learn for general tasks. An old programming language (Microsoft stopped investing in VBA in 2008). R R is an interpreted language with step-by-step execution of source code (no pre-runtime translation takes place) from the command line or using a script file. Pros: There is a clear division between data entry and analysis. You import the data, create an object that is a copy of the raw data and do manipulations on this copy. That is, the original data are never altered in any way and there is no way to mess up the raw data. Manipulating a copy of the data enables you to experiment. A line of code that fails to produce the expected result can be tweaked and rerun. All manipulations can be done in code. The process of analysis are easily reproduced by the code. That is, the use of code for data analysis enables the creation of more reproducible research. With code all analysis is documented instead of being hidden behind mouse clicks. Saving analysis in code has the immediate benefit that it can be easily rerun anytime that new data is added or the code can also be applied to a completely new data set. Free and with a large community that promotes sharing of libraries for data analysis. Can produce complex and advanced data visualizations. Cons: R is a programming language, meaning the initial learning curve is steeper. It will take you some time to become familiar with the interface and master the various functions. 1.4 How a computer works As a prerequisite for this course you need some basic knowledge about what a computer is. Have a look at these slides or this video. 1.5 How the notes are organized Module 1 (this module) gives a short introduction to the course. The course notes consists of different parts each containing teaching modules about specific topics: Part I consider tools for analytics using VBA in Excel (mainly programming). Module 2 gives you an introduction to VBA so you can get started programming. In Module 3 loop and conditional statements are introduced and Module 4 focus on how to make procedures. Next, we consider advanced data types and usage in Module 5. Finally, Module @ref(#mod-vba-random-numbers) considers generation of random numbers in VBA and how they can be used for simulation. Part II consider tools for analytics using R. The appendix contains different modules that may be helpful for you including hints on how to work in groups, how to get help if you are stuck and how to annotate the course notes. 1.6 Acknowledgements Some of the materials in these notes are taken from various places The bookdown skeleton and some notes are based on the Stat545 course. Some parts in Module 1 are inspired by Chapter 1 in Wickham (2017). The VBA modules are inspired by the book Wøhlk (2010). This also holds for some of the exercises. Module 7 is inspired by Chapter 1 in Bryan (2017). Module 8 is using some text and images from Chapter 1 in Ismay and Kim (2020) and Chapter 2 in Bryan (2017). A few exercises are inspired by Chapter 2 in Irizarry (2020). Notes about git and GitHub in the appendix are based on Bryan, STAT 545 TAs, and Hester (2020). Exercise ?? is a revision of Chapters 6-7 in Bryan (2017). Exercise ?? is a revision of Session 3 in the Welcome to the tidyverse course. Exercise ?? is a revision of Chapter 9 in Irizarry (2020). Exercise ?? is inspired by the COVID19 application exercise at the data science in a box course. Exercise ?? is inspired by the Lego homework exercise at the data science in a box course. Exercise ?? is inspired by the Fisheries application exercise at the data science in a box course. I would like to thank all for their inspiration. Also thanks to Solveig for proofreading the draft. This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International CC BY-NC-SA 4.0. 1.7 Exercises 1.7.1 Exercise - How to annotate The online course notes can be annotated using hypothes.is. You can create both private and public annotations. Collaborative annotation helps people connect to each other and what they’re reading, even when they’re keeping their distance. You may also use public notes to help indicate spell errors, unclear content etc. in the notes. Sign-up at hypothes.is. If you are using Chrome you may also install the Chrome extension. Go back to this page and login in the upper right corner (there should be some icons e.g. &lt;). Select some text and try to annotate it using both a private and public annotation (you may delete it again afterwards). Go to the slides for this module and try to annotate the page with a private comment. References "],["mod-vba-intro.html", "Module 2 An introduction to VBA 2.1 Learning outcomes 2.2 What is VBA 2.3 Setup Excel for VBA 2.4 Your first program 2.5 The macro recorder 2.6 VBA - A short overview 2.7 Good coding pratice 2.8 Recap 2.9 Exercises", " Module 2 An introduction to VBA This module gives a short introduction to VBA, so you can get started programming and run your code. A template with VBA code for this module is given in the file 02-vba-intro-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM2_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM2_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. Learning path diagram Click/hover the nodes to follow links and see details. If you like a different learning style there is a lot for videos about VBA online such as course 14-Hour VBA Course. The videos have been pointed out as extra online supplements in the learning path diagram. However, they are not necessary for the course. Since Excel change as new versions arrive and it work on different operating systems, the look in the screenshots and videos might be a bit different from your version. However, you still should be able to understand it. 2.1 Learning outcomes By the end of this module, you are expected to: Describe what VBA is. Setup Excel for VBA. Know how the macro recorder works. Make your first program. Have an overview over what VBA can do. Describe what a variable is. Name different data types and how they effect memory size. Declare a variable as a data type. Make a simple procedure. Do simple loops and conditional statements. Recorded you first macro using the macro recorder The learning outcomes relate to the overall learning goals number 2 and 4 of the course. 2.2 What is VBA Visual Basic for Applications (VBA) is an implementation of the BASIC programming language intended to control and automate Microsoft Office applications, developed by Microsoft. For instance, you can automatically create sheets, delete objects, create user-defined functions or read/write data to a sheet. It is not a standalone program, it can only run in the host application. In this course we will focus on running VBA from Excel. VBA is widely used in the industry (specially linked to Excel) and easy to learn. Microsoft stopped investing in VBA in 2008. It only update it for small changes. However, VBA is still a vital part of desktop Office applications, and will continue to be so in the future. VBA is a compiled language implemented using compilers (translators that generate machine code from source code). That is, code need to be compiled first before running it. You can only run VBA using the desktop version of Excel. That is, you can’t create, run, or edit VBA in Excel for the web. With VBA you can extend Excel and automate tasks by coding different algorithms that for instance can be run by pressing a button. Since VBA is a programming language, the initial learning curve is steeper compared to Excel. However, you will get started fast because you already know Excel. 2.3 Setup Excel for VBA For running VBA code the Developer tab needs to be visible in Excel. This can be done by check marking the Developer tab under the ‘Ribbon and Toolbar’ options in Excel. You add it by choosing Excel -&gt; Preferences -&gt; Ribbon and toolbar ( ) or right click a tab and choose Customize ribbon … ( ). Figure 2.1: The VBA editor. In the Developer tab you open the VBA editor by pressing the Visual basic button ( Alt + F11, ⌥ + F11). The VBA editor is where you write your VBA code. A screenshot of the VBA editor can be seen in Figure 2.1. You can setup the editor so it consists of a set of different sub-windows. Here we will highlight the ones you will use the most: Code: The code window is where you can see the code of your modules. Process Explorer: Gives you an overview over all your open workbooks (a Excel file) and the VBA modules (a place to write VBA code) inside each workbook. Properties: Each element in the Process Explorer can be seen as an object and each object has a set of properties. For instance a module have a property called Name containing the name of the module. You can edit the name by modifying the field in the Properties window. Similar a worksheet has a set of properties (try selecting one of the sheets in the Process Explorer). Locals: This is a window which can be used for debugging. During debugging you can run your code line by line by inserting breakpoints. You can then observe the values of your variables in the Locals window. If you do not see the sub-windows in the editor. Then you can open them using the icons in the toolbar (hoover over the icons to find them). Finally, let us set the preferences for the VBA editor. Open the preferences/options Excel -&gt; Preferences -&gt; Editor ( ) or Tools -&gt; Options -&gt; Editor ( ). Uncheck mark ‘Auto Syntax Check’ and check mark ‘Require Variable Declaration’. 2.4 Your first program Let us try to make your first piece of code. Download the template file 02-vba-intro-template.xlsm, open the file and open the VBA editor under the Developer tab. Add a new module by clicking the Insert Module icon (upper left corner - note you can hoover over the icons to see what they do). Rename the module (named Module1) to TM2_hello (note you have to use underscores). Open the module by double clicking on the module in the Process Explorer Add the code &#39; Your first program/macro Sub TM2_SayHello() MsgBox (&quot;Say hello world :-)&quot;) End Sub The code is a procedure (sub) and since it does not have any input arguments it is called a macro and can be run directly. Note if a line starts with a ' then the line is considered as a comment and not used by the program. Run the macro by pressing the Play icon or using the shortcut F5. What happend? Go to the worksheet TM2 in Excel. In the Developer tab press the Button icon and click on cell G3. In the popup window select macro name TM2_SayHello and click OK. Rename the button by clicking the text and call it ‘Say Hello’. Click besides the button to finish. Run the button by clicking it. Try right clicking the button and move/resize it. Save the workbook (Excel file). Note the Excel file has extension .xlsm and not .xlsx because it contains VBA code. You have now finished your first program by saying hello to the world using a message box. 2.5 The macro recorder It is possible to use the Macro recorder to turn your actions in Excel into VBA code. This can be particularly useful if you have forgotten the code for a specific color, the name of a function or need to plot a graph. Unfortunately, you cannot record if-statements or loops, so the recorder is not an easy way out of learning to code. But it is a handy tool for getting pieces of code. Let us try to record a macro that make a scatter plot of cells D8:E12 and change the title: Click the Record Macro icon under under the Developer tab. Name the macro TM2_Plot and click OK (the recorder is now running). Go to the worksheet TM2 and select cells D8:E12. Add a scatter plot of the points. Rename the title to ‘A line’. Click the Stop Recording icon under under the Developer tab. You have now finished recording your macro. Let us have a look at the code by going to the TM2_Plot sub in the VBA editor. You should have something similar to: Sub TM2_Plot() &#39; &#39; TM2_Plot Macro &#39; Worksheets(&quot;TM2&quot;).Activate Range(&quot;D8:E12&quot;).Select ActiveSheet.Shapes.AddChart2(240, xlXYScatterSmooth).Select ActiveChart.SetSourceData Source:=Range(&quot;&#39;TM2&#39;!$D$8:$E$12&quot;) ActiveChart.ChartTitle.Select ActiveChart.ChartTitle.Select ActiveChart.ChartTitle.Text = &quot;A line&quot; Selection.Format.TextFrame2.TextRange.Characters.Text = &quot;A line&quot; With Selection.Format.TextFrame2.TextRange.Characters(1, 6).ParagraphFormat .TextDirection = msoTextDirectionLeftToRight .Alignment = msoAlignCenter End With With Selection.Format.TextFrame2.TextRange.Characters(1, 1).Font .BaselineOffset = 0 .Bold = msoFalse .NameComplexScript = &quot;+mn-cs&quot; .NameFarEast = &quot;+mn-ea&quot; .Fill.Visible = msoTrue .Fill.ForeColor.RGB = RGB(89, 89, 89) .Fill.Transparency = 0 .Fill.Solid .Size = 14 .Italic = msoFalse .Kerning = 12 .Name = &quot;+mn-lt&quot; .UnderlineStyle = msoNoUnderline .Spacing = 0 .Strike = msoNoStrike End With With Selection.Format.TextFrame2.TextRange.Characters(2, 5).Font .BaselineOffset = 0 .Bold = msoFalse .NameComplexScript = &quot;+mn-cs&quot; .NameFarEast = &quot;+mn-ea&quot; .Fill.Visible = msoTrue .Fill.ForeColor.RGB = RGB(89, 89, 89) .Fill.Transparency = 0 .Fill.Solid .Size = 14 .Italic = msoFalse .Kerning = 12 .Name = &quot;+mn-lt&quot; .UnderlineStyle = msoNoUnderline .Spacing = 0 .Strike = msoNoStrike End With ActiveChart.ChartArea.Select End Sub In general a recorded macro contains a lot of unnecessary code which can be removed. For instance, here we just want to make a scatter plot of cells D8:E12 and change the title. That is, the code can be reduced to: &#39; Add a scatter plot Sub TM2_Plot() Worksheets(&quot;TM2&quot;).Activate Range(&quot;D8:E12&quot;).Select ActiveSheet.Shapes.AddChart2(240, xlXYScatterSmooth).Select ActiveChart.SetSourceData Source:=Range(&quot;&#39;TM2&#39;!$D$8:$E$12&quot;) ActiveChart.ChartTitle.Text = &quot;A line&quot; End Sub Which code to remove can sometimes be hard to realize. However, you may try to remove small parts of code, run the macro and check if the results still are as wanted. Finally, try to add a button ‘Make plot’ that run the macro. Go to the worksheet TM2 and do steps: In the Developer tab press the Button icon and click on cell G8. In the popup window select macro name TM2_Plot and click OK. Rename the button by clicking the text and call it ‘Make plot’. Click besides the button to finish. Run the button by clicking it. 2.6 VBA - A short overview Let us have a short overview over some VBA features so you can get started coding. Basic building blocks in programming are: Variables store stuff in memory. Procedures (functions and subs) execute a set of instructions. Input and output are needed to read data and output the result. Conditional statements are used to execute different instructions depending on a true/false value. Loops are used to execute code repeatedly. 2.6.1 Variables Variables are used to store information that is saved in memory. You may visualize a variable as a box in memory (see Figure 2.2). The variable name can be seen as the label on the box. Figure 2.2: Visualization of computer memory The box can contain for instance a number, a date or a boolean. That is, any data type defined by VBA. Some of the basic data types used by VBA are: Table 2.1: Basic data types. Name Type Details Byte Numerical Whole number between 0 and 255. Integer Numerical Whole number between -32768 and 32767. Long Numerical Whole number between - 2147483648 and 2147483647. Double Numerical Floating decimal number between -1.79769313486232E308 and 1.79769313486232E308. String Text Text. Date Date Date and time. Boolean Boolean True or False. Variant Any type Any kind of data (default type if the variable is not declared). All basic data types can be seen in the VBA documentation. Note that some data types are numericals, i.e. they represent a number (either an integer or a decimal number), other data types represent a set of characters (a string), a boolean or a date. More advanced data types such as a group of numbers (a numeric array), a range of cells in a worksheet (an object) or a set of numbers (a collection) will be considered in Module 5. Your memory contains a limited amount of storage and it is therefore important to use it wisely. The computer memory can be seen as a group of bits (zero and ones) and we can measure the memory size by counting the number of bits or bytes (8 bits = 1 byte). Different data types take up different amounts of memory. For example, the memory requirements for some of the basic data types are: Table 2.2: Memory requirements for some data types. Data type Storage size Byte 1 byte Boolean 2 bytes Integer 2 bytes Long (long integer) 4 bytes Double (double-precision floating-point) 8 bytes Date 8 bytes String 10 bytes + string length * 2 bytes Variant (a number) 16 bytes Variant (a string) 22 bytes + string length * 2 bytes 8 Bits = 1 Byte, 1024 Bytes = 1 Kilobyte, 1024 Kilobytes = 1 Megabyte, 1024 Megabytes = 1 Gigabyte and 1024 Gigabytes = 1 Terabyte. Always declare your variables explicit in VBA. If you can add Option Explicit in the top of your module, undefined variables will raise an error. You can add it by default by modifying the preferences for the VBA editor (see Section 2.3). Declaring variables is good coding practice since it reduces the memory requirements and avoid type errors such as Option Explicit Dim intCtr as integer intCtr = 10 intCtr = intCtg + 10 This will raise an error because intCtg is not defined (you have made a typo and meant intCtr). Without Option Explicit the code will run and assume that intCtg is another variable (initialized to zero). As can be seen a double takes 4 times the memory compared to an integer. That is, you can save memory by considering what data type you need. Consider an example where you have 10000 customer locations on a map and you want to store the distance between customer \\(i\\) and \\(j\\). That is, you have to store \\(10000 \\cdot 10000 = 100.000.000\\) numbers. The memory requirements given different data types are: Data type Memory requirements Variant \\((10000\\cdot 10000\\cdot 16)/1024/1024 \\approx 1526\\) MB Double \\((10000\\cdot 10000\\cdot 8)/1024/1024 \\approx 763\\) MB Integer \\((10000\\cdot 10000\\cdot 2)/1024/1024 \\approx 191\\) MB If you do not think about memory usage a Variant data type would have been used taking up the double the size compared to using a Double (a decimal number). Moreover, if it is enough to measure the distance using an Integer between 0 and 32767, then we can reduce the memory requirements to only 191 MB. Often the free memory in your computer is around 5 GB, i.e. think about which data type you need! You declare variables using the Dim keyword: &#39;&#39; Declare some variables Sub TM03_DeclareVariables() &#39; Always declare variables in the top of a procedure (memory is allocated) Dim intPersons As Integer Dim dblAmount As Double Dim strText As String &#39; Here we assign values to the variables (modify the memory) intPersons = 10 dblAmount = 27.4 strText = &quot;Number of persons are &quot; MsgBox (strText &amp; intPersons &amp; &quot; which own &quot; &amp; dblAmount &amp; &quot;$&quot;) End Sub Three variables are declared on the first three lines in the sub (good coding practice). Variables can be of different data types (here an integer, a double and a string). We allocate values to the variables on the next lines and finally output the result in a message box. Note VBA code is case-insensitive, i.e. strText and strtext is the same variable. It is good coding practice to be consistent and often the VBA editor will help you by changing strtext to strText automatically. 2.6.2 Procedures In VBA we deal with two kinds of procedures: A Sub which can work as a “macro” in Excel, i.e. we can call it using e.g. a button and a Function which can work like Excel functions, i.e. return a value. We already have declared some subs. Let us try to make a function: &#39;&#39; A function joining two strings Function TM2_StringJoin(strF As String, strL As String) As String Dim strJ As String strJ = strF &amp; &quot; &quot; &amp; strL TM2_StringJoin = strJ End Function First observe that the function have two string input arguments strF and strL. These two strings are joined into one string (saved in the variable strJ) by using the string concatenate symbol &amp;. Finally, the value is returned by assigning the value to same variable as the function name TM2_StringJoin. The function can be called from Excel like any other function by using the function name (have a look at cell D5 in the worksheet TM2). You may also use all the built-in Excel functions in VBA: &#39;&#39; Call an Excel function Sub TM2_ExcelFunction() MsgBox (&quot;The sum of cells D9:D12 are &quot; &amp; WorksheetFunction.Sum(Worksheets(&quot;TM2&quot;).Range(&quot;D9:D12&quot;))) End Sub Note all Excel functions are accessed using the WorksheetFunction object. That is, we write WorksheetFunction.&lt;function name&gt;. VBA also has a set of built-in functions which can be used. For instance the Date and InStr function: &#39;&#39; Call VBA functions (run it using F5) Sub TM2_VBAFunction() MsgBox (&quot;The current date is &quot; &amp; Date) MsgBox (&quot;Jen is found at char number: &quot; &amp; InStr(&quot;Hi Jen how are you&quot;, &quot;Jen&quot;)) End Sub We will have a closer look on procedures in Module 4. 2.6.3 Input and output Input and output are needed to read data and output the result. Examples on input/output are dialog boxes which can be created using MsgBox or InputBox: Sub TM2_Dialog() Dim strName As String strName = InputBox(&quot;Type your name:&quot;) MsgBox &quot;Your name is &quot; &amp; strName End Sub First, a string is declared. Next, a value is read to the string using an input box. Finally, the result is output using a message box. You can also write/read values from a sheet using Range or Cells. Note it is always a good idea to know which sheet you are considering by using the Worksheets function: &#39;&#39; Read and write to sheet Sub TM2_ReadWriteSheet() Dim str1 As String Dim int1 As Integer Worksheets(&quot;TM2&quot;).Activate &#39; We activate a sheet so know use this sheet &#39; Input values from sheet str1 = Range(&quot;D4&quot;) &#39; read cell D4 int1 = Cells(9, 4) &#39; read row 9 and col 4 (cell D9) &#39; Output values Range(&quot;B7&quot;) = str1 &amp; &quot;(&quot; &amp; int1 &amp; &quot;)&quot; Cells(8, 2) = str1 End Sub After declaring variables, the worksheet TM2 is activated and we input/output values using the Range and Cells functions. We will have a closer look on the range object in Module 5. 2.6.4 Conditional statements Conditional statements execute different instructions depending on a true/false value. &#39;&#39; Conditional statements example Sub TM2_CondStatement() Dim strName As String Dim intAnswer As Integer Worksheets(&quot;TM2&quot;).Activate strName = InputBox(&quot;Type your name:&quot;) intAnswer = MsgBox(&quot;Do you want to display your name in a message box?&quot;, vbYesNo) &#39; you can use vbYes and vbNo in your code If intAnswer = vbYes Then &#39; Make the message box: MsgBox (&quot;Your name is &quot; &amp; strName) Else &#39; Write to the sheet: Range(&quot;B10&quot;) = strName MsgBox (&quot;Your name is in cell B10&quot;) End If End Sub After declaring variables and activating the worksheet, a dialog box is used for reading your name. Next, based on your answer we use an If/Else statement to do two different tasks. We will have a closer look on conditional statements in Module 3. 2.6.5 Loops Loops can be used to execute code repeatedly: &#39;&#39; Loops example Sub TM2_Loops() Dim k As Integer Worksheets(&quot;TM2&quot;).Activate For k = 2 To 5 Cells(k, 10) = &quot;Row &quot; &amp; k Next End Sub Here a For loop is used to write out values to cells J2:J5. We will have a closer look on loops in Module ??. 2.7 Good coding pratice It is always a good idea to maintain a consistent coding practice. The main reason for using a consistent set of coding conventions is to standardize the structure and coding style of an application so that you and others can easily read and understand the code. Good coding conventions result in precise, readable, and unambiguous source code that is consistent with other language conventions and as intuitive as possible. As you already have seen the code in this teaching module has been structured in VBA modules (we use the prefix TM2_ for all modules related to this teaching module). Each procedure starts with a capital letter and we use code indention to read the code easier. Different ways of naming variables exists (naming convention). Some use snake case others use camel case. The Leszynski naming convention define variables with a consistent prefix that makes it easy to identify its data type. Some common prefixes used for the Leszynski naming convention are: Table 2.3: Prefixes for some variables. Type Prefix Example Boolean bln blnFound Currency cur curRevenue Date (Time) dtm&lt; dtmStart Double dbl dblTolerance Integer int intQuantity Long lng lngDistance String str strFName Variant vnt vntCheckSum Array ary aryNumbers (optional) Worksheet wst wstDistances Workbook wbk wbkData Many other prefixes can be used also. It is common to use Leszynski convention within the VBA community. A few examples: this_is_snake_case # note you do not use capital letters here (not used) thisIsCamelCase # you start each word with a capital letter intAmount # Lezynski convention naming an integer (int) variable strFullName # Lezynski naming a string (str) variable We adapt the Leszynski naming convention together with camel case. One exception is that we add the suffix TM2_ when we name procedures so that we can easy find procedures related to a given teaching module. When defining variables and functions, it is in general good practice to use nouns for variables and verbs for functions. It is always good practice to comment your code. Such that others can get a fast overview and understand your code easier. We will use roxygen documentation comments which are widely known. For example in the top of a module file you may write: &#39;&#39; Module description. &#39; Can be more than one line. &#39; @author Lars Relund &lt;junk@relund.dk&gt; Before each sub, function etc. write something like: &#39;&#39; Sub description &#39; &#39; @pre Precondition &#39; @post Postcondition &#39; &#39; @param strA Explanation of input parameter strA &#39; @param intB Explanation of input parameter intB &#39; @return Return value (if a function) &#39; @remarks Further remarks Function MyFunc(strA As String, intB As Integer) As Integer { ... } For further details about coding/naming convention see Section D. 2.8 Recap This module gives a short introduction to VBA: A programming language intended to control and automate Microsoft Office applications (we use Excel). VBA (Visual Basic for Applications) is an implementation of BASIC developed by Microsoft. A compiled language. That is, code need to be compiled first before running it. You can only run VBA using the desktop version of Excel (not the web version). With VBA you can extend Excel and automate tasks by coding different algorithms that for instance can be run by pressing a button. For running VBA code the Developer tab needs to be visible in Excel. This can be done by check marking the Developer tab under the ‘Ribbon and Toolbar’ options in Excel. You add it by choosing Excel -&gt; Preferences -&gt; Ribbon and toolbar ( ) or right click a tab and choose Customize ribbon … ( ). In the Developer tab you open the VBA editor by pressing the Visual basic button ( Alt + F11, ⌥ + F11). A few useful shortcuts: Toggle VBA editor and Excel ( Alt + F11, ⌘⇧´). Run current procedure or continues execution after pausing (F5). Auto complete code (Ctrl + Space). On a mac you may have to disable the default shortcut (Ctrl + Space) for switching input sources. You can go to the System Preferences -&gt; Keyboard -&gt; Shortcuts -&gt; Input Sources and disable it. Use the debugger and go to next line of code ( F8, ⇧⌘I). Switch between subs/functions ( Ctrl + Up/Down, ⌘ + Up/Down). Basic building blocks in programming: Variables store stuff in memory. Procedures (functions and subs) execute a set of instructions. Conditional statements are used to execute different instructions depending on a true/false statement. Loops are used to execute code repeatedly. Input/output are needed to read data and output the result. Variables are used to store information in the program. Think of it as a box that can contain e.g. a number, a string or a date. The variable name is the label on the box. In VBA we deal with two kinds of procedures: A Sub which can work as a “macro” in Excel, i.e. we can call it using e.g. a button and a Function which can work like Excel functions, i.e. return a value. Examples on input/output are dialog boxes which can be created using MsgBox or InputBox. You can also write/read values from a sheet using Range or Cells. Note it is always a good idea to know which sheet you are considering by using Worksheets(\"&lt;sheet name&gt;\").Activate. Conditional statements (decisions) execute different instructions depending on a true/false. Loops can be used to execute code repeatedly. Excel functions can be called with the WorksheetFunction e.g. WorksheetFunction.Sum(Range(\"D2:E5\")) Always remember to save workbooks with VBA code using the file has extension .xlsm and not .xlsx otherwise the VBA code will be removed from the file! You may also have a look at the slides for this module . 2.9 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! A template with VBA code for this module is given in the file 02-vba-intro-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM2_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM2_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. 2.9.1 Exercise - Hello Consider the procedure TM2_SayHello in Section 2.4 and modify it into procedure TM2_SayHelloAdv with features: Use an input box to ask for your name. Output Hello in cell B11 in worksheet TM2. Run it using the shortcut F5. 2.9.2 Exercise - Record a macro Do the following steps: Type ‘My name is:’ in cell B12. Type you name in cell B13 and activate it (click on it). Start the macro recorder and call the macro TM2_ChangeLayout. Change the color to blue and font size to 14. Stop the macro recorder. Activate cell B12 and run the macro. Open the VBA editor and inspect the macro. Cleanup the macro so only stuff about color and size are maintained. Add a button to run the macro. Select cells D15:E17 and run the macro. Modify the macro in the editor so the font size is 10 and test it. 2.9.3 Exercise - User input Write a procedure (sub) TM2_CheckNumber that: Ask for an integer using an input box. Make a message box telling if the number is above or at most 10. Write the number to cell B14. What happens if you do type in a string in the input box? 2.9.4 Exercise - Max and min number The worksheet TM2_Numbers contains a button to a procedure that generate 40 random numbers. × Hint Sub TM2_FindMax() Dim intM As Integer Dim r As Integer Worksheets(&quot;TM2_Numbers&quot;).Activate intM = 0 For r = 1 To 40 If Cells(r, 1) ___ intM Then intM = ___ End If Next Range(&quot;D1&quot;) = ___ End Sub Close Hint Create a procedure that use loops and conditional statements to find the maximum number and write it to cell D1. Assign the procedure to button Find max. Create a procedure that use loops and conditional statements to find the minimum number and write it to cell D2. Assign the procedure to button Find min. × Hint Sub TM2_FindRange() Dim intM1 As Integer Dim intM2 As Integer Dim r As Integer Worksheets(&quot;TM2_Numbers&quot;).Activate intM1 = 1001 intM2 = 0 For r = 1 To 40 ___ Next Range(&quot;D3&quot;) = &quot;[&quot; &amp; intM1 &amp; &quot;,&quot; &amp; intM2 &amp; &quot;]&quot; End Sub Close Hint Create a procedure that use loops and conditional statements to find the number range and write it to cell D3. Assign the procedure to button Find range. Given two numbers m1 and m2, you can concatenate them to a string using &amp; e.g. \"[\" &amp; m1 &amp; \",\" &amp; m2 &amp; \"]\". Create a procedure that use loops and conditional statements to count the number of positives and write it to cell D4. Assign the procedure to button Count positives. It may often be nice to know the row number of the minimum and maximum values. Create a procedure that finds the maximum row number and write it to cell D5. Assign the procedure to button Find max row. Create a procedure that finds the minimum row number and write it to cell D6. Assign the procedure to button Find min row. The procedure TM2_RunAll which is already linked to button Run All, runs all the procedures. Have a look at the code and try it out. "],["mod-vba-loops-cond.html", "Module 3 Loops and conditional statements 3.1 Learning outcomes 3.2 Relational and logical operators 3.3 Loops 3.4 Conditional statements 3.5 Example - Find Jen 3.6 Example - A distance matrix 3.7 Recap 3.8 Exercises", " Module 3 Loops and conditional statements This module gives an introduction to loops and conditional statements. Loops are used to repeat code and conditional statements are used to redirect code execution based on the conditions. Both are basic building blocks in programming. A template with VBA code for this module is given in the file 03-vba-loops-cond-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM3_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM3_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. Learning path diagram Click/hover the nodes to follow links and see details. If you like a different learning style there is a lot for videos about VBA online such as course 14-Hour VBA Course. The videos have been pointed out as online supplements in the learning path diagram. However, they are not necessary for the course. Since Excel change as new versions arrive and it work on different operating systems, the look in the screenshots and videos might be a bit different from your version. However, you still should be able to understand it. 3.1 Learning outcomes By the end of this module, you are expected to be able to: Describe what a conditional statement is. Test a condition built using relational/logical operators. Declare a conditional statement. Describe what a loop is. Declare a loop. Declare nested loops. Exit a loop. The learning outcomes relate to the overall learning goals number 1, 2, 4, 8, 9-12 and 16 of the course. 3.2 Relational and logical operators Often you will need to compare a variable with another one. For this you need the relational operators given in Table 3.1 (also called comparison operators). Table 3.1: Comparison/relational operators. Operator Description Example = Equal to. A = B ’ False &lt;&gt; Not equal to A &lt;&gt; B ’ True &gt; Greater than. A &gt; B ’ False &lt; Less than. A &lt; B ’ True &gt;= Greater than or equal to. A &lt; B ’ True &lt;= Less than or equal to. A &lt;= B ’ True Assume that A = 2 and B=4. Let us consider an example (try to guess the output before running the procedure): &#39;&#39; Comparison of two variables Sub TM3_Comparison() Dim intA As Integer Dim intB As Integer intA = 10 intB = 20 If intA = intB Then MsgBox (&quot;A = B is True&quot;) Else MsgBox (&quot;A = B is False&quot;) End If If intA &lt;&gt; intB Then MsgBox (&quot;A not equal B is True&quot;) Else MsgBox (&quot;A not equal B is False&quot;) End If If intA &gt; intB Then MsgBox (&quot;A greter then B is True&quot;) Else MsgBox (&quot;A greter then B is False&quot;) End If If intA &lt;= intB Then MsgBox (&quot;A less than or equal to B is True&quot;) Else MsgBox (&quot;A less than or equal to B is False&quot;) End If End Sub Given two boolean expressions we use logical operators to compare them (see Table 3.2) Table 3.2: Logical operators. Operator Description Example AND If both the conditions are True, then the expression is true. A&lt;&gt;0 AND B&lt;&gt;0 ’ False OR If any of the two conditions are True, then the expression is true. A&lt;&gt;0 OR B&lt;&gt;0 ’ True NOT Reverse logical: if the expression is true, then the NOT operator returns false. NOT(A&lt;&gt;0 OR B&lt;&gt;0) ’ False XOR Logical Exclusion. If exactly one condition is True, the result is True. A&lt;&gt;0 XOR B&lt;&gt;0 ’ True Assume that A = 0 and B=4. Let us consider an example (try to guess the output before running the procedure): Sub TM3_Logical() If 5 &gt; 4 And 6 &gt; 2 Then MsgBox (&quot;5 &gt; 4 And 6 &gt; 2 is True&quot;) Else MsgBox (&quot;5 &gt; 4 And 6 &gt; 2 is False&quot;) End If If 1 &gt; 4 Or 1 &gt; 2 Then MsgBox (&quot;1 &gt; 4 Or 1 &gt; 2 is True&quot;) Else MsgBox (&quot;1 &gt; 4 Or 1 &gt; 2 is False&quot;) End If If 6 &gt; 4 Or 1 &gt; 2 Then MsgBox (&quot;6 &gt; 4 Or 1 &gt; 2 is True&quot;) Else MsgBox (&quot;6 &gt; 4 Or 1 &gt; 2 is False&quot;) End If If 5 &gt; 4 And Not 6 &gt; 2 Then MsgBox (&quot;5 &gt; 4 And Not 6 &gt; 2 is True&quot;) Else MsgBox (&quot;5 &gt; 4 And Not 6 &gt; 2 is False&quot;) End If &#39; If more than two boolean expressions remember parenthesis If (5 &gt; 4 Xor 6 &gt; 2) And 7 &gt; 10 Then &#39; Xor (exactly one is true) MsgBox (&quot;(5 &gt; 4 Xor 6 &gt; 2) And 7 &gt; 10 is True&quot;) Else MsgBox (&quot;(5 &gt; 4 Xor 6 &gt; 2) And 7 &gt; 10 is False&quot;) End If If 5 &gt; 4 Xor (6 &gt; 2 And 7 &gt; 10) Then MsgBox (&quot;5 &gt; 4 Xor (6 &gt; 2 And 7 &gt; 10) is True&quot;) Else MsgBox (&quot;5 &gt; 4 Xor (6 &gt; 2 And 7 &gt; 10) is False&quot;) End If End Sub Note parentheses have an impact on the result. Remember to use them correctly. 3.3 Loops Loops are used to repeat pieces of code. There are many types of loops statements but here we will consider For and While loops. The structure of a For loop is: For i = 1 To 10 &lt;code&gt; Next Here i is a counter used to repeat the code inside the loop 10 times. In general we do not use a suffix for counter variables (i should have been named intI according to our naming convention). An example on a simple for loop is: Sub TM3_Loop1() Dim i As Integer For i = 1 To 3 MsgBox (i) &#39; What will the output be? Next End Sub You can use the Step keyword to increment the counter by more than one: Sub TM3_Loop2() Dim i As Integer For i = 2 To 9 Step 2 If i &lt;&gt; 4 Then MsgBox (i) &#39; What will the output be? End If Next End Sub You can use Exit For to end a for loop prematurely (jump to the code after the loop): &#39;&#39; Write the row number in column A and exit after row 10 even though the loop runs to 20 Sub TM3_WriteNumbers1() Dim r As Integer Worksheets(&quot;TM3&quot;).Activate &#39; activate the sheet we want to use For r = 6 To 20 If r &gt; 10 Then Exit For End If Cells(r, 1) = r &#39; write to row r, col 1 (A) Next End Sub Loops may be nested inside each other. For instance if some action needs to be performed for each day and each employee or for each project and each work package of that project. Sub TM3_NestedLoops() Dim i As Integer Dim j As Integer For i = 1 To 2 For j = 1 To 3 MsgBox (&quot;(&quot; &amp; i &amp; &quot;,&quot; &amp; j &amp; &quot;)&quot;) Next Next End Sub The structure of a While loop is: Do While &lt;condition true&gt; &lt;code&gt; Loop Here the loops runs until the condition is not true. While loops are useful when you do not know how many times to do the loop in advance. An example on a simple while loop is: &#39;&#39; Write the row number in column B and exit after row 10 Sub TM3_WriteNumbers2() Dim r As Integer Worksheets(&quot;TM3&quot;).Activate r = 6 Do While r &lt; 11 Cells(r, 2) = r &#39; write to row r, col 2 (B) r = r + 1 Loop End Sub You can use Exit Do to end a while loop prematurely (jump to the code after the loop): &#39;&#39; Write 2, 4, ... in column C and exit after 21 or if equals 12 Sub TM3_WriteNumbers3() Dim i As Integer, r As Integer Worksheets(&quot;TM3&quot;).Activate r = 6 i = 2 Do While i &lt; 21 Cells(r, 3) = i &#39; write to row r, col 3 (C) If i = 12 Then Exit Do End If r = r + 1 i = i + 2 Loop End Sub Beware of endless loops. If the stopping criteria is NOT reached when using a while loop, the computer will keep going: &#39; An endless loop. Do not run if you don&#39;t know how to stop Sub TM3_EndlessLoop() Dim i As Integer While i &gt;= 0 i = i + 1 Wend End Sub An endless loop can be hard to stop depending on the operating system you use. Therefore always “save” before you “run” the code. Make sure the stopping criterion will be reached. You may try to stop the program using a shortcut ( try Ctrl + Break or Ctrl + Alt + Delete. try ⌘., ⌃ + Esc or ⌘⌥ + Esc.) Finally, the For Each loop has to be mentioned: Sub TM3_ForEach() Dim rngC As Range Dim i As Integer Worksheets(&quot;TM3&quot;).Activate i = 1 For Each rngC In Range(&quot;D6:E9&quot;) rngC = i i = i + 1 Next End Sub The loop is used for running trough a set of objects (we will have a closer look at objects in Section 5.3). Here rngC is used to run through all the cells in the range and set values. Note a range is scanned left-down. 3.4 Conditional statements Conditional statements are used to redirect code execution based on the conditions. If the condition is met then the code is executed. The general layout of an if-then-else conditional statement is: If &lt;condition&gt; Then &lt;code&gt; ElseIf &lt;condition&gt; Then &lt;code&gt; ElseIf &lt;condition&gt; Then &lt;code&gt; Else &lt;code&gt; End If If &lt;condition&gt; Then &lt;code&gt; Else &lt;code&gt; &#39; single line form You can drop the ElseIf and Else code chunks. Other conditional statements exists but in general you can formulate them using an if-then-else statement. Let us try to use a conditional statement to separate persons in two groups: &#39;&#39; Seperate persons into two groups (names are written in 2 columns) Sub TM3_SeparatePersons1() Dim r As Integer Worksheets(&quot;TM3_Separate1&quot;).Activate &#39; activate the correct sheet For r = 2 To 12 &#39; scan rows 2-12 If Cells(r, 2) = &quot;Professor&quot; Then Cells(r, 3) = Cells(r, 1) &#39; output in row C Else Cells(r, 4) = Cells(r, 1) &#39; output in row D End If Next End Sub We use variable r to store the row number we want to write to and then an if statement to separate professors from others. The output will be: Figure 3.1: Separate into two groups. If you want to separate both professors and associate professors from others, you may modify the if statement and use an ElseIf: &#39;&#39; Seperate persons into 3 groups (names are written in 3 columns) Sub TM3_SeparatePersons2() Dim r As Integer Worksheets(&quot;TM3_Separate2&quot;).Activate &#39; activate the correct sheet For r = 2 To 12 If Cells(r, 2) = &quot;Professor&quot; Then Cells(r, 3) = Cells(r, 1) ElseIf Cells(r, 2) = &quot;Associate Professor&quot; Then Cells(r, 4) = Cells(r, 1) Else Cells(r, 5) = Cells(r, 1) End If Next End Sub Finally, let us try to separate into five groups: &#39;&#39; Seperate persons into 5 groups (names are written in 5 columns) Sub TM3_SeparatePersons3() Dim r As Integer Worksheets(&quot;TM3_Separate3&quot;).Activate &#39; activate the correct sheet For r = 2 To 12 If Cells(r, 2) = &quot;Professor&quot; Then Cells(r, 3) = Cells(r, 1) ElseIf Sheet1.Cells(r, 2) = &quot;Associate Professor&quot; Then Cells(r, 4) = Cells(r, 1) ElseIf Sheet1.Cells(r, 2) = &quot;Post Doc&quot; Then Cells(r, 5) = Cells(r, 1) ElseIf Sheet1.Cells(r, 2) = &quot;PhD student&quot; Then Cells(r, 6) = Cells(r, 1) Else Cells(r, 7) = Cells(r, 1) End If Next End Sub Here the output will be: Figure 3.2: Separate into five groups. 3.5 Example - Find Jen Consider column A in Figure 3.2. Assume we want to check if Jen is in a name and output her position. We can use a for loop for this: &#39;&#39; Find cell with Jen using a For loop Sub TM3_FindJen1() Dim r As Integer Worksheets(&quot;TM3_Separate1&quot;).Activate &#39; activate the correct sheet For r = 2 To 12 If InStr(Cells(r, 1), &quot;Jen &quot;) &gt; 0 Then &#39; InStr returns first char position at which match is found (0 if no match) MsgBox &quot;Jen is a &quot; &amp; Cells(r, 2) &amp; &quot; (Row &quot; &amp; r &amp; &quot;)&quot; Exit For &#39; exit the loop End If Next End Sub We scan all rows for Jen and return her position. If we found her, then we exit the for loop (no need to search further). What happens if we search for \"Jen\" and not \"Jen \"? Figure 3.3: Search for Jen. The same can be done using a while loop: &#39;&#39; Find cell with Jen using a While loop Sub TM3_FindJen2() Dim r As Integer r = 2 Do While InStr(Cells(r, 1), &quot;Jen &quot;) = 0 r = r + 1 Loop MsgBox &quot;Jen is a &quot; &amp; Cells(r, 2) &amp; &quot; (Row &quot; &amp; r &amp; &quot;)&quot; End Sub Beware of endless looping here. What happens if Jen is not present in column A? A more error safe while loop is: &#39;&#39; Find cell with Jen using a While loop and better stopping criteria Sub TM3_FindJen3() Dim r As Integer r = 2 Do While InStr(Cells(r, 1), &quot;Jen &quot;) = 0 And r &lt; 13 r = r + 1 Loop If (r = 13) Then MsgBox (&quot;Jen not found&quot;) Else MsgBox &quot;Jen is a &quot; &amp; Cells(r, 2) &amp; &quot; (Cell A&quot; &amp; r &amp; &quot;)&quot; End If End Sub 3.6 Example - A distance matrix Assume that you have a set of \\(n=10\\) locations: Table 2.1: A set of locations Location number \\(x\\)-coordinate \\(y\\)-coordinate 1 6 1 2 1 5 3 6 3 4 7 4 5 4 6 6 4 7 7 5 2 8 1 4 9 4 2 10 6 5 The euclidean distance \\(d\\) between location \\(l_1 = (x_1, y_1)\\) and \\(l_2 = (x_2, y_2)\\) are: \\[d(1,2)=\\sqrt{(x_1-x_2)^2 + (y_1-y_2)^2}.\\] In VBA the function becomes: &#39;&#39; Calculate distance between two points &#39; &#39; @param x1 x-coordinate of first point. &#39; @param y1 y-coordinate of first point. &#39; @param x2 x-coordinate of second point. &#39; @param y2 y-coordinate of second point. Private Function TM3_Distance(x1, y1, x2, y2) Dim x As Double Dim y As Double x = x1 - x2 y = y1 - y2 TM3_Distance = Sqr((x * x) + (y * y)) End Function Assume that you want to calculate the distance matrix \\(D\\) where entry \\((i,j)\\) contains the distance between location \\(i\\) and location \\(j\\). Consider the locations in columns B and C: Figure 3.4: Distance matrix worksheet. We want to fill out the cells F1:P11 with the distances. This have been done using procedure: &#39;&#39; Create a distance matrix starting in column 6 &#39; &#39; @pre Assume that coordinates are stored in column B and C starting from row 2 &#39; and that number of points are stored in E1. Public Sub TM3_MakeDistanceMatrix() Dim n As Integer Dim i As Integer Dim j As Integer n = Range(&quot;E1&quot;) For i = 1 To n &#39; add row and column headers Cells(i + 1, 6) = Cells(1 + i, 1) &#39; row equals i+1 Cells(1, 6 + i) = Cells(1 + i, 1) &#39; column equals i+6 Next &#39; add distances For i = 1 To n For j = 1 To n Cells(i + 1, j + 6) = TM3_Distance(Cells(i + 1, 2), Cells(i + 1, 3), Cells(j + 1, 2), Cells(j + 1, 3)) Next Next End Sub First, row and column headers are written to the cells. Next, we use a nested for loop to calculate the distances and output them to the cells. Note we in fact calculate the same distance two times (the distance from \\(i\\) to \\(j\\) equals the distance from \\(j\\) to \\(i\\)). Since we have symmetric distances there is no need to do this and it can be avoided by letting the inner loop in the nested loops be dependent on the outer loop: &#39;&#39; Create a symetric distance matrix with only the upper right part filled starting in column 6. &#39; &#39; @pre Assume that coordinates are stored in column B and C starting from row 2 &#39; and that number of points are stored in E1. Public Sub TM3_MakeSymetricDistanceMatrix() Dim n As Integer Dim i As Integer Dim j As Integer n = Range(&quot;E1&quot;) For i = 1 To n Cells(i + 1, 6) = Cells(1 + i, 1) Cells(1, 6 + i) = Cells(1 + i, 1) Next For i = 1 To n For j = i + 1 To n Cells(i + 1, j + 6) = TM3_Distance(Cells(i + 1, 2), Cells(i + 1, 3), Cells(j + 1, 2), Cells(j + 1, 3)) Next Next End Sub Figure 3.5: Distance matrix worksheet with symmetric distances. 3.7 Recap Loops are used to repeat pieces of code. For loops (repeat a number of times): For i = 1 To 10 &lt;code&gt; Next While loops (repeat until a condition is met): Do While &lt;condition&gt; &#39; repeat while true &lt;code&gt; Loop Use Exit for and Exit Do to break a For and a Do While loop before it ends (jump to the code after the loop). Loops may be nested inside each other: For i = 1 To 2 For j = 1 To 3 MsgBox (&quot;(&quot; &amp; i &amp; &quot;,&quot; &amp; j &amp; &quot;)&quot;) Next Next Conditional Statements are used to make decisions based on the conditions. If the condition is met then the code is executed. An if-then-else statement: If &lt;condition&gt; Then &lt;code&gt; ElseIf &lt;condition&gt; Then &lt;code&gt; Else &lt;code&gt; End If You may drop the ElseIf and Else code chunks. You may also have a look at the slides for this module . 3.8 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! A template with VBA code for this module is given in the file 03-vba-loops-cond-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM3_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM3_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. 3.8.1 Exercise - Loops Use the sheet TM3 for output. Create a for loop that writes numbers 1 to 4 in rows 25 to 28 in column A. Create a do while loop that writes numbers 1 to 4 in rows 25 to 28 in column B. Create a loop that writes numbers 1 to 4 in rows 27 to 30 in column C. Create a loop that writes numbers -1 to -4 in rows 25 to 28 in column D. Create a loop that writes numbers 1 to 4 in rows 28 to 31 in column E, except if the number is 3 then the output should to a string missing. Create a do while loop that writes numbers i = 1, 2, … in column G (starting in row 25) until i/5 + 3 = 8. Hint: you may use a Exit Do to quit the loop. Create a sub that runs all the loops. 3.8.2 Exercise - Conditional statements Consider worksheet TM3_Numbers, which contains a set of numbers. Create a procedure with the following features Make a copy of the numbers with the upper left cell starting G1. Scan all the numbers and remove (clear the cell) all the negative numbers (you may use a For Each loop). Highlight all the numbers above 20 (using e.g. rngC.Interior.ColorIndex = 37). Add a button to worksheet TM3_Numbers that run the procedure. Create a procedure with the following features: Scan the numbers and find the sum of all non-negative numbers, the mean of all negative numbers. Use a message box to display the sum and mean calculated. Add a button to worksheet TM3_Numbers that run the procedure. This exercise is a slightly modified version an exam assignment (reexam 2022-A5). "],["mod-vba-procedures.html", "Module 4 Procedures 4.1 Learning outcomes 4.2 Subs and functions - The basics 4.3 Optional arguments 4.4 Public and private procedures 4.5 Passing arguments by reference or by value 4.6 Built-in functions 4.7 Example - Selection of test persons 4.8 Recap 4.9 Exercises", " Module 4 Procedures This module gives a short introduction to procedures. A procedure is a piece of code stored in a module which contains a series of computational steps that will be carried out when the procedure is called. VBA has two kinds of procedures subs (short for subroutine) and functions. Both are basic building blocks in programming. The main differences between a sub and a function is: Subs Can make changes to the worksheet. Can modify its surroundings. Can be executed by a button (a macro - if no arguments). Cannot return anything. Functions Can return something. Can be used in Excel. Cannot be used as a macro. A template with VBA code for this module is given in the file 04-vba-procedures-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM4_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM4_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. During execution of procedures it may be useful to use the debugger to run the code step by step. A very short introduction to debugging in VBA is given in Section E.1. Read it before continuing this teaching module. Learning path diagram Click/hover the nodes to follow links and see details. 4.1 Learning outcomes By the end of this module, you are expected to be able to: Describe what a procedure is. Explain what kind of procedures there are in VBA and what they can be used for. Declare and call a procedure. Explain what the difference is by using input arguments by reference or by value in a procedure. Set the scope of a procedure using private or public procedures. Set default input arguments. Call built-in functions for VBA and Excel. The learning outcomes relate to the overall learning goals number 1, 2, 4, 8 and 9 of the course. 4.2 Subs and functions - The basics A sub is declared using: Sub SubName(arg1 As &lt;datatype&gt;, arg2 As &lt;datatype&gt;) &lt;code&gt; End Sub The name of the sub is SubName and it takes two arguments arg1 and arg2. A sub can take an arbitrary number of arguments. Until now we have mostly considered subs with no arguments often called a macro. Macros can be called using a button in Excel. A function is declared using: Function FunctionName(arg1 As &lt;datatype&gt;, arg2 As &lt;datatype&gt;) As &lt;return datatype&gt; &lt;code&gt; FunctionName = value &#39; assign a return value to the function End Sub The name of the function is FunctionName and it takes two arguments arg1 and arg2. A function can take an arbitrary number of arguments. A function always return a value of a data type (a sub do not return anything). You return a value by assigning it to the variable FunctionName (same as the function name). Let us consider a simple sub with one argument: Sub TM4_SimpleSub(str As String) MsgBox (str) End Sub and a simple function with two arguments: Function TM4_SimpleFunc(dblA As Double, dblB As Double) As Integer TM4_SimpleFunc = dblA + dblB &#39; return variable equals function name End Function You call a sub from another procedure using the Call keyword and a another function by assigning its return value to a variable: &#39; Try running it using the debugger (Ctrl + F8 (win) or cmd + shift + I (mac)) Sub TM4_CallSimpleProc() Dim dblV As Double MsgBox (&quot;Ready&quot;) Call TM4_SimpleSub(&quot;SimpleSub&quot;) &#39; call a sub within a procedure dblV = TM4_SimpleFunc(3, 4) &#39; call a function within a procedure MsgBox (&quot;Value is &quot; &amp; intV) End Sub It is always good coding practice to document you procedures: &#39;&#39; Product of two numbers &#39; @param i First number &#39; @param j Second number &#39; @return The product i * j &#39; @remarks The numbers are doubles. Function TM4_ProductFunc(i As Double, j As Double) As Double TM4_ProductFunc = i * j End Function &#39;&#39; Product of two numbers which are stored in dblV (since ByRef is the default). &#39; @param i First number &#39; @param j Second number &#39; @param dblV Stores the product &#39; @remarks The numbers are doubles. Private Sub TM4_ProductSub(i As Double, j As Double, dblV As Double) dblV = i * j End Sub Note both procedures above do the same thing. The function returns the product and the procedure stores the product in argument dblV which is modified when the function call is returned: &#39;&#39; Use TM4_ProductSub (TM4_ProductFunc produce the same result) &#39; Try running it using the debugger (Ctrl + F8 (win) or cmd + shift + I (mac)) Sub TM4_RunProductSub() Dim dblV As Double dblV = 4 MsgBox (&quot;Current value is &quot; &amp; dblV) &#39; Current value is 4 Call TM4_ProductSub(7, 3, dblV) &#39; dblV = TM4_ProductFunc(7, 3) (same result) MsgBox (&quot;Current value is &quot; &amp; dblV) &#39; Current value is 21 End Sub The reason is that arguments are per default references pointing to the same place in memory (we will look at the details in Section 4.5). You can use Exit Sub/Exit Function to exit the sub/function early in the code: &#39;&#39; Division of two numbers &#39; @param i First number. &#39; @param j Second number. &#39; @return Divison i / j. &#39; @remarks The numbers are doubles. Sub TM4_DivisionSub(i As Double, j As Double) If j = 0 Then MsgBox (&quot;Error: division with zero!&quot;) Exit Sub End If MsgBox (&quot;Value is &quot; &amp; i / j) End Sub &#39;&#39; Run using F5 Sub TM4_TestDivisionSub() Call TM4_DivisionSub(8, 2) &#39; no error Call TM4_DivisionSub(8, 0) &#39; gives an error message End Sub 4.3 Optional arguments Often you define procedures that have arguments with a default value. You can do this using the Optional keyword: &#39;&#39; Convert kilograms to grams or pounds &#39; @param dblKg Kilograms. &#39; @param blnToGrams Convert to grams (if true) otherwise to pounds. &#39; @return Converted value. Function TM4_ConvertKg(dblKg As Double, Optional blnToGrams As Boolean = True) If blnToGrams Then TM4_ConvertKg = dblKg * 1000 Exit Function End If TM4_ConvertKg = dblKg * 2.20462 End Function &#39;&#39; Run using F5 Sub TM4_TestConvertKg() MsgBox (TM4_ConvertKg(10)) &#39; use default value (to grams) MsgBox (TM4_ConvertKg(10, False)) &#39; to pounds End Sub Here we have one optional argument with default value equal to true. Now the function can be called with one argument (use the default value of the second argument) or with two arguments. Have a look at cells A8:C13 in worksheet TM4 (Figure 4.1) where we use the function to find convert to grams (TM4_ConvertKg(A8)) and pounds (TM4_ConvertKg(A8; FALSE)). Let us try to define a sub that format some cells (the content have been found using the macro recorder and then cleaned): &#39;&#39; Format a range &#39;@param rng Range to format. &#39;@param intInteriorColor Interior color index. &#39;@param intFontColor Font color index. &#39;@param intFontSize Font size. Sub TM4_FormatCell(rng As Range, Optional intInteriorColor As Integer = 0, _ Optional intFontColor As Integer = 44, Optional intFontSize As Integer = 12) rng.Interior.ColorIndex = intInteriorColor rng.Font.ColorIndex = intFontColor rng.Font.Size = intFontSize End Sub &#39;&#39; Run using F5 Sub TestingFormatCell() Dim rng As Range Worksheets(&quot;TM4&quot;).Activate Call FormatCell(Range(&quot;A16&quot;)) &#39; use default values Call FormatCell(Range(&quot;B16&quot;), 46) &#39; use background color index 46 Call FormatCell(Range(&quot;C16&quot;), , 21) &#39; set font color Call FormatCell(rng:=Range(&quot;D16&quot;), intFontSize:=16, intFontColor:=23) &#39; call sub using argument names explicit End Sub Observe that there is different ways to call a procedure with optional arguments. If you have may optional arguments it is best to use the last where you explicit state the argument names (here the order of the arguments do not matter either). Note that every argument following an optional argument in the procedure definition must also be optional. Moreover, if lines are to long you may split them using _ (underscore). In the example above we use the color index values in VBA (56 different ones). Let us have a look at them: &#39;&#39; Run using F5 Sub TM4_SeeColorIndex() Dim r As Integer Dim c As Integer Dim i As Integer Worksheets(&quot;TM4&quot;).Activate i = 1 For r = 18 To 40 For c = 2 To 5 Cells(r, c) = i Call TM4_FormatCell(rng:=Cells(r, c), intInteriorColor:=i, intFontColor:=1 + i Mod 4) If i = 56 Then Exit Sub End If i = i + 1 Next Next End Sub The output will be outputted from row 18 (column B-E): Figure 4.1: TM4 worksheet. 4.4 Public and private procedures You may use the keyword Private or Public (default) when you define a procedure. For instance: Private Sub SubName(arg1 As &lt;datatype&gt;, arg2 As &lt;datatype&gt;) &lt;code&gt; End Sub A private procedure can only be used by other procedures in the module. This may be useful if you want to define ‘internal’ procedures that you only want to use in the module. This also imply that a private sub can not be called from a button and a private function can not be called from a cell. Note the default value is Public. That is, if Private or Public is excluded, VBA will always treat the sub as if it were Public: Sub SubName(arg1 As &lt;datatype&gt;, arg2 As &lt;datatype&gt;) &#39; VBA assumes it is public (the default) &lt;code&gt; End Sub Public Sub SubName(arg1 As &lt;datatype&gt;, arg2 As &lt;datatype&gt;) &#39; same result as above &lt;code&gt; End Sub 4.5 Passing arguments by reference or by value There are two ways of passing arguments to procedures: Sub SubName(ByRef arg1 As &lt;datatype&gt;, ByVal arg2 As &lt;datatype&gt;) &lt;code&gt; End Sub Argument arg1 is passed by reference (default). That is, no new memory is allocated when the procedure is called and as a result the procedure can have changed the value of arg1 when the procedure stops. Note since the default, the result is the same if we omitted the keyword ByRef. Argument arg2 is passed by value. That is, a copy of the variable is created in memory. Hence the procedure cannot change the value of arg2 when the procedure stops (the copy is deleted). Using ByRef is faster and saves memory since we do not have to allocate new memory. We may use ByRef to return updated values of the input arguments (sub TM4_ProductSub did that). In fact you may have multiple arguments which when the sub finished have been modified. See it as the arguments have been modified with the result of the sub. Using ByVal is safer if you want be sure that the argument is not modified inside the procedure. Try guessing the result of running sub TM4_TestingBy: Private Function TM4_ByVal(ByVal i As Integer) As Integer i = i * 2 MsgBox (&quot;In ByVal i is &quot; &amp; i) TM4_ByVal = i * 5 End Function &#39;&#39; Note &quot;Function TM4_ByRef(i As Integer) As Integer&quot; gives same result Private Function TM4_ByRef(ByRef i As Integer) As Integer i = i * 2 MsgBox (&quot;In ByRef i is &quot; &amp; i) TM4_ByRef = i * 5 End Function &#39; Try running it using F5 or the debugger (Ctrl + F8 (win) or cmd + shift + I (mac)) Private Sub TM4_TestBy() Dim n As Integer Dim i As Integer i = 5 MsgBox (&quot;In the start i is &quot; &amp; i) n = TM4_ByVal(i) MsgBox (&quot;Try gussing the values of n and i&quot;) MsgBox (&quot;After TM4_ByVal i is &quot; &amp; i &amp; &quot; and &quot; &amp; n &amp; &quot; is returned.&quot;) n = TM4_ByRef(i) MsgBox (&quot;Try gussing the values of n and i&quot;) MsgBox (&quot;After TM4_ByRef i is &quot; &amp; i &amp; &quot; and &quot; &amp; n &amp; &quot; is returned.&quot;) End Sub 4.5.1 Return values from a sub Since ByRef does not create a new copy of the argument in memory. We can return multiple values from a sub by Pass arguments (variables) by reference in the sub. Modify the variables inside the sub. When the sub returns after it has been called the variables used a arguments contain the new updated values. See e.g TM4_ProductSub which returns the product in variable dblV. 4.6 Built-in functions VBA has a set of built-in functions such as Abs, Log and Date. You call them by just writing their name: &#39;&#39; Test VBA functions &#39; You can always get help by putting the crusor in the function name and press F1 Sub TM4_TestVBAfunctions() MsgBox (&quot;Absolute value: &quot; &amp; Abs(-4.2)) MsgBox (&quot;Integer part: &quot; &amp; Fix(-4.2)) MsgBox (&quot;Floor of the number: &quot; &amp; Int(-4.2)) MsgBox (&quot;Natural logarithm: &quot; &amp; Log(16)) MsgBox (&quot;Random number [0,1[: &quot; &amp; Rnd()) MsgBox (&quot;Current date: &quot; &amp; Date) MsgBox (&quot;Days from now: &quot; &amp; DateDiff(&quot;d&quot;, Date, DateValue(&quot;October, 28, 2022&quot;))) End Sub You can also use the worksheet functions in Excel. You call them using the WorksheetFunction object. A few examples: &#39;&#39; Test worksheetfunctions &#39; You can always get help by putting the crusor in the function name and press F1 Sub TM4_TestWorksheetfunctions() Dim r As Integer Dim c As Integer Worksheets(&quot;TM4&quot;).Activate MsgBox (&quot;Numbers above 80: &quot; &amp; WorksheetFunction.CountIf(Range(&quot;B33:E38&quot;), &quot;&gt;80&quot;)) &#39; count numbers above MsgBox (&quot;Sumproduct: &quot; &amp; WorksheetFunction.SumProduct(Range(&quot;B33:E33&quot;), Range(&quot;B34:E34&quot;))) MsgBox (&quot;Max: &quot; &amp; WorksheetFunction.Max(Range(&quot;B33:E38&quot;))) For r = 40 To 45 For c = 2 To 4 Cells(r, c) = WorksheetFunction.RandBetween(0, 9) Next Next End Sub 4.7 Example - Selection of test persons This example is a slightly modified version an exam assignment (exam 2021-A6). A virus has infected a number of persons. A possible cure has been developed, but the effect of it is expected to be dependent on the persons’ height. The cure can be tested on non-infected persons and the findings of this test can be directly transferred to any infected person whose height is within a range of 2 cm from the height of the tested person. For example, if the cure is tested on a non-infected person of height \\(172.2\\), then any infected person whose height is in the interval \\([170.2 ; 174.2]\\) is covered by the test. Figure 4.2: Infected and test persons. Figure 4.2 shows the data in worksheet TM4_Virus: Cell D1 states the number of infected persons. Columns A and B provide the person’s ID and height for each person. Cell D2 states the number of non-infected persons volunteering to be test persons. Columns F and G provide their ID and height. The testing process is extremely resource demanding, and thus it is only possible to test a limited number of test volunteers. This number is stated in cell D3. Given a test person we make a function TM4_TestCover that takes person id as argument and return the number of new infected persons covered. A person is already covered, if that person has a 1 in the Covered column. Function TM4_TestCover(intId As Integer) As Integer Dim intI As Integer &#39; number of infected Dim intC As Integer &#39; number of covered Dim dblHeight As Double &#39; height of test person Dim r As Integer intI = Range(&quot;D1&quot;) dblHeight = Range(&quot;G&quot; &amp; intId + 6) intC = 0 For r = 7 To intI + 6 &#39; loop through all infected If Cells(r, 2) &gt;= dblHeight - 2 And Cells(r, 2) &lt;= dblHeight + 2 And Cells(r, 3) &lt;&gt; 1 Then intC = intC + 1 End If Next TM4_TestCover = intC End Function First, note that given a test person id, the height is found in row id + 6 and column G. Next, we use the counter intC to count new covered persons. This result is returned by the function. To find the right test persons the following greedy strategy is used: Step 1: Select the test person (not already selected) that can cover most new infected persons (not yet covered). If more than one test person have the same cover, select the one with the smallest ID. Step 2: Add ones to the Covered column for all infected persons covered by the test person. Step 3: Go to Step 1 until found the test persons needed. We implement the the greedy strategy: Sub TM4_FindTestPersons() Dim intI As Integer &#39; number of infected Dim intT As Integer &#39; number of test volunteers Dim intS As Integer &#39; number of selected persons Dim intC As Integer &#39; number of covered Dim intBestId As Integer &#39; best id found Dim intBestC As Integer &#39; best cover value found Dim r As Integer Worksheets(&quot;TM4_Virus&quot;).Activate intI = Range(&quot;D1&quot;) intT = Range(&quot;D2&quot;) intS = 0 &#39; no selected yet Do While intS &lt; Range(&quot;D3&quot;) &#39; stop when have found needed test persons intBestId = -1 intBestC = -1 For r = 7 To intT + 6 &#39; loop through all test volunteers If Cells(r, 8) &lt;&gt; 1 Then &#39; not selected already intC = TM4_TestCover(Cells(r, 6)) If intBestC &lt; intC Then &#39; found a better person intBestC = intC intBestId = Cells(r, 6) End If End If Next Cells(intBestId + 6, 8) = 1 &#39; select best For r = 7 To intI + 6 &#39; add ones in covered column If Abs(Cells(r, 2) - Cells(intBestId + 6, 7)) &lt;= 2 Then Cells(r, 3) = 1 End If Next intS = intS + 1 Loop End Sub First, the number of persons are stored in variables. Next, a Do While loop is used to find the test persons. We use two variables to store the best id and cover value. The first inner for loop scan the test persons and for each person (not yet selected) we find the cover (using TM4_TestCover), check if better than current and update. The second inner for loop add ones to the Covered column. The output is given in Figure 4.3. Figure 4.3: Infected and test persons. In total 13 infected persons are covered by 3 test persons. 4.8 Recap A procedure is a piece of code stored in a module. A procedure contains a series of computational steps that will be carried out when the procedure is called. VBA has two kinds of procedures: Subs: Can make changes to the worksheet. Can modify its surroundings. Can be executed by a button (if no arguments). Cannot return anything. Functions: Can return something. Can be used in Excel. Cannot be used as a macro. You declare a procedure using Sub SubName(arg1 As &lt;datatype&gt;, arg2 As &lt;datatype&gt;) &lt;code&gt; End Sub Function FunctionName(arg1 As &lt;datatype&gt;, arg2 As &lt;datatype&gt;) As &lt;return datatype&gt; &lt;code&gt; FunctionName = value &#39; assign a return value to the function End Sub You can use Exit Sub/Exit Function to exit the sub/function early in the code. Procedures can be either public or private: Public (default): Can be used from other modules, from other files and from Excel. Public Sub SubName() ... End Sub Private: Can only be used from within its own module. Private Sub SubName() ... End Sub Use the Call keyword to call a sub: Call SubName(arg1, arg2) Call a function by assigning its return value to a variable result = FunctionName(arg1, arg2) There are two ways of passing arguments to procedures: Sub SubName(ByRef arg1 As &lt;datatype&gt;, ByVal arg2 As &lt;datatype&gt;) &lt;code&gt; End Sub Argument arg1 is passed by reference (default). That is, no new memory is allocated when the procedure is called and hence the procedure can have changed the value of arg1 when the procedure stops. Since the default is ByRef, the result is the same if we omitted the keyword ByRef. Argument arg2 is passed by value. That is, a copy of the variable is created in memory with local scope. Hence the procedure cannot change the value of arg2 when the procedure stops (the local variables is deleted). Using ByRef is faster and saves memory since we do not have to allocate new memory. We may use ByRef to return updated values of the input arguments. Use the Optional keyword to indicate default input arguments: Sub SubName(arg1 As &lt;datatype&gt;, Optional arg2 As &lt;datatype&gt; = &lt;defaultValue&gt;) You can now call the procedure using: Call SubName(arg1) &#39; assume that arg2 = defaultValue Every parameter following an optional parameter in the procedure definition must also be optional. VBA has a set of built-in functions such as Abs, Log and Date. You call them by just writing their name: dtm as Date dtm = Date() You can also use the worksheet functions in Excel. You call them using the WorksheetFunction object: sum = WorksheetFunction.Sum(Range(&quot;A1:D5&quot;)) You may also have a look at the slides for this module . 4.9 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! A template with VBA code for this module is given in the file 04-vba-procedures-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM4_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM4_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. 4.9.1 Exercise - Subs Create a sub GetMsg that takes a string and a Boolean as input and create a message box with the string content if the Boolean is true. Test the procedure using the TestGetMsg sub. Modify the procedure so the Boolean have a default value equal to true. Create a sub PrintNameAge that takes two arguments as input (name and age) and create a message box with the persons name and age. Write a sub TestPrintNameAge that uses two input boxes to ask for name and age and then call sub PrintNameAge. 4.9.2 Exercise - Temperatures This exercise is a slightly modified version an exam assignment (reexam 2022-A4). Temperatures in Fahrenheit can be converted to Celsius using \\[C = \\frac{5(F-32)}{9}\\] Similar temperatures in Celsius can be converted to Fahrenheit using \\[F = \\frac{9C}{5} + 32\\] Make functions: TM4_CelsiusToFahrenheit that takes a double dblVal in Celsius as input argument and returns the number converted to Fahrenheit. TM4_FahrenheitToCelsius that takes a double dblVal in Fahrenheit as input argument and returns the number converted to Celsius. Make a function TM4_ConvertTemp with the following features: Input arguments are a double dblVal and a string strIUnit. If the input unit strIUnit equals “c” then the returned number is converted to Fahrenheit. If the input unit strIUnit equals “f” then the returned number is converted to Celsius. If the input unit strIUnit does not equals “f” or “c” then a message box is given with an error. Test function TM4_ConvertTemp on worksheet TM4 (row 66). 4.9.3 Exercise - Functions Write a function TM4_Discount which takes a two input arguments (doubles): the discount percentage and the amount. The function returns the discounted value. For instance if the discount is 10 percent and amount 100 then the discounted value is \\(90 = 100\\cdot(1-0.1)\\). Have a look at the unfinished sub TM4_Discount for hints. Note the comments describing the function using the coding convention. Check the test results starting from row 47 in worksheet TM4. Write a function Larger which takes two integer arguments and returns true if the first is larger than the last; otherwise false. Check the test results starting from row 53 in worksheet TM4. Write a function NumbDays that takes a date as argument and return the number of days from today. Hint: Have a look at the DateDiff function. Check the test results starting from row 59 in worksheet TM4. Write a sub that uses an input box to ask for an amount a then returns the discounted amount when the discount is 20%. The sub should use the function in Question 1. Test it using the button in worksheet TM4 (row 49). 4.9.4 Exercise - Worksheet functions The worksheet TM4_Numbers contains a button that runs a procedure which generate a set of numbers. Create a procedure TM4_Summary that uses worksheet functions to: Find the maximum number and write it to cell D1. Find the minimum number and write it to cell D2. Find the sum of the numbers and write it to cell D3. Count the number of positives and write it to cell D4. Find the row number with maximum value and write it to cell D5. Google is a good place to start if you want to find a specific Excel function, e.g. try to search ‘excel row with max value’. Test the procedure using the Summary button in worksheet TM4_Numbers. "],["mod-vba-datatypes.html", "Module 5 Advanced data types and usage 5.1 Learning outcomes 5.2 Strings 5.3 Objects 5.4 The Worksheet object 5.5 The Range object 5.6 Arrays 5.7 Collections 5.8 Example - Job sequencing 5.9 Recap 5.10 Exercises", " Module 5 Advanced data types and usage Recall that variables are used to store information that is saved in memory. A variable may store different data types. Until now we have mostly considered basic data types such as an integer, a double or a string. In this module a short introduction to some of the more advanced data types is given such as a group of integers (an array), a range of cells in a worksheet (a range object) or a set of numbers (a collection). A template with VBA code for this module is given in the file 05-vba-datatypes-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM5_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM5_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. Learning path diagram Click/hover the nodes to follow links and see details. If you like a different learning style there is a lot for videos about VBA online such as course 14-Hour VBA Course. The videos have been pointed out as extra online supplements in the learning path diagram. However, they are not necessary for the course. Since Excel change as new versions arrive and it work on different operating systems, the look in the screenshots and videos might be a bit different from your version. However, you still should be able to understand it. 5.1 Learning outcomes By the end of this module, you are expected to be able to: Name different data types and how they effect memory size. Declare a variable as a data type. Declare and manipulate strings. Describe what the object is. Declare and set an object. Manipulate worksheets (add, delete, clear). Understand what a range is and extract info about it such as rows, start row, address, start column etc. Use the current region of a range to get information about the size for data. Sort, paste and modify a range. Declare and use an array with both fixed and dynamic dimension. Sort, read and modify an array. Explain why using arrays is often better than ranges. Declare and use a collection. Explain what a collection of objects are. Use a For Each loop to iterate though a collection of objects. The learning outcomes relate to the overall learning goals number 1, 2, 4, 8 and 9 of the course. 5.2 Strings Strings contain a group of characters (an empty string is of length zero). Memory requirements vary with the length of the string (10 bytes + length \\(\\cdot\\) 2 byte). We use the symbol &amp; to concatenate strings (glue strings together): &#39;&#39; Concatenate two strings Sub TM5_StrConcat() Dim strX As String Dim strY As String Dim strRes As String strX = &quot;VBA&quot; strY = &quot;Strings&quot; strRes = strX &amp; &quot; &quot; &amp; strY MsgBox (strRes) MsgBox (strX &amp; vbCr &amp; strY) &#39; use vbCr to insert a new line End Sub Note you can use constant vbCr to add a new line. There are many VBA functions that can be used to manipulate strings. Some examples: &#39;&#39; String functions Sub TM5_StrFunc() Dim str As String str = &quot;VBA Strings&quot; MsgBox (&quot;The length is: &quot; &amp; Len(str)) MsgBox (&quot;In lowercase: &quot; &amp; LCase(str)) MsgBox (&quot;Last 7 char: &quot; &amp; Right(str, 7)) MsgBox (&quot;Replace: &quot; &amp; Replace(str, &quot;Strings&quot;, &quot;Rules&quot;)) MsgBox (&quot;Compare: &quot; &amp; StrComp(str, &quot;VBA Strings&quot;)) &#39; result is 0 (equal) MsgBox (&quot;Compare: &quot; &amp; StrComp(str, &quot;Apple&quot;)) &#39; result is 1 (str alfabetically after) MsgBox (&quot;Compare: &quot; &amp; StrComp(str, &quot;Wait&quot;)) &#39; result is -1 (str alfabetically before) MsgBox (&quot;String is starting at char number: &quot; &amp; InStr(str, &quot;String&quot;)) &#39; result is 0 if not found End Sub 5.3 Objects VBA have a lot of predefined objects you can use. Think of an object as a datatype that holds a group of variables. Examples of some objects are Range, Worksheet, and WorksheetFunction. Objects are grouped, nested and you refer to an object by specifying the path, e.g.: Workbooks(&quot;Jobs.xlsm&quot;).Worksheets(&quot;Data values&quot;).Range(&quot;D4&quot;).value Here we refer to the value in cell D4 in worksheet Data values in the file Jobs.xlsm. You may skip parts of the path (VBA then uses the current active one): Workbooks(&quot;Jobs.xlsm&quot;).Worksheets(&quot;Data values&quot;).Range(&quot;D4&quot;).value &#39; full specification Worksheets(&quot;Data values&quot;).Range(&quot;D4&quot;).value &#39; same result if Excel file &quot;Jobs.xlsm&quot; is active Range(&quot;D4&quot;) &#39; same result if Excel sheet &quot;Data values&quot; is active and &quot;Jobs.xlsm&quot; file Note .value has been dropped in the last line because it is the default, i.e. you do not have to write it explicit. Object variables are declared like any other variables: Dim rng As Range Dim wst As Worksheet Use Set to allocate the Object: Set rng = Range(&quot;F7&quot;) Set wst = Worksheets(&quot;Data values&quot;) Now rng is a reference to cell F7 and wst is a reference to worksheet Data values. Think of a reference as a value that identify where in memory the object is. In the next sections let us have a look at some relevant objects. 5.4 The Worksheet object The Worksheet object refer to a worksheet in the Excel file and you can use it to e.g. modify cells: Sub TM5_TestWorksheet() ThisWorkbook.Activate &#39; activate this workbook Worksheets(&quot;TM5_Test1&quot;).Range(&quot;B2&quot;) = &quot;Testing Worksheet&quot; &#39; write to cell in sheet TM5_Test1 Sheet_TM5_Test1.Range(&quot;B3&quot;) = &quot;Use the sheets code name&quot; &#39; use the code name (also work if sheet renamed) &#39;ThisWorkbook.Worksheets(&quot;Test3&quot;).Range(&quot;B5&quot;) = &quot;Test&quot; &#39; Error since there is no sheet Test3 in this workbook Range(&quot;B4&quot;) = &quot;Do you know which sheet is active?&quot; &#39; Active sheet &#39; Good coding pratice is always to specify the full path (as above) or make the sheet under considration active Worksheets(&quot;TM5_Test1&quot;).Activate &#39; Make sheet active so know where is Range(&quot;B5&quot;) = &quot;I know which sheet is active!&quot; End Sub It is always good practice to make sure that you are working with the correct Excel file. Otherwise you will get errors if another file is active. This can be done using the ThisWorkbook object. Similar you either refer to a worksheet directly using its name or its code name. The code name can be set in the Properties window in the VBA editor. An alternative is to activate the worksheet. You can use Worksheet variables: Sub TM5_TestWorksheetVar() Dim wst1 As Worksheet &#39; define a variable which hold a reference to a Worksheet object Dim wst2 As Worksheet &#39; define a variable which hold a reference to a Worksheet object Dim rng As Range Set wst1 = ThisWorkbook.Worksheets(&quot;TM5_Test1&quot;) &#39; set the reference Set wst2 = ThisWorkbook.Worksheets(&quot;TM5_Test2&quot;) &#39; set the reference wst1.Range(&quot;B6&quot;) = &quot;Writing using wst1&quot; wst2.Range(&quot;B2&quot;) = &quot;Writing using wst2&quot; wst1.Activate &#39; just to have a look End Sub Here by having two worksheet variables we can write directly to cells in different worksheets without activating the worksheet. You may check if a worksheet exists using: &#39;&#39; Check if a worksheet exists &#39; @param strName Name of worksheet. &#39; @return True if exists. Function WstExists(strName As String) As Boolean WstExists = Evaluate(&quot;ISREF(&#39;&quot; &amp; strName &amp; &quot;&#39;!A1)&quot;) End Function The worksheet object has a lot of methods/properties (think of methods as procedures defined inside the object) for instance wst.Add and wst.Delete. Let us try to define a function that delete a worksheet: &#39;&#39; Delete a worksheet if it exists &#39; @param strName Name of worksheet. &#39; @return True if deleted. &#39; @author Lars Relund &lt;lars@relund.dk&gt; Function WstDelete(strName As String) As Boolean Dim wst As Worksheet Dim bln As Boolean bln = Application.DisplayAlerts Application.DisplayAlerts = False &#39; no &quot;really want to delete&quot; alert If WstExists(strName) Then Worksheets(strName).Delete WstDelete = True Else WstDelete = False End If Application.DisplayAlerts = bln &#39; restore value End Function We first use the function WstExists to check if there is a worksheet. If there is, we call the .delete method and delete the worksheet. Note since we do not want an alert stating if we really want to delete the worksheet this is disabled using the Application object. The function returns true if the worksheet has been deleted. Let us try to define a function that create a worksheet: &#39;&#39; Create a worksheet &#39; @param strName Name of worksheet. &#39; @param blnForce Force deletion of worksheet if exists. &#39; @return True if created. Function WstCreate(strName As String, Optional blnForce As Boolean = False) As Boolean Dim wst As Worksheet If blnForce And WstExists(strName) Then Call WstDelete(strName) If Not WstExists(strName) Then Set wst = Worksheets.Add wst.Name = strName WstCreate = True Else WstCreate = False End If End Function We use an optional argument to force deletion of the old worksheet (if a worksheet with the same name). Next, we create the worksheet using the .Add method and rename it using the .Name method. The function returns true if the worksheet has been created. Finally, let us create a function that clear a worksheet: &#39;&#39; Clear a worksheet if it exists &#39; @param strName Name of worksheet. &#39; @param blnCells Delete cell contents, formats, comments, etc. (default). &#39; @param blnContents Delete cell contents. &#39; @param blnFormat Delete cell format. &#39; @param blnObjects Delete cell buttons and charts. &#39; @return True if cleared. Function WstClear(strName As String, _ Optional blnCells As Boolean = True, _ Optional blnContents As Boolean = False, _ Optional blnFormat As Boolean = False, _ Optional blnObjects As Boolean = False) As Boolean Dim wst As Worksheet On Error Resume Next If WstExists(strName) Then Set wst = Worksheets(strName) If blnCells Then wst.UsedRange.Clear If blnContents Then wst.Cells.ClearContents If blnFormat Then wst.Cells.ClearFormats If blnObjects Then wst.ChartObjects.Delete wst.Buttons.Delete End If WstClear = True Else WstClear = False End If End Function First note that we have a lot of optional arguments depending on what we want to clear. Next the On Error Resume Next statement is used to make the program not stop even if an error happens. Finally, depending on the setting of the optional arguments we e.g. clear the format in all cells if blnFormat is true. All the functions above is part of the course procedures that you may use ‘as is’ during the course and at the exam. I will explicitly state if you are not allowed to use them otherwise. All the worksheet procedures start with Wst so you easy can find them using auto complete in the VBA editor. All worksheet procedures are stored in the ModWst module. You may open the module to have a look at the procedures. Let us see them in action: &#39;&#39; Test the worksheet functions Sub TM5_TestWorksheetFunc() If WstCreate(&quot;Test&quot;, blnForce:=True) Then MsgBox (&quot;Created Test&quot;) If WstRename(&quot;Test&quot;, &quot;Test1&quot;) Then MsgBox (&quot;Renamed the Test to Test1&quot;) &#39; only work if no Test1 sheet If WstClear(&quot;Test8&quot;) Then MsgBox (&quot;Cleared Test8&quot;) &#39; no clearing since on sheet with that name If WstDelete(&quot;Test1&quot;) Then MsgBox (&quot;Deleted Test1&quot;) End Sub 5.5 The Range object Ranges are objects that refer to parts of a worksheet e.g. a cell, a row, a column, or a rectangular selection of cells. Ranges can be used to read and write to cells Sub TM5_RangeEx1() Dim rng As Range Dim cell As Range Dim i As Integer Call TM5_ClearTestTM5 &#39; clear test cells so have empty cells ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate &#39; Modify a range to a fixed value Set rng = Range(&quot;G4:I6&quot;) rng = 145 &#39; cell value in rng MsgBox rng.Address &#39; range address &#39; Use for each to scan range (direction left-down) Set rng = Range(&quot;G8:I10&quot;) i = 1 For Each cell In rng cell = &quot;Entry &quot; &amp; i i = i + 1 Next &#39; Use Cells to set a range Set rng = Range(Cells(23, 3), Cells(25, 6)) MsgBox rng.Address End Sub The method .Address is used to return the cell address. Figure 5.1: TM5 worksheet. Similar the number of rows can by found using .rows.Count: &#39;&#39; Rows in range &#39; @param rng A range. Function RngGetRows(rng As Range) As Long RngGetRows = rng.rows.Count End Function We can also find number of columns, address of upper left cell or lower right cell etc. In the course procedures (module ModRng) all these have been defined. Let us try to use them: Sub TM5_RangeEx2() Dim rng As Range Set rng = ThisWorkbook.Worksheets(&quot;TM5&quot;).Range(&quot;C4:E19&quot;) MsgBox (&quot;Number of rows: &quot; &amp; RngGetRows(rng)) MsgBox (&quot;Number of cols: &quot; &amp; RngGetCols(rng)) MsgBox (&quot;First column number: &quot; &amp; RngGetFirstCol(rng)) MsgBox (&quot;First column letter: &quot; &amp; RngGetFirstCol(rng, asLetter:=True)) MsgBox (&quot;Lower right cell: &quot; &amp; RngGetLowerRight(rng, asString:=True)) MsgBox (&quot;Upper right cell: &quot; &amp; RngGetUpperRight(rng, asString:=True)) End Sub 5.5.1 Current region of a range An important method is the current region .CurrentRegion which expands the range until all cells surrounding the range is empty. This is very useful if don’t know the size for data. Let us make a function that return the current region: &#39;&#39; Return the current region of a range. &#39; @param rng The range to get the current region from. Function RngCurRegion(rng As Range) As Range Set RngCurRegion = rng.CurrentRegion End Function Note we have to use the Set keyword since the return value is a range (object). We can now test the course procedures starting with prefix RngGet: Sub TM5_CurrentRegionEx1() Dim rng As Range ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate &#39; Try to guess the output Set rng = RngCurRegion(Range(&quot;D7&quot;)) &#39; rng now is the current region MsgBox (&quot;Address: &quot; &amp; RngGetAddress(rng)) MsgBox (&quot;Rows = &quot; &amp; RngGetRows(rng) &amp; &quot; cols = &quot; &amp; RngGetCols(rng)) MsgBox (&quot;First row number = &quot; &amp; RngGetFirstRow(rng) &amp; &quot;. Last row number = &quot; &amp; RngGetLastRow(rng) &amp; &quot;.&quot;) MsgBox (&quot;First col number = &quot; &amp; RngGetFirstCol(rng) &amp; &quot;. Last col number = &quot; &amp; RngGetLastCol(rng) &amp; &quot;.&quot;) MsgBox (&quot;First col letter = &quot; &amp; RngGetFirstCol(rng, True) &amp; &quot;. Last col letter = &quot; &amp; RngGetLastCol(rng, True) &amp; &quot;.&quot;) &#39; Try to guess the output Set rng = RngCurRegion(Range(&quot;C23&quot;)) &#39; assume we know that data contains cell C23 MsgBox (&quot;Address: &quot; &amp; RngGetAddress(rng)) End Sub The same result can be obtained using the course procedures starting with RngGetCurRegion: Sub TM5_CurrentRegionEx2() Dim rng As Range ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate &#39; Try to guess the output Set rng = Range(&quot;D7&quot;) &#39; assume we know that data contains cell D7 MsgBox (&quot;Address: &quot; &amp; RngGetCurRegionAddress(rng)) MsgBox (&quot;Rows = &quot; &amp; RngGetCurRegionRows(rng) &amp; &quot; cols = &quot; &amp; RngGetCurRegionCols(rng)) MsgBox (&quot;First row number = &quot; &amp; RngGetCurRegionFirstRow(rng) &amp; &quot;. Last row number = &quot; &amp; RngGetCurRegionLastRow(rng) &amp; &quot;.&quot;) MsgBox (&quot;First col number = &quot; &amp; RngGetCurRegionFirstCol(rng) &amp; &quot;. Last col number = &quot; &amp; RngGetCurRegionLastCol(rng) &amp; &quot;.&quot;) MsgBox (&quot;First col letter = &quot; &amp; RngGetCurRegionFirstCol(rng, True) &amp; &quot;. Last col letter = &quot; &amp; RngGetCurRegionLastCol(rng, True) &amp; &quot;.&quot;) Set rng = Range(&quot;C23&quot;) &#39; assume we know that data contains cell C23 MsgBox (&quot;Address: &quot; &amp; RngGetCurRegionAddress(rng)) End Sub Note the difference in how rng is defined. 5.5.2 Input and output You can read/write and copy/paste values to a range using the course procedures: Sub TM5_RangeEx3() Dim rng As Range Dim rngNew As Range Set rng = RngCurRegion(Range(&quot;D7&quot;)) &#39; get current region MsgBox (&quot;Copy to H14 (upper left corner).&quot;) Set rngNew = RngPaste(rng, Range(&quot;H14&quot;)) &#39; rngNew is now the new range MsgBox (&quot;Make yellow.&quot;) Call RngFormat(rngNew, &quot;yellow&quot;) MsgBox (&quot;Remove format.&quot;) Call RngClear(rngNew, blnCells:=False, blnFormat:=True) MsgBox (&quot;Clear range.&quot;) Call RngClear(rngNew) End Sub Here RngPaste is used to copy a range and paste it to another range. Note you may use RngFormat to format cells of a range. Moreover, you can read/write values from/to a csv file. A comma-separated values (csv) file is a delimited text file that uses a delimiter to separate values. Each line of the file is a data record. Each record consists of one or more fields, separated by the delimiter. The file format is not fully standardized, i.e. the delimiter may be a semicolon, a colon or another delimiter. Moreover, a field may be surrounded with quotation marks. Let us have a look at a csv file data1.csv with a header using a semicolon as delimiter: Year;Brand;Model 1997;Ford;E350 2000;Mercury;Cougar and the csv file data2.csv without a header using a semicolon as delimiter: 55,18,34,1,81,26,90,11,46,32,93 49,95,73,82,53,40,99,10,52,38,92 59,90,97,100,59,73,88,33,78,61,24 96,84,32,36,94,82,49,94,48,49,1 59,21,24,57,3,78,54,79,57,42,8 Let us try to read the two files: Sub TM5_RngFromCSVEx() Dim rng As Range ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39; clear test cells so have empty cells &#39;&#39; Read data1.csv file (NOTE you must know the separator in the csv file beforehand!) Range(&quot;G3&quot;) = &quot;Content of data1.csv:&quot; Set rng = RngFromCSV(&quot;data1.csv&quot;, Range(&quot;G4&quot;), &quot;;&quot;) &#39; paste file in range with upper left cell G4 MsgBox (RngGetAddress(rng)) &#39;&#39; Read data2.csv file (NOTE you must know the separator in the csv file beforehand!) Range(&quot;G8&quot;) = &quot;Content of data2.csv:&quot; Set rng = RngFromCSV(&quot;data2.csv&quot;, Range(&quot;G9&quot;), &quot;,&quot;) &#39; paste file in range with upper left cell G9 MsgBox (RngGetAddress(rng)) End Sub Here we use the course procedure RngFromCSV to read the file and specify the upper left corner cell of where to paste. Note the function returns the pasted range. You can write the content of a range to a csv file using: Sub TM5_RngToCSVEx() Dim rng As Range ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39; clear test cells so have empty cells &#39;&#39; Write to csv file Set rng = Range(&quot;C4:E19&quot;) Call RngToCSV(&quot;test.csv&quot;, rng, &quot;;&quot;) &#39; semicolon (;) separated file &#39;&#39; Read test.csv file to check Range(&quot;G3&quot;) = &quot;Content of test.csv:&quot; Set rng = RngFromCSV(&quot;test.csv&quot;, Range(&quot;G4&quot;), &quot;;&quot;) End Sub Here we use the course procedure RngToCSV to write the range to the file. Note you can specify different delimiters (here we use a semicolon). 5.5.3 Sorting a range Ranges can be sorted using the .Sort method: Sub TM5_SortRangeEx() Dim rng As Range Dim rngCur As Range ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39; clear test cells so have empty cells Set rng = RngCurRegion(Range(&quot;C4&quot;)) &#39;&#39; Sort based on second column ascending Set rngCur = RngPaste(rng, Range(&quot;G4&quot;), withFormat:=True) &#39; make a copy to work with Call rngCur.Sort(Key1:=rngCur.Columns(2), Header:=xlYes) rngCur(1).Offset(-1, 0) = &quot;Sort 2. column&quot; &#39; offset first cell in range by -1 row and 0 col &#39;&#39; Sort based on second column and afterwards 3. column (descending) Set rngCur = RngPaste(rng, Range(&quot;K4&quot;), True) Call rngCur.Sort(Key1:=rngCur.Columns(2), Header:=xlYes, Key2:=rngCur.Columns(3), Order2:=xlDescending) rngCur(1).Offset(-1, 0) = &quot;Sort 2. and next 3. column&quot; End Sub We use the Key arguments to identify which columns we want to sort and the Header argument to identify if the first row in the range is a header. Finally the ordering is given using the Order argument (either xlAscending (default) or xlDescending). 5.6 Arrays Arrays are used to store groups of variables of a specific datatype: &#39;&#39; Define an array (run using the debugger - step into) &#39; How to check the content of an array? &#39; Use the Locals window together with debug mode or a message box Sub TM5_ArrayEx1() Dim intAry(4) As Integer &#39; define array with index 0-4 Dim strAry(3 To 5) As String &#39; define array with index 3-5 Dim i As Integer &#39; Set values intAry(0) = 9 intAry(1) = 12 intAry(2) = 222 intAry(3) = 4 intAry(4) = 100 &#39; Information about the array MsgBox (&quot;Lowest index: &quot; &amp; LBound(intAry)) MsgBox (&quot;Largest index: &quot; &amp; UBound(intAry)) MsgBox (&quot;Number of elements: &quot; &amp; UBound(intAry) - LBound(intAry) + 1) MsgBox (&quot;Array as a string: &quot; &amp; AryToStr(intAry)) &#39; Read and assign values For i = 3 To 5 strAry(i) = ThisWorkbook.Worksheets(&quot;TM5&quot;).Cells(23 + i, 3) Next MsgBox (&quot;Array values: &quot; &amp; AryToStr(strAry)) End Sub Array intAry contain 5 elements which can be accessed using index 0, 1, 2, …, 4. In memory this is done by allocating memory for 5 integers (see Figure 5.2) with index 0-4. The lower and upper index bounds can be found using LBound and UBound and we can use the course procedure AryToStr to print it. Figure 5.2: An array in memory. Note the default start index is 0. If you want another start index you can use e.g. Dim strAry(3 To 5) As String which use indices 3-5 (\\(3 = 5-3+1\\) elements). Moreover, if you want to start with index 1 as default then add Option Base 1 to the top of your module. Arrays require 20 bytes of memory plus 4 bytes for each array dimension plus the number of bytes occupied by the data itself. A Variant containing an array requires 12 bytes more than the array alone. 5.6.1 Multi-dimensional arrays Figure 5.3: Arrays with different dimensions. An array can have different dimensions (see Figure 5.3) e.g. and array with three dimensions is declared using: Dim intOrderSize(52, 100, 50) As Integer where indices may be (week, customer, product) number. Let us assume that index start from 1 then we have an array with \\(52 \\cdot 100 \\cdot 50\\) elements which can be accessed using e.g. MsgBox(intOrderSize(2, 10, 20)) &#39; order size week 2, customer 10, product 20 Let us consider an example: Sub TM5_MultiDimArrayEx() Dim intA(20, 10) As Integer Dim i As Integer, j As Integer ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39; clear test cells so have empty cells &#39; Assign some values For i = LBound(intA, 1) To UBound(intA, 1) For j = LBound(intA, 2) To UBound(intA, 2) intA(i, j) = WorksheetFunction.RandBetween(1, 1000) Next Next &#39; print results from G4 For i = LBound(intA, 1) To UBound(intA, 1) For j = LBound(intA, 2) To UBound(intA, 2) Cells(i + 4, j + 7) = intA(i, j) Next Next &#39; Call AryPaste(intA, Range(&quot;G4&quot;)) &#39; same result End Sub We first assign random values to intA in the first loop. Note we use LBound and UBound to find the range of the indices (the second argument is the dimension we consider). Next, the results are printed to the sheet with upper left equal to G4. Here you may also have used the course procedure AryPaste instead. 5.6.2 Dynamic arrays Often we do not know the size of the array we need when we start the program. For this we use dynamic arrays: Sub TM5_DynArrayEx() Dim ary() As String &#39; dynamic array, note use empty () Dim i As Integer ThisWorkbook.Worksheets(&quot;TM5_Test3&quot;).Activate ReDim ary(2 To 5) &#39; create entries a(2) to a(5) For i = 2 To 5 ary(i) = Cells(i + 1, 1) &#39; read from Array sheet Next MsgBox (&quot;Values are: &quot; &amp; AryToStr(ary)) MsgBox (&quot;The lowest and higest index are &quot; &amp; LBound(ary) &amp; &quot; and &quot; &amp; UBound(ary)) ReDim ary(3 To 5) &#39; reallocate array, all values are set to default (empty string) MsgBox (&quot;Values are: &quot; &amp; AryToStr(ary)) For i = 3 To 5 ary(i) = Cells(i + 1, 1) Next MsgBox (&quot;Values are: &quot; &amp; AryToStr(ary)) MsgBox (&quot;The lowest and higest index are &quot; &amp; LBound(ary) &amp; &quot; and &quot; &amp; UBound(ary)) End Sub First, the dynamic array is declared using empty parenthesis Dim ary() As String. Next the ReDim keyword is used to set the dimension. 5.6.3 Input and output A set of course procedures (module ModAry) have been defined to read/set the values in an array and output the values of an array: Sub TM5_IOAryEx() Dim ary() As Integer Dim strAry() As String ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39;&#39; Set to value single value ReDim ary(2) Call AryToVal(ary, 5) Range(&quot;G4&quot;) = &quot;A fixed value:&quot; Call AryPaste(ary, Range(&quot;G5&quot;)) &#39; the upper left cell is G5 &#39;&#39; Paste vertical Range(&quot;K4&quot;) = &quot;Paste vertical:&quot; Call AryPaste(ary, Range(&quot;K5&quot;), False) &#39;&#39; Set to sequence Call AryToSeq(ary, 1, 6) Range(&quot;G10&quot;) = &quot;A sequence:&quot; Call AryPaste(ary, Range(&quot;G11&quot;)) &#39;&#39; Read strings from a range Call AryRead(strAry, Range(&quot;C31:D33&quot;)) &#39; read a 2D array Range(&quot;G31&quot;) = &quot;Names in the &quot; &amp; AryDim(strAry) &amp; &quot;D array:&quot; Call AryPaste(strAry, Range(&quot;G32&quot;)) End Sub You set all entries in the array to a single value using AryToVal and a sequence using AryToSeq. Moreover, use AryRead to read the values of a range into an array. Finally, AryPaste can be used to paste values of an array to a sheet. You just have to specify the upper left cell where you want to paste. Procedure AryRead can both read values into 1D and 2D arrays: Sub TM5_AryReadEx() Dim ary() As Integer ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39;&#39; Read values from a range with only 1 column Call AryRead(ary, Range(&quot;C5:C9&quot;)) Range(&quot;G4&quot;) = AryDim(ary) &amp; &quot;D array:&quot; Call AryPaste(ary, Range(&quot;G5&quot;), False) &#39;&#39; Read values from a range with only 1 row Call AryRead(ary, Range(&quot;C5:E5&quot;)) Range(&quot;I4&quot;) = AryDim(ary) &amp; &quot;D array:&quot; Call AryPaste(ary, Range(&quot;I5&quot;)) &#39;&#39; Read values from a range with only 1 column/row but use 2D array Call AryRead(ary, Range(&quot;C11:C14&quot;), blnReduceDim:=False) Range(&quot;G10&quot;) = AryDim(ary) &amp; &quot;D array:&quot; Call AryPaste(ary, Range(&quot;G11&quot;), False) &#39;&#39; Use other start and end index Call AryRead(ary, Range(&quot;C17:E19&quot;), intStartIdx1:=2, intStartIdx2:=5) Range(&quot;G16&quot;) = AryDim(ary) &amp; &quot;D array with start index &quot; &amp; LBound(ary, 1) &amp; &quot; and &quot; &amp; LBound(ary, 2) &amp; &quot;:&quot; Call AryPaste(ary, Range(&quot;G17&quot;)) End Sub First, note that if the optional argument blnReduceDim is not set to false the array automatically becomes a 1D array if a range with one row or column is read. Next, you can use another start index of the array (default is 1) by specifying the optional arguments intStartIdx1 and intStartIdx2. Procedure AryRead fails if we want to set values for arrays with more than 2 dimensions. For this the AryReadLong can be used which can read arrays until five dimensions: Sub TM5_AryReadLongEx() Dim ary() As Integer ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39;&#39; Read 1D array Call AryReadLong(ary, Range(&quot;A36:B38&quot;), 3) &#39; default value = 3 Range(&quot;G35&quot;) = &quot;Values in the &quot; &amp; AryDim(ary) &amp; &quot;D array:&quot; Call AryPaste(ary, Range(&quot;G36&quot;)) &#39;&#39; Read 2D array Call AryReadLong(ary, Range(&quot;A41:C47&quot;), 4) &#39; default value = 4 Range(&quot;G40&quot;) = &quot;Values in the &quot; &amp; AryDim(ary) &amp; &quot;D array:&quot; Call AryPaste(ary, Range(&quot;G41&quot;)) &#39;&#39; Read 3D array (cannot be pasted to the sheet, have a look at it using the debugger) Call AryReadLong(ary, Range(&quot;A50:D56&quot;), 5) &#39; default value = 5 End Sub Procedure AryReadLong assumes that you specify the values in long format, i.e. there is index values in all columns except the last which contains the values (see Figure 5.4). For instance, if we consider row 54, then the specification says that ary(1,3,1) = 49. Note we do not have to specify all combination of indices, e.g. in the specification A41:C47 the index (2,4) is missing and set to the default value 4. It is assumed that indices start from the lowest to highest index in each dimension. Figure 5.4: Reading values to an array using a long format (TM5 worksheet). You can also read a csv file into an array. Let us have a look at a csv file data2.csv using a semicolon as delimiter: 55,18,34,1,81,26,90,11,46,32,93 49,95,73,82,53,40,99,10,52,38,92 59,90,97,100,59,73,88,33,78,61,24 96,84,32,36,94,82,49,94,48,49,1 59,21,24,57,3,78,54,79,57,42,8 You can read the values into an array using AryFromCSV: Sub TM5_AryReadCSVEx() Dim rng As Range Dim ary() As Integer ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39;&#39; Read csv file (NOTE you must know the separator in the csv file beforehand!) Range(&quot;G3&quot;) = &quot;Array values:&quot; Call AryFromCSV(ary, &quot;data2.csv&quot;, &quot;,&quot;) &#39; know that it contains integers (otherwise use variant) Call AryPaste(ary, Range(&quot;G4&quot;)) End Sub 5.6.4 Sorting arrays Arrays can be sorted using AryQuickSort: Sub TM5_ArySortEx() Dim ary() As Integer ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39;&#39; Read from a range and sort Call AryRead(ary, Range(&quot;C5:E19&quot;)) Call AryQuickSort(ary, 2) Range(&quot;G3&quot;) = &quot;Sort w.r.t. 2. column:&quot; Call RngPaste(Range(&quot;C4:E4&quot;), Range(&quot;G4&quot;)) &#39; copy header Call AryPaste(ary, Range(&quot;G5&quot;)) End Sub Here we sort based on the 2. column in the array. 5.6.5 Use arrays instead of ranges Since a range represent a block of cells in a sheet, one may think of a range a some kind of 1D or 2D array. Hence one may use a range directly to read/write values instead of an array (we did that in Section 4.7). However, often arrays are better to use than ranges: You can set indices as you like so they give a meaning to you, e.g. intOrderSize(2, 10, 20) denote the order size of product 20, in week 2 for customer 10. Arrays are much faster to update than ranges, More specific, it is much faster to update the values many times in an array compared to a range. You worksheet and ranges may be seen as a place where you keep your data. Hence, when you run an algorithm, you first read the data into some arrays. Next, do some calculations (update the arrays) and finally output the result to a worksheet again. Consider for example the distance matrix calculations in Section 3.6. Here it would be faster to store the distance matrix in a 2D array: Sub TM5_MakeDistArray() Dim n As Integer Dim aryDist() As Double Dim i As Integer Dim j As Integer ThisWorkbook.Worksheets(&quot;TM3_DistanceMatrix&quot;).Activate n = Range(&quot;E1&quot;) ReDim aryDist(1 To n, 1 To n) For i = 1 To n For j = i + 1 To n aryDist(i, j) = TM3_Distance(Cells(i + 1, 2), Cells(i + 1, 3), Cells(j + 1, 2), Cells(j + 1, 3)) aryDist(j, i) = aryDist(i, j) &#39; set symetric value Next Next End Sub Afterwards aryDist can be used during in an algorithm. 5.7 Collections Collections are a way of storing a group of items together (think of it as a set). Collections and arrays are both used to group variables. They both store a set of items e.g. a list of student marks or country names. If we compare collections against arrays: Collections are similar to arrays but better to use when the number of items is not fixed. With an array you normally set the size once. On the contrary you often add or remove items from a collection. Collections are better when adding and removing items. An item in a collection are read-only whereas an entry in an array are read/write. Collection can be accessed using a key or an index (starting from 1). Items of a collection do not have to share the same data type. Collections are a part of the predefined objects in VBA and hence a collection have to be defined in a special way. Let us consider an example: Sub TM5_ColEx() Dim col As New Collection &#39; declare and create Dim e As Variant ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate Call TM5_ClearTestTM5 &#39;&#39; Add items Call col.Add(&quot;Apple&quot;) Call col.Add(&quot;Pear&quot;) Call col.Add(123) Cells(4, 7) = &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items: &quot; &amp; Col2Str(col) &#39;&#39; Use For Each to scan elements For Each e In col MsgBox (e) Next e &#39;&#39; Access values in the collection using index Cells(5, 7) = &quot;The 1. item is: &quot; &amp; col(1) Cells(6, 7) = &quot;The 3. item is: &quot; &amp; col(3) &#39; Remove items Call col.Remove(2) Cells(7, 7) = &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items: &quot; &amp; Col2Str(col) &#39;&#39; Note index of items has now changed (the 3. item has become the 2. item) Cells(8, 7) = &quot;The 1. item is: &quot; &amp; col(1) Cells(9, 7) = &quot;The 2. item is: &quot; &amp; col(2) &#39;&#39; Clear collection Set col = Nothing Cells(10, 7) = &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items.&quot; End Sub First we declare and create a collection: Dim col As New Collection The collection (or set) is now defined with zero items. You can add items using Call col.Add(&quot;Apple&quot;) Call col.Add(&quot;Pear&quot;) Call col.Add(123) Let us create a function that prints the items of a collection as string: Function Col2Str(col As Collection, Optional strSep As String = &quot;, &quot;) As String Dim e As Variant Dim str As String For Each e In col str = str &amp; e &amp; strSep Next e Col2Str = Left(str, Len(str) - Len(strSep)) End Function Then the output of &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items: &quot; &amp; Col2Str(col) becomes The collection now contains 3 items: Apple, Pear, 123 You can access values in the collection using index: &quot;The 1. item is: &quot; &amp; col(1) &quot;The 3. item is: &quot; &amp; col(3) The 1. item is: Apple The 3. item is: 123 Items are removed using: Call col.Remove (2) &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items: &quot; &amp; Col2Str(col) The collection now contains 2 items: Apple, 123 Note index of items has now changed (the 3. item has become the 2. item): &quot;The 1. item is: &quot; &amp; col(1) &quot;The 2. item is: &quot; &amp; col(2) The 1. item is: Apple The 2. item is: 123 You clear a collection using: Set col = Nothing &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items.&quot; The collection now contains 0 items. An item in a collection can be given a key (think af a key as a name tag given to each item): Sub TM5_ColKeyEx() Dim col As New Collection &#39; declare and create Dim k As Variant ThisWorkbook.Worksheets(&quot;TM5&quot;).Activate &#39;&#39; Add using keys Call col.Add(&quot;Hans Jørgensen&quot;, &quot;ID123&quot;) &#39; value, key Call col.Add(&quot;Jens Hansen&quot;, &quot;ID234&quot;) Call col.Add(&quot;Lone Nielsen&quot;, &quot;ID456&quot;) &#39; col.Add &quot;Sine Mikkelsen&quot;, &quot;ID456&quot; &#39; gives an error since already used the key Cells(12, 7) = &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items: &quot; &amp; Col2Str(col) &#39;&#39; Access values using keys Cells(13, 7) = &quot;The item with key ID123 is: &quot; &amp; col(&quot;ID123&quot;) &#39; Remove items using keys col.Remove &quot;ID123&quot; Cells(14, 7) = &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items: &quot; &amp; Col2Str(col) End Sub Here we add items using a key: Call col.Add(&quot;Hans Jørgensen&quot;, &quot;ID123&quot;) &#39; value, key Call col.Add(&quot;Jens Hansen&quot;, &quot;ID234&quot;) Call col.Add(&quot;Lone Nielsen&quot;, &quot;ID456&quot;) &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items: &quot; &amp; Col2Str(col) The collection now contains 3 items: Hans Jørgensen, Jens Hansen, Lone Nielsen You can now access the item using the key: &quot;The item with key ID123 is: &quot; &amp; col(&quot;ID123&quot;) The item with key ID123 is: Hans Jørgensen Similar you can remove an item using a key: Call col.Remove(&quot;ID123&quot;) &quot;The collection now contains &quot; &amp; col.Count &amp; &quot; items: &quot; &amp; Col2Str(col) The collection now contains 2 items: Jens Hansen, Lone Nielsen It is recommended to use keys since using keys has three advantages: If the order changes your code will still access the correct item You can directly access the item without reading through the entire collection It can make you code more readable For more information about collections you may have a look at this webpage. 5.8 Example - Job sequencing Consider \\(i = 1,...,n\\) jobs that has to be done on a machine and let \\(c_{ij}\\) denote the setup cost of switching from job \\(i\\) to job \\(j\\). Moreover, let \\(c_{0i}\\) denote the setup cost of setting up job \\(i\\) when the machine is idle (index 0). Let \\(s = (0, s_1, \\ldots, s_n)\\) denote the sequence of jobs and \\(C\\) the total setup costs, e.g. if \\(s = (0,1,3,2,6,5,4)\\), then \\(C = c_{01} + c_{13} + c_{32} + c_{26} + c_{65} + c_{54}\\). Different algorithms for finding a good strategy minimizing the total setup costs exists. A greedy algorithm is: Step 0: Select the first job as one with minimal idle setup cost. Step 1: Given current job \\(i\\) select the unscheduled with minimal setup cost. Step 2: If no unscheduled jobs then stop and output the found job sequence else go to Step 1. Often a better algorithm is: Step 0: For each column \\(j\\) find \\(\\bar{c}_j = min(c_{0j},\\ldots,c_{j-1,j},c_{j+1,j},\\ldots,c_{nj})\\) and define relative setup costs \\(\\hat{c}_{ij} = c_{ij}-\\bar{c}_{j}\\) (the cost is subtracted the minimum value in that column). Step 1: Call the greedy algorithm using costs \\(\\hat{c}_{ij}\\). Examples on how data could look like can be seen in worksheet TM5_JobSeq that contains the setup costs (Figure 5.5). Columns M-T contain three datasets for which we want to calculate a job sequence. Figure 5.5: Worksheet TM5_JobSeq. Let us try to implement the greedy algorithm which takes the cost array costs as arguments and output the job sequence and cost: &#39;&#39; Job sequeceing using a cost array &#39; &#39; @param costs An array with setup costs &#39; @param strSeq The job sequence found (returned ByRef). &#39; @param dblCosts The total setup costs (returned ByRef). Sub TM5_GreedyAlg(costs() As Double, strSeq As String, dblCosts As Double) Dim intJobs As Integer &#39; number of jobs Dim used() As Integer &#39; an entry equals 1 if already scheduled Dim intCurJob As Integer &#39; current job Dim intNextJob As Integer &#39; best candidate for next job (= intM if not found yet) Dim dblNextCost As Double &#39; setup cost current to next job Dim c As Integer &#39; iterators Dim intM As Integer &#39; big number &#39;&#39; Allocate arrays intJobs = UBound(costs, 1) ReDim used(1 To intJobs) &#39; set size Call AryToVal(used, 0) &#39; set to 0 &#39;&#39; Run greedy strSeq = &quot;0&quot; &#39; start idle intM = 1000 &#39; a number bigger than largest cost intCurJob = 0 &#39; start idle dblCosts = 0 Do While True &#39; find next job given current intNextJob = intM dblNextCost = intM For c = 1 To intJobs &#39; scan row in array to find next unused job with minimal cost If used(c) &lt;&gt; 1 And costs(intCurJob, c) &lt; dblNextCost Then intNextJob = c dblNextCost = costs(intCurJob, c) End If Next If intNextJob = intM Then Exit Do &#39; no new job found (all jobs used) dblCosts = dblCosts + dblNextCost used(intNextJob) = 1 intCurJob = intNextJob strSeq = strSeq &amp; &quot;, &quot; &amp; intNextJob Loop End Sub First observe that the procedure have three arguments costs, strSeq and dblCosts. The array costs contain the setup costs and is an input argument to the algorithm. The last two arguments are output arguments. Since arguments are passed by reference by default (no new memory is allocated), we modify them with the solution. Next, to run the algorithm we need to keep track of which jobs have been used. We use the array used for this and set it to 0 (not used) and 1 (used). Finally, the Do While loop is used to scan a row in the cost array. We want to find the minimum cost and hence use a big number as starting value, then scan all unused jobs and choose the one with minimum cost. If no new job is found we finish; otherwise we update strSeq and dblCosts. Note that the procedure do not have any interaction with a worksheet. It simply takes an array as input argument and store the result in two output arguments. That is, the procedure is independent of where the data is from (could e.g. be an csv file instead of a worksheet). Let us try to link the greedy algorithm to the data in workheet TM5_JobSeq. Columns M-T contain three datasets for which we want to calculate a job sequence. First, let us make a procedure that copies a dataset to A4 (upper left cell): Sub TM5_CopyData() Dim str As String ThisWorkbook.Worksheets(&quot;TM5_JobSeq&quot;).Activate &#39; so use the correct sheet str = InputBox(&quot;Specify cell in data (e.g. N7)&quot;) &#39; get a cell value Call TM5_CleanJobSeq &#39; delete previous data Call RngPaste(RngCurRegion(Range(str)), Range(&quot;A4&quot;), withFormat:=True) &#39; paste the current region End Sub Note we use the current region of the cell value to retrieve the dataset. We can now run the greedy algorithm using the data starting in A4: Sub TM5_RunGreedy() Dim costs() As Double &#39; setup costs Dim strSeq As String &#39; job seq Dim dblCosts As Double &#39; total setup costs Dim rng As Range ThisWorkbook.Worksheets(&quot;TM5_JobSeq&quot;).Activate &#39; Allocate costs to array Set rng = RngCurRegion(Range(&quot;A4&quot;)) &#39; rng now is the whole dataset with headers Set rng = Range(&quot;B5:&quot; &amp; RngGetLastCol(rng, asLetter:=True) &amp; RngGetLastRow(rng)) &#39; rng now is the costs Call AryRead(costs, rng, 0, 1) &#39; start index from 0 (first dim) and 1 (second dim) &#39; Run algorithm Call TM5_GreedyAlg(costs, strSeq, dblCosts) &#39; Write results to sheet Range(&quot;C1&quot;) = UBound(costs, 1) Range(&quot;C2&quot;) = strSeq Range(&quot;F1&quot;) = dblCosts End Sub First, observe how we allocate values to the ‘costs’ array. We use the course procedure AryRead and hence first have to find the range containing the setup costs. This can be done may ways, but we know that the upper left cell is B5 and the lower right is found using the RngGet functions. Next, we call AryRead and set the index to start from 0 (first dimension) and 1 (second dimension). Given setup costs, we call the greedy algorithm which returns updated strSeq and dblCosts. Finally, we output the results to the worksheet. To implement the ‘better’ algorithm we need to modify the costs array and subtract the minimum column value: Sub TM5_RunBetter() Dim minCol() As Double &#39; min value in col c Dim intJobs As Integer &#39; number of jobs Dim costs() As Double &#39; setup costs Dim strSeq As String &#39; job seq Dim dblCosts As Double &#39; total setup costs Dim rng As Range Dim dbl As Double Dim r As Integer, c As Integer ThisWorkbook.Worksheets(&quot;TM5_JobSeq&quot;).Activate &#39; Allocate costs to array Set rng = RngCurRegion(Range(&quot;A4&quot;)) &#39; rng now is the whole dataset with headers Set rng = Range(&quot;B5:&quot; &amp; RngGetLastCol(rng, asLetter:=True) &amp; RngGetLastRow(rng)) &#39; rng now is the costs Call AryRead(costs, rng, 0, 1) &#39; start index from 0 (first dim) and 1 (second dim) &#39; Calc min value in each col intJobs = UBound(costs, 1) ReDim minCol(1 To intJobs) For c = 1 To intJobs dbl = 10000000 &#39; a big number For r = 0 To intJobs If costs(r, c) &lt; dbl And r &lt;&gt; c Then dbl = costs(r, c) Next minCol(c) = dbl Next &#39; Calc relative For c = 1 To intJobs For r = 0 To intJobs costs(r, c) = costs(r, c) - minCol(c) Next Next &#39; Run algorithm Call TM5_GreedyAlg(costs, strSeq, dblCosts) &#39; Write results to sheet Range(&quot;C1&quot;) = intJobs Range(&quot;C2&quot;) = strSeq Range(&quot;F1&quot;) = dblCosts + WorksheetFunction.Sum(minCol) End Sub First, an array minCol is used to store the minimum values for each column. Next, we update the costs array with the relative values and the greedy algorithm is run with the relative setup cost values. Finally, we output the results. Note we have to add the minimum costs back to dblCosts (the sum of the minCol values). 5.9 Recap Variables are used to store information that is saved in memory. A variable may store different data types such an integer, a double, a group of doubles (an array), a range of cells in a worksheet (a range object) or a set of numbers (a collection). Strings are special variables with varying length. Use the &amp; to concatenate strings (glue strings together). An empty string is of length zero. VBA have a lot of predefined objects you can use. Think of an object as a datatype that holds a group of variables. Examples of some objects are Range, Worksheet, and WorksheetFunction. Refer to an object by specifying the path in the hierarchy e.g.  Workbooks(&quot;Jobs.xlsm&quot;).Worksheets(&quot;Data values&quot;).Range(&quot;D4&quot;).value You may skip parts of the path (VBA then uses the current active one). Warning, you must know which sheet is active. Always specify what you want to be active ThisWorkbook.Worksheets(&quot;Data values&quot;).Activate &#39; activate the sheet dbl = Range(&quot;D4&quot;) Declare object variables using: Dim rng As Range Dim wst As Worksheet Set a reference to object variables using the keyword Set: Set rng = Range(&quot;F7&quot;) Set wst = Worksheets(&quot;Data values&quot;) A Worksheet object refer to a worksheet and you can use it to e.g. modify cells: Worksheets(&quot;TM5_Test1&quot;).Range(&quot;B2&quot;) = &quot;Testing Worksheet&quot; &#39; write to cell in sheet TM5_Test1 Set wst1 = ThisWorkbook.Worksheets(&quot;TM5_Test1&quot;) &#39; set a reference to a worksheet wst1.Range(&quot;B6&quot;) = &quot;Writing using wst1&quot; Different functions for worksheets is part of the course procedures. All the worksheet procedures start with Wst so you easy can find them using auto complete in the VBA editor. All worksheet procedures are stored in the ModWst module. You may open the module to have a look at the procedures. Examples: If WstCreate(&quot;Test&quot;, blnForce:=True) Then MsgBox (&quot;Created Test&quot;) If WstRename(&quot;Test&quot;, &quot;Test1&quot;) Then MsgBox (&quot;Renamed the Test to Test1&quot;) &#39; only work if no Test1 sheet If WstClear(&quot;Test8&quot;) Then MsgBox (&quot;Cleared Test8&quot;) &#39; clear sheet Test8 if exists If WstDelete(&quot;Test1&quot;) Then MsgBox (&quot;Deleted Test1&quot;) Ranges are objects that refer to parts of a worksheet e.g. a cell, a row, a column, or a rectangular selection of cells. Ranges can be used to read and write to cells Dim rng As Range Set rng = Range(&quot;A1:D5&quot;) rng = 145 &#39; cell value MsgBox rng.Address &#39; range address ($A$1:$D$5) You can use the course procedures (module ModRng) with prefix RngGet to retrieve info about the range: Set rng = ThisWorkbook.Worksheets(&quot;TM5&quot;).Range(&quot;C4:E19&quot;) MsgBox (&quot;Number of rows: &quot; &amp; RngGetRows(rng)) MsgBox (&quot;Number of cols: &quot; &amp; RngGetCols(rng)) MsgBox (&quot;First column number: &quot; &amp; RngGetFirstCol(rng)) MsgBox (&quot;First column letter: &quot; &amp; RngGetFirstCol(rng, asLetter:=True)) MsgBox (&quot;Lower right cell: &quot; &amp; RngGetLowerRight(rng, asString:=True)) MsgBox (&quot;Upper right cell: &quot; &amp; RngGetUpperRight(rng, asString:=True)) The current region of a range is found by expanding the range until all cells surrounding the range is empty rng = Range(&quot;D23&quot;).CurrentRegion This is useful if don’t know the size for data. You can use the course procedures (module ModRng) with prefix RngGetCurRegion to retrieve info about the current region of a range: Set rng = Range(&quot;D7&quot;) &#39; assume we know that data contains cell D7 MsgBox (&quot;Address: &quot; &amp; RngGetCurRegionAddress(rng)) MsgBox (&quot;Rows = &quot; &amp; RngGetCurRegionRows(rng) &amp; &quot; cols = &quot; &amp; RngGetCurRegionCols(rng)) MsgBox (&quot;First row number = &quot; &amp; RngGetCurRegionFirstRow(rng) &amp; &quot;. Last row number = &quot; &amp; RngGetCurRegionLastRow(rng) &amp; &quot;.&quot;) MsgBox (&quot;First col number = &quot; &amp; RngGetCurRegionFirstCol(rng) &amp; &quot;. Last col number = &quot; &amp; RngGetCurRegionLastCol(rng) &amp; &quot;.&quot;) MsgBox (&quot;First col letter = &quot; &amp; RngGetCurRegionFirstCol(rng, True) &amp; &quot;. Last col letter = &quot; &amp; RngGetCurRegionLastCol(rng, True) &amp; &quot;.&quot;) You copy/paste a range using: Set rng = Range(&quot;D7:E10&quot;) Set rngNew = RngPaste(rng, Range(&quot;H14&quot;)) &#39; paste with upper left = H14, rngNew is now the new range You can read values from a csv file using: Set rng = RngFromCSV(&quot;data1.csv&quot;, Range(&quot;G4&quot;), &quot;;&quot;) &#39; paste file in range with upper left cell G4 You can write values from a range to a csv file using: Call RngToCSV(&quot;test.csv&quot;, rng, &quot;;&quot;) &#39; semicolon (;) separated file The columns in a range can be sorted. For instance sort a range ascending with respect to the second column and next descending with respect to the first column. Call rng.Sort(Key1:=rng.Columns(2), Order1:=xlAscending, _ Key2:=rng.Columns(1), Order2:=xlDescending, Header:=xlYes) An array store groups of variables of a specific data type. For example Dim intValues(8) As Integer The variable intValues is an array with 9 elements which can be accessed using index 0, 1, 2, …, 8. The default start index of an array is 0. If you want to start with index 1 then add Option Base 1 to the top of your module or use: Dim strAry(3 To 5) As String &#39; define array with index 3-5 An array can have different dimensions, e.g. three: Dim intOrderSize(52, 100, 50) As Integer where indices may be (week, customer, product) number. Let us assume that index start from 1 then we have an array with \\(52 \\cdot 100 \\cdot 50\\) elements which can be accessed using e.g. intOrderSize(2,10, 20) &#39; order size week 2, customer 10, product 20 Arrays require 20 bytes of memory plus 4 bytes for each array dimension plus the number of bytes occupied by the data itself. A Variant containing an array requires 12 bytes more than the array alone. Dynamic arrays are arrays where the dimension is unknown when they are declared. Use ReDim to set the dimension later: Dim strPeople() As String ... n = 8 ReDim strPeople(n) You can set values for an array by reading from a range: Dim ary() As Integer Call AryRead(ary, Range(&quot;C5:E9&quot;)) You can paste values of an array to a range: Call AryPaste(ary, Range(&quot;G5&quot;)) &#39; the upper left cell is G5 You can set values for an array with more than 2 dimensions by reading from a range: Dim ary() As Integer Call AryReadLong(ary, Range(&quot;A36:B38&quot;), 3) &#39; default value = 3 The procedure AryReadLong assumes that you specify the values in long format, i.e. there is index values in all columns except the last which contains the values. You can read a csv file into an array using: Dim ary() As Integer Call AryFromCSV(ary, &quot;data2.csv&quot;, &quot;,&quot;) &#39; know that it contains integers (otherwise use variant) Arrays can be sorted using: Dim ary() As Integer Call AryQuickSort(ary, 2) &#39; sort w.r.t. 2. column Often arrays are better to use than ranges: You can set indices as you like so they give a meaning to you, e.g. intOrderSize(2, 10, 20) denote the order size of product 20, in week 2 for customer 10. Arrays are much faster to update that ranges. It is much faster to update the values many times in an array compared to a range. You worksheet and ranges may be seen as a place where you keep your data. Hence, when you run an algorithm, you first read the data into some arrays. Next, do some calculations (update the arrays) and finally output the result to a worksheet again. Collections are used for storing a group of items together (think of it as a set). Collections and arrays are both used to group variables. If we compare collections against arrays: Collections are similar to arrays but better to use when the number of items is not fixed. With an array you normally set the size once. On the contrary you often add or remove items from a collection. Collections are better when adding and removing items. An item in a collection are read-only whereas an entry in an array are read/write. Collection can be accessed using a key or an index (starting from 1). Items of a collection do not have to share the same data type. Declare and create a collection: Dim col As New Collection Add items using: Call col.Add(&quot;Apple&quot;) Call col.Add(&quot;Pear&quot;) Items are removed using: Call col.Remove (2) Clear a collection using: Set col = Nothing An item in a collection can be given a key (think af a key as a name tag given to each item): Call col.Add(&quot;Hans Jørgensen&quot;, &quot;ID123&quot;) &#39; value, key Call col.Add(&quot;Jens Hansen&quot;, &quot;ID234&quot;) You can now access the item using the key: &quot;The item with key ID123 is: &quot; &amp; col(&quot;ID123&quot;) You can remove an item using a key: Call col.Remove(&quot;ID123&quot;) It is recommended to use keys since using keys has three advantages: If the order changes your code will still access the correct item You can directly access the item without reading through the entire collection It can make you code more readable You may also have a look at the slides for this module . 5.10 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! A template with VBA code for this module is given in the file 05-vba-datatypes-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM5_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM5_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. 5.10.1 Exercise - Equal entries This exercise is a slightly modified version an exam assignment (exam 2021-A4). Consider worksheet TM5_Equal with seven data sets. Each data set consists of a list of integer values and is contained in a single column. Your code should be able to run on any of these data sets, but only on one data set at a time. The value in cell C1 states the column to use, so you can change the data set by changing this value (the values can be 1, 3, 5, …). The data sets vary in size. If you need to know the number of values in the data set, it should be done as part of your vba code. Write a sub TM5_Equal that stores the values of the data set indicated in cell C1 in an array; creates an array equal, where equal(k,j) is 1, if the k’th and j’th values are equal, and 0 otherwise. 5.10.2 Exercise - Product search Consider the worksheet TM5_Products containing a set of products with product code and price. Create a sub TM5_FindProduct that Declare two arrays to store the price and product code. Assign values to the arrays. Use an input box to ask for a product code. Use a for loop to search for the product and output the price in a message box. Hint: the Exit sub may be useful. Add a button to the worksheet that run the procedure. Test you code using different product codes. What happens if you write the product code without capital letters? If your code do not work, have a look at the UCase function. Modify your code so that if the product is not found then “Product not found!” is given in a message box. 5.10.3 Exercise - Read collections Consider worksheet TM5_Col with numbers in column A to be read into a collection. Create a procedure TM5_ColNoKeys that: Create a collection col and add all the numbers. Print the collection in a message box (you may use the function Col2Str here). Create another collection colC and add all the items in col with value below 5. Consider worksheet TM5_Col with some ID numbers and prices for a set of products in columns C-D. Create a procedure TM5_ColKeys that: Create a collection col and add all the prices using ID as key. Print the price of the product with ID92011 in a message box. What happens if you try to print the price of ID92? 5.10.4 Exercise - Read arrays Consider the worksheet TM5_Array containing 3 datasets to be read into an array. The first two are in long format and the last in range format. Write a procedure TM5_ReadArrays that use course procedures AryRead and AryReadLong to read the values into three arrays. Assume that For the first dataset is the default array value 10. For the second dataset is the default array value 5. For the third dataset index must start from 3 (first dimension) and 5 (second dimension). Use the debugger to inspect if the values have been read correctly into the arrays. 5.10.5 Exercise - Process numbers This exercise is a slightly modified version an exam assignment (reexam 2022-A5). Consider worksheet TM5_ProcessData, which contains a set of numbers. Create a procedure TM5_Process with the following features: Copy the numbers to worksheet TM5_Process. Scan all the numbers and remove (clear the cell) all the negative numbers. Highlight all the numbers above 20. Add a button to the worksheet TM5_Process that run the procedure. The procedure should work for other datasets with a different size. You may assume that the data starts in cell A1. Create a procedure TM5_Stat with the following features: Scan the numbers and find the sum of all non-negative numbers, the mean of all negative numbers. Use a message box to display the sum and mean calculated. Add a button to the worksheet TM5_ProcessData that run the procedure. The procedure should work for other datasets with a different size. You may assume that the data starts in cell A1. 5.10.6 Exercise - Search payments This exercise is a slightly modified version an exam assignment (reexam 2022-A6). Consider worksheet TM5_PaymentsData which contains a table with three columns. The table contains data about payments for clients at a set of dates. Create a procedure TM5_SearchPayments that searches the table with the following features: Read the payment boolean in cell B1 (TRUE or FALSE) and the grouping string in cell B2 (None or Year) on worksheet TM5_Payments. Only consider payments where cells in the Payment column equals the payment boolean. If the grouping string equals None then count the number of payments for each client. Next, output the results on worksheet TM5_Payments. See worksheet TM5_PaymentsEx1 for an example. If the grouping string equals Year then count the number of payments for each client and year. Next, output the results on worksheet TM5_Payments. See worksheet TM5_PaymentsEx2_ for an example. Add a button to worksheet TM5_Payments that run the procedure. The procedure should work for other datasets with different number of rows too. 5.10.7 Exercise - Flight search The worksheet TM5_FlightData contains a set of flights between different destinations. You task is to create a procedure TM5_SearchFlights that can search for matching flights given a set of origins and destinations. Have a look at the results in worksheet TM5_FlightData. The origin and destinations to search for are given in columns A and B and the search result in columns D, E and F. Try pressing the Clear Search button and see what happens. Have a look at the code in the VBA editor for this sub and get an overview. × Hint Set the range you want to read and use AryRead Close Hint Try to finish the first part of the TM5_SearchFlights sub and store the flights in arrays. Use the debugger to check if the values are stored correctly. Try to finish the second part of the SearchFlights sub and search for matching origin-destination pairs. Note origins and destinations listed to be searched for are also matching origin-destination pairs if they are not in the same row. "],["mod-vba-random-numbers.html", "Module 6 Generating random numbers 6.1 Learning outcomes 6.2 Generating random numbers 6.3 Simulation 6.4 Recap 6.5 Exercises", " Module 6 Generating random numbers This module gives a short introduction on how to generate random numbers and using them in a simulation. Simulation studies that you do in Excel may be done easier using VBA toggeather with Excel. For more advanced simulation studies you may use dedicated programs (such as Arena) or Excel plugins (such as @Risk). A template with VBA code for this module is given in the file 06-vba-random-numbers-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM6_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM6_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. Learning path diagram Click/hover the nodes to follow links and see details. 6.1 Learning outcomes By the end of this module, you are expected to be able to: Describe what a random number is. Generate a random number from a distribution. Run a simulation and compare/analyse results. The learning outcomes relate to the overall learning goals number 2-4, 8-14 and 16 of the course. 6.2 Generating random numbers Often we want to model a system where some of the elements are uncertain. To simulate the system we want to generate some random numbers following different distributions. This can be done using the built-in VBA and Excel functions for most distributions. The course procedures (module ModRand) contain a set of procedures for generating random numbers. Let us have a look at how to generate random numbers from a uniform distribution: &#39;&#39; Generate random numbers from an uniform distribution &#39; @param intSize Random numbers generated &#39; @param dblMin Minimum number. &#39; @param dblMax Maximum number. &#39; @param ary Array to store the values in. Sub RandGenUniform(intSize As Integer, dblMin As Double, dblMax As Double, ary() As Double) Dim i As Integer ReDim ary(intSize) As Double Randomize &#39; initialize random-number generator For i = 1 To intSize ary(i) = dblMin + (dblMax - dblMin) * Rnd() Next End Sub First, observe that in the start of the procedure, the Randomize procedure is called. Randomize initialize the random-number generator and it is always a good idea to call it if you want true random numbers. Next, the Rnd function is used to generate random numbers in the interval \\([0,1[\\), i.e. a continuous uniform distribution. The Rnd function is a built-in VBA function. Finally, to generate random numbers between [dblMin, dblMax[, we use the formula dblMin + (dblMax - dblMin) * Rnd(). An array ary of intSize is used to store the random numbers. Similar you can generate random integers using the RandBetween Excel function. You can generate random numbers from a normal distribution using: &#39;&#39; Generate random numbers from a normal distribution &#39; @param intSize Random numbers generated &#39; @param dblMean Mean. &#39; @param dblSD Standard deviation. &#39; @param ary Array to store the values in. Sub RandGenNormal(intSize As Integer, dblMean As Double, dblSD As Double, ary() As Double) Dim i As Integer ReDim ary(intSize) As Double Randomize For i = 1 To intSize ary(i) = Application.WorksheetFunction.NormInv(Rnd, dblMean, dblSD) Next End Sub The procedure takes the mean and standard deviation as arguments and store intSize random numbers in the output array ary. Similar procedures can be found for the uniform, binomial, poisson and a custom discrete distribution. Let us try some examples: Sub TM6_RandDistEx() Dim ary() As Double Dim aryDens() As Double Dim intSize As Integer ThisWorkbook.Worksheets(&quot;TM6&quot;).Activate Call TM6_ClearTestTM6 Randomize &#39; initialize random-number generator intSize = 20 &#39; generate 20 numbers for each distribution &#39; Normal Call RandGenNormal(intSize, 100, 20, ary) Range(&quot;A1&quot;) = &quot;Normal&quot; Call AryPaste(ary, Range(&quot;A2&quot;), False) &#39; Cont. uniform [10,500[ Call RandGenUniformCont(intSize, 10, 500, ary) Range(&quot;B1&quot;) = &quot;Uniform&quot; Call AryPaste(ary, Range(&quot;B2&quot;), False) &#39; Discrete uniform 10,...,500 Call RandGenUniformDisc(intSize, 10, 500, ary) Range(&quot;B1&quot;) = &quot;Uniform&quot; Call AryPaste(ary, Range(&quot;B2&quot;), False) &#39; Binomial 100 trials, pr = 0.2 Call RandGenBinomial(intSize, 100, 0.2, ary) Range(&quot;C1&quot;) = &quot;Binomial&quot; Call AryPaste(ary, Range(&quot;C2&quot;), False) &#39; Poisson lambda = 5 Call RandGenPoisson(intSize, 5, ary) Range(&quot;D1&quot;) = &quot;Poisson&quot; Call AryPaste(ary, Range(&quot;D2&quot;), False) &#39; Custom discrete ReDim aryDens(1 To 4, 1 To 2) aryDens(1, 1) = 3 aryDens(2, 1) = 4 aryDens(3, 1) = 5 aryDens(4, 1) = 6 aryDens(1, 2) = 0.1 aryDens(2, 2) = 0.3 aryDens(3, 2) = 0.5 aryDens(4, 2) = 0.1 Call RandGenDiscrete(intSize, aryDens, ary) Range(&quot;E1&quot;) = &quot;Custom&quot; Call AryPaste(ary, Range(&quot;E2&quot;), False) Range(&quot;G3&quot;) = &quot;Custom distribution:&quot; Range(&quot;G4&quot;) = &quot;Value&quot; Range(&quot;H4&quot;) = &quot;Prob.&quot; Call AryPaste(aryDens, Range(&quot;G5&quot;)) End Sub We generate 20 random numbers for the different distributions. For generating random numbers from a custom discrete distribution we need a 2D array where each row store the outcome and the probability. For instance here the probability of outcome 5 is 50%. 6.3 Simulation Given an uncertain system we simulate the system by: constructing a deterministic model (that is we assume the random numbers have some specific values) and algorithms for solving it. Generate random numbers and use them to solve the model and store the results. Repeat a number of times and gather statistics such as min, mean, standard deviation or max value. Let us consider some examples in the next sections. 6.3.1 Example - Traveling salesman problem The travelling salesman problem (TSP) asks the following question: Given a list of cities and the distances between each pair of the cities, what is the shortest possible route that visits each city exactly once and returns to the origin city? The problem is an NP-hard problem (worst case solution time grows exponential with the number of cities) in combinatorial optimization, important in theoretical computer science and operations research. The problem was first formulated in 1930 and is one of the most intensively studied problems in optimization. Even though the problem is computationally difficult, many heuristics and exact algorithms are known. The goal with this example is to test different heuristics on a set of problem instances. To see which one works best. Let us first create a procedure TM6_GenTSPData that generate a TSP instance: &#39;&#39; Generate cities for the TSP (a TSP problem instance) &#39; @param dblCoord A (cities x 3) array to store the generated id and coordinates in (output ByRef). &#39; @param intCities Number of cities to generate. If 0 then ask. &#39; @param blnPrint If true then print out the data in columns A:C in the TM6_TSP sheet. Sub TM6_GenTSPData(dblCoord() As Double, Optional intCities As Integer = 0, _ Optional blnPrint As Boolean = False) Dim dblMin As Double Dim dblMax As Double Dim i As Integer Dim ary1() As Double, ary2() As Double Randomize &#39; Min and max values for uniform distribution dblMin = 0 dblMax = 10 &#39; Reallocate If intCities = 0 Then intCities = InputBox(&quot;How many points should I generate?&quot;) ReDim dblCoord(1 To intCities, 1 To 3) &#39; Generate random numbers Call RandGenUniformCont(intCities, dblMin, dblMax, ary1) Call RandGenUniformCont(intCities, dblMin, dblMax, ary2) For i = 1 To intCities dblCoord(i, 1) = i dblCoord(i, 2) = ary1(i) dblCoord(i, 3) = ary2(i) Next &#39;&#39; Print data If blnPrint Then ThisWorkbook.Worksheets(&quot;TM6_TSP&quot;).Activate Call TM6_ClearTestTSP Cells(1, 1).value = &quot;City&quot; Cells(1, 2).value = &quot;x-coord&quot; Cells(1, 3).value = &quot;y-coord&quot; For i = 1 To intCities Cells(i + 1, 1).value = dblCoord(i, 1) Cells(i + 1, 2).value = dblCoord(i, 2) Cells(i + 1, 3).value = dblCoord(i, 3) Next End If End Sub Note we specify the number of cities as an input argument. Each city has an id number and a \\(x\\) and \\(y\\)-coordinate and the result is stored in array dblCoord with intCities rows and three columns (column 1 store the city id, column 2 the \\(x\\)-coordinate and column 3 the \\(y\\)-coordinate). The \\(x\\) and \\(y\\)-coordinates are random numbers from an uniform distribution between 0 and 10. If blnPrint is true then coordinates are printed to the sheet and if intCities is zero then use an input box to ask for the number of cities. Figure 6.1: TSP algorithms and cost (TM6_TSP worksheet). We now can create a procedure BtnGenTSPData that calls GenTSPData, ask for the number of cities and print the result to the sheet. A button linking to the procedure is made in worksheet TM6_TSP (see Figure 6.1): Sub TM6_BtnGenTSPData() Dim dblCoord() As Double Call TM6_GenTSPData(dblCoord, 0, True) End Sub Given the \\(x\\) and \\(y\\)-coordinates of a problem instance (stored in dblCoord) we need to calculate the distance matrix: &#39;&#39; Calculate distance matrix &#39; @param dblDist The distance matrix to store distances (output ByRef). &#39; @param dblCoord A (cities x 3) array with id and coordinates. &#39; @pre Assume that dblCoord has not been sorted yet! &#39; @post Distances stored in dblDist. Sub TM6_CalcDistArray(ByRef dblDist() As Double, dblCoord() As Double) Dim i As Integer, j As Integer Dim dblDiffX As Double, dblDiffY As Double Dim intCities As Integer intCities = UBound(dblCoord, 1) ReDim dblDist(intCities, intCities) For i = 1 To intCities For j = i + 1 To intCities dblDiffX = dblCoord(i, 2) - dblCoord(j, 2) dblDiffY = dblCoord(i, 3) - dblCoord(j, 3) dblDist(i, j) = Sqr((dblDiffX * dblDiffX) + (dblDiffY * dblDiffY)) dblDist(j, i) = dblDist(i, j) &#39; assume symetric Next Next End Sub The procedure takes the \\(x\\) and \\(y\\)-coordinates (stored in dblCoord) and calculate the distance matrix stored in dblDist, i.e. dblDist(i, j) store the euclidean distance between city i and j. Symmetric distances are assumed, i.e. dblDist(i, j) = dblDist(j, i). We are now ready to consider algorithms for calculating a TSP route. Let us first consider a procedure TM6_SolveTSPIncX that sort the array dblCoord increasing in the x-coordinate and visit the cities in the order of the sorted array and return to the starting city: &#39;&#39; Calculate visiting sequence based on increasing x-coord &#39; @param dblCoord A (cities x 3) array with id and coordinates. &#39; @param dblDist The distance matrix. &#39; @param dblCost Total cost (output ByRef). &#39; @param intSeq The visiting sequence (output ByRef). &#39; @post The total cost and sequence returned. Sub TM6_SolveTSPIncX(dblCoord() As Double, dblDist() As Double, _ dblCost As Double, intSeq() As Integer) Dim j As Integer Dim intCities As Integer &#39; Sort intCities = UBound(dblDist, 1) ReDim intSeq(intCities) Call AryQuickSort(dblCoord, 2) &#39; Store visiting sequence For j = 1 To intCities intSeq(j) = dblCoord(j, 1) Next dblCost = TM6_CalcCost(dblDist, intSeq) End Sub First, observe that we sort the array using course procedure ArySort. Next, the visiting city sequence are stored in intSeq. Finally, the total cost are stored in dblCost which call the function TM6_CalcCost: &#39;&#39; Calculate the cost of a route &#39; @param dblDist The distance matrix. &#39; @param intSeq The visiting sequence (output ByRef). &#39; @return The cost of a route. Function TM6_CalcCost(dblDist() As Double, intSeq() As Integer) As Double Dim dblCost As Double Dim intCities As Integer Dim j As Integer intCities = UBound(intSeq) dblCost = 0 For j = 1 To intCities - 1 dblCost = dblCost + dblDist(intSeq(j), intSeq(j + 1)) Next TM6_CalcCost = dblCost + dblDist(intSeq(intCities), intSeq(1)) &#39; cost + cost of returning to start End Function If we want to use the algorithm on the data in sheet TM6_TSP we first need a procedure reading the data: &#39;&#39; Read the coordinates into an 2D array &#39; @param dblCoord A (cities x 3) array to store the generated id and coordinates in. &#39; @post Generated data stored in dblCoord. Sub TM6_ReadCoord(dblCoord() As Double) Dim rng As Range ThisWorkbook.Worksheets(&quot;TM6_TSP&quot;).Activate Set rng = RngGetCurRegionRange(Range(&quot;A1&quot;), 2) &#39;current region except the header Call AryRead(dblCoord, rng) End Sub and then a procedure TM6_BtnSolveTSPIncX that calls TM6_SolveTSPIncX using the TSP data in the sheet and print out the total cost in cell H4. We include a button linking to the procedure (see Figure 6.1): Sub TM6_BtnSolveTSPIncX() Dim dblCoord() As Double Dim dblDist() As Double Dim intSeq() As Integer Dim dblCost As Double Call TM6_ReadCoord(dblCoord) Call AryQuickSort(dblCoord, 1) &#39; so sure sorted by id Call TM6_CalcDistArray(dblDist, dblCoord) Call TM6_SolveTSPIncX(dblCoord, dblDist, dblCost, intSeq) Range(&quot;H3&quot;) = &quot;Cost:&quot; Range(&quot;H5&quot;) = dblCost End Sub Another algorithm TM6_SolveTSPIncY that sort the array dblCoord increasing in the \\(y\\)-coordinate and visit the cities in the order of the sorted array and return to the starting city can be made similar to above (see Figure 6.1). A possibility is also an algorithm that visit the cities in the order of the dblCoord array and return to the starting city. This may seen as we visit the cities in random order since we generate the \\(x\\) and \\(y\\)-coordinate random. Finally, we will consider a nearest neighbour algorithm. We start in City 1. Given the current city, the next city (not already visited) is the city with the shortest distance: &#39;&#39; Calculate visiting sequence based on nearest neighbour &#39; @param dblCoord A (cities x 3) array with id and coordinates. &#39; @param dblDist The distance matrix. &#39; @param dblCost Total cost. &#39; @param intSeq The visiting sequence. &#39; @post The total cost and sequence returned. Sub TM6_SolveTSPNN(dblCoord() As Double, dblDist() As Double, ByRef dblCost As Double, ByRef intSeq() As Integer) Dim i As Integer, id As Integer Dim intCities As Integer, intCurCity As Integer, intBestCity As Integer Dim dblMinDist As Double Dim intUsed() As Integer &#39; intUsed(id) = 1 if city id have been used in sequence intCities = UBound(dblDist, 1) ReDim intSeq(intCities) ReDim intUsed(intCities) &#39; Find nearst neighbor id = 1 intSeq(1) = id &#39; start in city id = 1 intUsed(id) = 1 For i = 2 To intCities &#39; find next city to add to intSeq(i) dblMinDist = 1000000 &#39; large number intCurCity = intSeq(i - 1) For id = 2 To intCities &#39; scan for next candidate (id = 1 already used) If intUsed(id) = 0 And dblDist(intCurCity, id) &lt; dblMinDist Then &#39; shorter distance found intBestCity = id dblMinDist = dblDist(intCurCity, id) End If Next intSeq(i) = intBestCity intUsed(intBestCity) = 1 Next dblCost = TM6_CalcCost(dblDist, intSeq) End Sub Here we need to have an array intUsed to store if a city already visited (equal 1 if yes). Nested loops is used to scan for the not-visited city nearest to the current one. The results for all the algorithms on an problem instance with 20 cities can be seen in Figure 6.1. We now have a set of algorithms which can be tested on some problem instances that we can generate. On the problem instance we used above the nearest neighbour algorithm seems to find the best route (shortest cost). However, we can not state that this holds in general without testing on many problem instances. Hence we want to do a simulation study with steps: Generate a problem instance with intCities cities which are chosen random between 10 and 500. Calculate the distance matrix. Solve the instance using all of the above algorithms. Store the result in a row in the TM6_TSPSim sheet. Repeat 100 times and calculate min, mean and max values for each solution algorithm. This is done in procedure TM6_TSPSim: Sub TM6_TSPSim() Dim intCities As Integer Dim s As Integer Dim dblCoord() As Double Dim dblDist() As Double Dim intSeq() As Integer Dim dblCost As Double Dim intRow As Integer &#39; Setup sheet ThisWorkbook.Worksheets(&quot;TM6_TSPSim&quot;).Activate Call RngClear(Range(&quot;A:F&quot;)) Cells(1, 1) = &quot;Simulation results&quot; Cells(3, 2) = &quot;Min&quot; Cells(4, 2) = &quot;Mean&quot; Cells(5, 2) = &quot;Max&quot; intRow = 7 Cells(intRow, 1) = &quot;Run&quot; Cells(intRow, 2) = &quot;Cities&quot; Cells(intRow, 3) = &quot;IncX&quot; Cells(intRow, 4) = &quot;IncY&quot; Cells(intRow, 5) = &quot;Random&quot; Cells(intRow, 6) = &quot;NN&quot; &#39; Run simulation For s = 1 To 100 Cells(s + intRow, 1) = s intCities = WorksheetFunction.RandBetween(10, 500) &#39; number of cities Cells(s + intRow, 2) = intCities Call TM6_GenTSPData(dblCoord, intCities, False) Call TM6_CalcDistArray(dblDist, dblCoord) Call TM6_SolveTSPIncX(dblCoord, dblDist, dblCost, intSeq) Cells(s + intRow, 3) = dblCost Call TM6_SolveTSPIncY(dblCoord, dblDist, dblCost, intSeq) Cells(s + intRow, 4) = dblCost Call TM6_SolveTSPRand(dblCoord, dblDist, dblCost, intSeq) Cells(s + intRow, 5) = dblCost Call TM6_SolveTSPNN(dblCoord, dblDist, dblCost, intSeq) Cells(s + intRow, 6) = dblCost Next &#39; Calc statistics For s = 3 To 6 Cells(3, s) = WorksheetFunction.Min(Range(Cells(intRow + 1, s), Cells(intRow + 100, s))) Cells(4, s) = WorksheetFunction.Average(Range(Cells(intRow + 1, s), Cells(intRow + 100, s))) Cells(5, s) = WorksheetFunction.Max(Range(Cells(intRow + 1, s), Cells(intRow + 100, s))) Next &#39; Format cells Call RngFormat(Cells(3, 2).CurrentRegion, &quot;green&quot;) Call RngFormat(Cells(intRow, 1).CurrentRegion, &quot;orange&quot;, True) End Sub First, we setup the worksheet TM6_TSPSim so it is ready for the results. Next, we run the simulation 100 times in a for loop. In each loop we first generate the number of instances, then a problem instance for which we find the distance matrix. The algorithms is then run on the problem instance and results are added to the worksheet. After the loop we calculate statistics for all the runs. Finally, the results are formatted for nice appearance. Figure 6.2: Simulation comparing TSP algorithms (TM6_TSPSim worksheet). The results are given in Figure 6.2. As can be seen the nearest naighbour algorith is best and gives the shortest average distance. 6.4 Recap Often we want to model a system where some of the elements are uncertain. To simulate the system we want to generate some random numbers following different distributions. This can be done using the built-in VBA and Excel functions. Initialize generation of random numbers using Randomize() &#39; chooses a random seed Or Randomize(100) &#39; generate the same random numbers We normally use the first option. When generating random numbers in VBA and writing them to the worksheet, they will NOT be changed when the worksheet is updated! Only when the code is executed! Examples on some distributions are Uniform between 0 and 1: Rnd() Uniform between i and j: i + (j - i) * Rnd Normal distribution: WorksheetFunction.NormInv(Rnd, dblMean, dblSD) Binomial distribution: WorksheetFunction.Binom_Inv(intTrials, dblPr, Rnd) The course procedures (module ModRand) contain a set of procedures for generating random numbers that are stored in an array. Given an uncertain system we simulate the system by constructing a Deterministic model (that is we assume the random numbers have some specific values) and algorithms for solving it. Generate random numbers and used to solve the model and store the results. Repeat a number of times and calculate statistics such as min, mean and standard deviation. You may also have a look at the slides for this module. 6.5 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! A template with VBA code for this module is given in the file 06-vba-random-numbers-template.xlsm (open it and use it while reading the notes). Have a look inside the module TM6_ex in the VBA editor for examples used in the notes and during lectures. Have a look at module TM6_exercises for exercises. The template file for next teaching module will contain guiding answers for the exercises to this teaching module. 6.5.1 Exercise - Two random integers This exercise is a slightly modified version an exam assignment (reexam 2021-A4). Consider worksheet TM6. Write a sub TM6_RandInt1 that reads two integer numbers, \\(a\\) and \\(b\\) (assume that \\(a &lt; b\\)) from cells B24 and B25, and generates two random integer numbers, \\(r_1\\) and \\(r_2\\), uniformly between \\(a\\) and \\(b\\) such that \\(r_1 \\neq r_2\\). The sub should write \\(r_1\\) and \\(r_2\\) in cells D24 and D25 with the smaller of the two numbers in D24. Write a sub TM6_RandInt2 that should take two integer arguments, \\(a\\) and \\(b\\), and generate two random numbers \\(r_1\\) and \\(r_2\\) following the same rules as in Question 1. However, \\(r_1\\) and \\(r_2\\) may not be written to the spreadsheet. Instead, they should be given as output to the sub calling TM6_RandInt2. Write a sub TM6_RandInt2Main that call TM6_RandInt2 using \\(a=2\\) and \\(b=17\\) and output \\(r_1\\) and \\(r_2\\) in a message box. Is your code robust? What happens if \\(a=b\\)? 6.5.2 Exercise - Swap entries This exercise is a slightly modified version an exam assignment (reexam 2021-A5). Consider worksheet TM6_Swap which contains a list of names (from A4) and two numbers between 1 and 20 (in B1 and B2). You may assume that the number in B2 is strictly larger than the one in B1. In the following, let \\(r_1\\) and \\(r_2\\) represent these two numbers. Sometimes, we need to change the order of the items in such lists, and in this assignment, you will be asked to do that in three different ways. Write a sub TM6_Swap1 that, given values of \\(r_1\\) and \\(r_2\\) (to be read from B1 and B2), swaps the \\(r_1\\)’th and the \\(r_2\\)’th name in the list. Print the result in column D. Write a sub TM6_Swap2 that, given values of \\(r_1\\) and \\(r_2\\) (to be read from B1 and B2), reverses the sequence from the \\(r_1\\)’th to the \\(r_2\\)’th name in the list. Print the result in column E. Write a sub TM6_Swap3 that changes the order of the names so they appear in random order. Print the result in column F. Figure 6.3 gives an example on the swap operations. Figure 6.3: Swap entries (TM6_Swap worksheet). 6.5.3 Exercise - Dan’s bakery Dan owns a small bakery baking a single cold-rised bread. The demand level \\(l\\) for bread is uncertain and on a given day the demand level equals \\(l=1\\) (low) with probability 0.2, \\(l=2\\) (medium) with probability 0.5 and \\(l=3\\) (high) with probability 0.3. The actual demand (number of customers) depends on the demand level and is Poisson distributed with mean \\(50 + 60l\\). Currently, the sales price per bread is 45 DKK and production cost 7 DKK. If a customer arrives and Dan has no bread left then he estimates the loss of goodwill to be 10 DKK. A customer always buy one bread. Dan can have 20 breads in the oven a time and hence always produce a multiple of 20 breads. Create a function TM6_DanProfit that returns the daily profit given a specific demand and production. The profit given demand \\(d\\) and production \\(p\\) using the current prices and costs is \\[(45-7)\\min(d,p) - 7\\max(0,p-d) - 10\\max(0,d-p).\\] Let the arguments of the function be: &#39; @param dblDemand Demand. &#39; @param dblProd Production. &#39; @param dblPrice Sales price. &#39; @param dblCost Production costs. &#39; @param dblGW Lost goodwill cost. Create a procedure TM6_DanSim that simulate the system for \\(y\\) days given that Dan choose to produce \\(x\\) breads each day. The procedure arguments are: &#39; @param dblProd Production (x). &#39; @param dblPrice Sales price. &#39; @param dblCost Production costs. &#39; @param dblGW Lost goodwill cost. &#39; @param aryDens Demand level density array (needed for RandGenDiscrete). &#39; @param intDays Days to simulate (y). &#39; @param aryStat Array to store the output statistics (output ByRef). The result array aryProfit has entries: number of runs (days), production sales price production cost lost goodwill cost average profit standard deviation min and max profit Create a procedure TM6_DanBtnSim that calls TM6_DanSim for production levels 20, 40, …, 400 and output the results in worksheet TM6_DanSim. The procedure must use the demand level distribution, prices and cost given in the worksheet. What is the best production level? What is the best production level if the demand levels changes to low with probability 0.7, medium with probability 0.2 and high with probability 0.1? 6.5.4 Exercise - Generating random numbers Create a procedure TM6_GenRandNumb that generate 5000 random numbers of A normal distribution with mean 100 and standard deviation 20. An continuous uniform distribution with range 10 to 500. A binomial distribution with 100 trials and a 0.2 probability of success. A poisson distribution with mean 5. Plot the results for each distribution using TM6_PlotFreq (given). "],["mod-r-install.html", "Module 7 Setting up R 7.1 Learning outcomes 7.2 Install R and RStudio 7.3 Setup and test RStudio Cloud", " Module 7 Setting up R R is a programming language and free software environment. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. For a further overview and description of the history of R see Chapter 2 in Peng (2018). R can be run from a terminal but in general you use an IDE (integrated development environment) RStudio for running R and to saving your work. R and RStudio can either be run from your laptop or using RStudio Cloud which run R in the cloud using your browser. During this course it is recommend to use RStudio Cloud at much as possible; however, you also need to have R and RStudio installed on your laptop in case that the cloud service is down/not working. Some pros and cons of using R in the cloud vs on the laptop are Cloud (RStudio Cloud) Pros: Log in and you are ready to use R. No need to download anything. Packages easier to install. Everything can be run using a browser. Cons: There is a limit on user time and CPU time. You need to pay if need more time. Often slower than the desktop version. Need an internet connection. Risky to use at the exam if the internet connection is slow or is down. Use the laptop version instead. Laptop (R and RStudio) Pros: Can be used without any internet connection. No limit on user time and CPU usage. Good if computations takes a lot of time. Cons: You need to install R and RStudio to get started. Packages must be installed. Other needed programs may have to be installed. Updates must be installed. We are all different and you may like different learning styles compared to others. In the learning path diagram, there may be links to alternative online content. Note this is an alternative to the standard learning path that you may use instead. The learning path may also have extra content, that is not a part of syllabus, you can have a look at. Learning path diagram Click/hover the nodes to follow links and see details. 7.1 Learning outcomes By the end of this module, you are expected to have: Installed R and RStudio on your laptop. Tested R and RStudio on your laptop. Installed some packages on your laptop Signed up on RStudio Cloud and tested it. The learning outcomes relate to the overall learning goal number 5 of the course. 7.2 Install R and RStudio R is a programming language and free software environment. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. For a further overview and description of the history of R see Chapter 2 in Peng (2018). To run R you need to install it on your computer. Moreover, you need the IDE (integrated development environment) RStudio to save your work. Install R from CRAN (Comprehensive R Archive Network). Install the latest precompiled binary distribution for your operating system (use the links up at the top of the CRAN page). Install the desktop version of RStudio, a powerful user interface for R. Under Windows it is a good idea to always open R with administrator rights: Add a shortcut for RStudio (e.g. to the taskbar or desktop). Ctrl+Shift+Right-Click the shortcut and choose Properties: Choose Properties Under Shortcut click Advanced and set Run as administrator You now always can open RStudio with this shortcut. If you have a pre-existing installation of R and/or RStudio, reinstall both to the latest versions. It can be considerably harder to run old software than new. To update your R version you may use the intallr package. 7.2.1 Test your installation Do whatever is appropriate for your OS to launch RStudio. You should get a window similar to the screenshot you have here, but yours will be more boring because you have not written any code or made any figures yet. Put your cursor in the pane labeled Console, which is where you interact with the live R process. Create a simple object using code like x &lt;- 2 * 4 (followed by enter or return). Then inspect the x object by typing x followed by enter or return. You should see the value 8 print to screen. If yes, you have succeeded in installing R and RStudio. Try to open a new file File &gt; New File &gt; New RMarkdown…. Use the defaults and press OK. Next save the file and compile it using Knit (Ctrl+Shift+K). You have now compiled a document with R code embedded. 7.2.2 Add-on packages R is an extensible system and many people share useful codes they have developed as a package via CRAN or GitHub. To install a package from CRAN, for example the dplyr package for data manipulation, one way to do it is in the R console. install.packages(&quot;dplyr&quot;, dependencies = TRUE) By including dependencies = TRUE, we are being explicit and extra careful to install any additional packages the target package, dplyr in the example above is dependent on. Install the package tidyverse which is in fact a bundle of packages by running (note this operation may take a long time): install.packages(&quot;tidyverse&quot;, dependencies = TRUE) Check if you have successfully installed tidyverse by loading the package: library(tidyverse) If your install was unsuccessful try to install the packages who fails one by one. You may also see this short video explaining what packages are. 7.3 Setup and test RStudio Cloud RStudio Cloud works as your laptop version except that a workspace with projects for each module already is created. Join the Tools for Analytics workspace on RStudio Cloud (signup if you have not done it yet). Click the Projects link (in the top) and open the project 00-module-11. A personal copy of the project is loaded for you. Put your cursor in the pane labeled Console, which is where you interact with the live R process. Create a simple object using code like x &lt;- 2 * 4 (followed by enter or return). Then inspect the x object by typing x followed by enter or return. You should see the value 8 print to screen. Try to open a new file File &gt; New File &gt; New RMarkdown…. Use the defaults and press OK. Next save the file and compile it using Knit (Ctrl+Shift+K). You have now compiled a document with R code embedded. References "],["mod-r-workflow.html", "Module 8 R basics and workflows 8.1 Learning outcomes 8.2 Working with R at the command line in RStudio 8.3 Your first DataCamp course 8.4 Pipes 8.5 RStudio projects 8.6 Recap 8.7 Exercises", " Module 8 R basics and workflows This module contains an introduction to using R, the syntax, data types etc. Coding in R is, as VBA, best learnt by trying it out and learn by trial and error. Hence the modules often contains links to interactive tutorials. We are all different and you may like different learning styles compared to others. In the learning path diagram, there may be links to alternative online content. Note this is an alternative to the standard learning path that you may use instead. The learning path may also have extra content, that is not a part of syllabus, you can have a look at. 8.1 Learning outcomes By the end of this module, you are expected to have: Tried R and RStudio. Learned how the RStudio IDE works. Finished your first course on DataCamp. Solved your first exercises. The learning outcomes relate to the overall learning goals number 2, 5, 6, 8, 11, 13 and 15 of the course. 8.2 Working with R at the command line in RStudio R is a programming language and free software environment. The R language is widely used among statisticians and data miners for data analysis. To run R you need to install it on your laptop or use a cloud version. We will use R via RStudio. First time users often confuse the two. At its simplest, R is like a car’s engine while RStudio is like a car’s dashboard as illustrated in Figure 8.1. Figure 8.1: Analogy of difference between R and RStudio. More precisely, R is a programming language that runs computations, while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. So just as the way of having access to a speedometer, rearview mirrors, and a navigation system makes driving much easier, using RStudio’s interface makes using R much easier as well. RStudio can be accessed using both your laptop version or RStudio Cloud. We will assume that you are using R via RStudio Cloud if not stated otherwise. Compared to Excel, the benefit of using Excel is that the initial learning curve is quite minimal, and most analysis can be done via point-and-click on the top panel. Once a user imports their data into the program, it’s not exceedingly hard to make basic graphs and charts. R is a programming language, however, meaning the initial learning curve is steeper. It will take you some time to become familiar with the interface and master the various functions. Luckily, using R can quickly become second-nature with practice. For a detailed comparison you may see Excel vs R: A Brief Introduction to R by Jesse Sadler. Compared to VBA, R is an interpreted language; users typically access it through a command-line or script file. To run VBA you need to compile and execute it. Launch RStudio (follow this link to get to the correct project). An personal copy of the 01-module-12 project is now created for you. Consider the panes: Console (left) Environment/History (tabbed in upper right) Files/Plots/Packages/Help (tabbed in lower right) FYI: you can change the default location of the panes, among many other things: Customizing RStudio. Now that you are set up with R and RStudio, you are probably asking yourself, “OK - now how do I use R?”. The first thing to note is that unlike other software programs like Excel or SPSS that provide point-and-click interfaces, R is an interpreted language. This means you have to type in commands written in R code. In other words, you have to code/program in R. Note that we will use the terms “coding” and “programming” interchangeably. Go into the Console, where we interact with the live R process. Make an assignment and then inspect the object you just created: x &lt;- 3 * 4 x #&gt; [1] 12 All R statements where you create objects – “assignments” – have this form: object_name &lt;- value and in my head I hear, e.g., “x equals 12”. You will make lots of assignments and the operator &lt;- is a pain to type. Do not be lazy and use =, although it would work, because it will just sow confusion later. Instead, utilize RStudio’s keyboard shortcut: Alt+- (the minus sign). Note that RStudio automatically surrounds &lt;- with spaces, which demonstrates a useful code formatting practice. Give your eyes a break and use spaces. RStudio offers many handy keyboard shortcuts. Also, Alt+Shift+K brings up a keyboard shortcut reference card. Object names cannot start with a digit and cannot contain certain other characters such as a comma or a space. You are advised to adopt a naming convention; some use snake case others use camel case. Choose the naming convention you like best in your study group. But stick only to one of them. this_is_snake_case # note you do not use capital letters here thisIsCamelCase # you start each word with a capital letter Make another assignment: this_is_a_long_name &lt;- 2.5 To inspect this, try out RStudio’s completion facility: type the first few characters, press TAB, add characters until you agree, then press return. In VBA you have procedures and functions. In R we only use functions which always return an object. R has a mind-blowing collection of built-in functions that are accessed like so: function_name(arg1 = val1, arg2 = val2, ...) Let’s try function seq() which makes regular sequences of numbers and at the same time demo more helpful features of RStudio. Type se and hit TAB. A pop-up shows you possible completions. Specify seq() by typing more or use the up/down arrows to select. Note the floating tool-tip-type help that pops up, reminding you of a function’s arguments. If you want even more help, press F1 as directed to get the full documentation in the help tab of the lower right pane. Now open the parentheses and note the automatic addition of the closing parenthesis and the placement of the cursor in the middle. Type the arguments 1, 10 and hit return. seq(1, 10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 The above also demonstrates something about how R resolves function arguments. Type seq and press F1 or type: ?seq The Help tab of the lower right pane will show the help documentation of function seq with a description of usage, arguments, return value etc. Note all function arguments have names. You can always specify arguments using name = value form. But if you do not, R attempts to resolve by position. So above, it is assumed that we want a sequence from = 1 that goes to = 10. Since we did not specify step size, the default value of by in the function definition is used, which ends up being 1 in this case. Note since the default value for from is 1, the same result is obtained by typing: seq(to = 10) #&gt; [1] 1 2 3 4 5 6 7 8 9 10 Make this assignment and note similar help with quotation marks. yo &lt;- &quot;hello world&quot; If you just create an assignment, you do not see the value. You may see the value by: yo # same as print(yo) #&gt; [1] &quot;hello world&quot; print(yo) #&gt; [1] &quot;hello world&quot; Now look at your Environment tab in the upper right pane where user-defined objects accumulate. You can also get a listing of these objects with commands: objects() #&gt; [1] &quot;add_graph_legend&quot; &quot;addIconFix&quot; &quot;addIconOld&quot; &quot;addIconTasks&quot; #&gt; [5] &quot;addSolution&quot; &quot;create_learning_path&quot; &quot;ctrSol&quot; &quot;g&quot; #&gt; [9] &quot;link_excel_file&quot; &quot;link_excel_file_text&quot; &quot;link_slide_file_text&quot; &quot;strExercises&quot; #&gt; [13] &quot;strLPath&quot; &quot;this_is_a_long_name&quot; &quot;x&quot; &quot;yo&quot; ls() #&gt; [1] &quot;add_graph_legend&quot; &quot;addIconFix&quot; &quot;addIconOld&quot; &quot;addIconTasks&quot; #&gt; [5] &quot;addSolution&quot; &quot;create_learning_path&quot; &quot;ctrSol&quot; &quot;g&quot; #&gt; [9] &quot;link_excel_file&quot; &quot;link_excel_file_text&quot; &quot;link_slide_file_text&quot; &quot;strExercises&quot; #&gt; [13] &quot;strLPath&quot; &quot;this_is_a_long_name&quot; &quot;x&quot; &quot;yo&quot; If you want to remove the object named yo, you can do this: rm(yo) To remove everything: rm(list = ls()) or click the broom in RStudio’s Environment pane. 8.3 Your first DataCamp course DataCamp is an online platform for learning data science. We are going to use the platform for online tutorials. First, sign up to the organization Tools for analytics at DataCamp using your university e-mail here (IMPORTANT do this before running the course/tutorial below!). DataCamp runs all the courses in your browser. That is, R is run on a server and you do not use RStudio here. The first course gives an Introduction to R. You are expected to have completed the course before continuing this module! 8.4 Pipes Most functions support the pipe operator which is a powerful tool for clearly expressing a sequence of multiple operations. The pipe operator %&gt;%, comes from the magrittr package and is loaded automatically when you load tidyverse. You may use the RStudio keyboard shortcut Ctrl+Shift+M. Consider the following code: # calculate x as a sequence of operations x &lt;- 16 x &lt;- sqrt(x) x &lt;- log2(x) x #&gt; [1] 2 # same as y &lt;- log2(sqrt(16)) y #&gt; [1] 2 Note we here calculate x using a sequence of operations: \\[ \\mbox{original data (x)} \\rightarrow \\mbox{ sqrt } \\rightarrow \\mbox{ log2 }. \\] That is, we take what is left of the arrow (the object x) and put it into the function on the right of the arrow. These operations can be done using the pipe operator: library(tidyverse) x &lt;- 16 x &lt;- x %&gt;% sqrt() %&gt;% log2() x #&gt; [1] 2 In general, the pipe sends the result of the left side of the pipe to be the first argument of the function on the right side of the pipe. That is, you may have other arguments in your functions: 16 %&gt;% sqrt() %&gt;% log2() #&gt; [1] 2 16 %&gt;% sqrt() %&gt;% log(base = 2) # equivalent #&gt; [1] 2 The above example is simple but illustrates that you can use pipes to skip intermediate assignment operations. Later you will do more complex pipes when we consider data wrangling. For instance, mtcars %&gt;% select(cyl, gear, hp, mpg) %&gt;% filter(gear == 4, cyl == 4) #&gt; cyl gear hp mpg #&gt; Datsun 710 4 4 93 22.8 #&gt; Merc 240D 4 4 62 24.4 #&gt; Merc 230 4 4 95 22.8 #&gt; Fiat 128 4 4 66 32.4 #&gt; Honda Civic 4 4 52 30.4 #&gt; Toyota Corolla 4 4 65 33.9 #&gt; Fiat X1-9 4 4 66 27.3 #&gt; Volvo 142E 4 4 109 21.4 selects the columns related to cylinders, gears, horse power and miles, and then rows with cars having four cylinders and gears. For a more detailed introduction to pipes see Chapter 18 in Wickham (2017). 8.5 RStudio projects One day you will need to quit R, do something else and return to your analysis later. One day you will have multiple analyses going that use R and you want to keep them separate. One day you will need to bring data from the outside world into R and send numerical results and figures from R back out into the world. To handle these real life situations, you need to store your work in a project that keeps all the files associated with a project organized together (such as input data, R scripts, analytical results and figures). RStudio has built-in support for this via its [projects][rstudio-using-projects]. You may think of a project as a folder where you store all you work. On RStudio Cloud you create a project inside a workspace. Projects have already been made for most modules. However, let us try to create a project in your Your Workspace workspace. Expand the left menu and select your Your Workspace workspace. Press the New Project button and select New RStudio Project. The project is now created and you can rename it in the upper left corner. Go back to the project 01-module-12 in the Tools for Analytics workspace that we will use for the remaining of the module. For RStudio on your laptop you create a project for the rest of this module by doing this: File &gt; New Project… &gt; New Directory &gt; New Project &gt;. The directory name you choose here will be the project name. Call it whatever you want (or follow me for convenience). I used tfa_testing in my tmp directory (that is tfa_testing is now a subfolder of tmp. You now need a way to store R code in your project. We will use 2 ways of storing your code. An R script file or an R Markdown document. Normally you store lines of R code in a script file that you need to run. R Markdown provides an easy way to produce a rich, fully-documented reproducible analysis. Here you combine text, figures and metadata needed to reproduce the analysis from the beginning to the end in a single file. R Markdown compiles to nicely formatted HTML, PDF, or Word. We are going to use R Markdown for larger projects (e.g. the mandatory R report). We will come back to R Markdown later. 8.5.1 Storing your code in a script file R code can be stored in a script file with file suffix .R. A script file contains a line for each R command to run (think of each line as a command added to the console). Create a new script file File &gt; New File &gt; R Script. Let us add some R code to the file: # this is a comment a &lt;- 2 b &lt;- -3 sig_sq &lt;- 0.5 x &lt;- runif(40) y &lt;- a + b * x + rnorm(40, sd = sqrt(sig_sq)) (avg_x &lt;- mean(x)) write(avg_x, &quot;avg_x.txt&quot;) plot(x, y) abline(a, b, col = &quot;purple&quot;) dev.print(pdf, &quot;toy_line_plot.pdf&quot;) Save the file as testing.R Now run each line by setting the cursor at the first line, hit Ctrl+Enter (runs the line in the Console and moves the cursor to the next line). Repeat Ctrl+Enter until you have run all the lines. Alternatively you may select all the code and hit Ctrl+Enter. Change some things in your code. For instance set a sample size n at the top, e.g. n &lt;- 40, and then replace all the hard-wired 40’s with n. Change some other minor, but detectable, stuff, e.g. alter the sample size n, the slope of the line b, the color of the line etc. Practice the different ways to rerun the code: Walk through line by line by keyboard shortcut (Ctrl+Enter) or mouse (click “Run” in the upper right corner of editor pane). Source the entire document by entering source('testing.R') in the Console or use keyboard shortcut (Shift+Ctrl+S) or mouse (click “Source” in the upper right corner of editor pane or select from the mini-menu accessible from the associated down triangle). Source with echo from the Source mini-menu. Try to get an overview of the different planes and tabs. For instance in the Files tab (lower right plane) you can get an overview of your project files. You may also see this video about projects. 8.6 Recap R is a programming language that runs computations, while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. Adopt a naming convention. Either use snake case or use camel case. Choose the naming convention you like best in your study group. But stick only to one of them. Store your work in a project that keeps all the files associated with a project organized together (such as input data, R scripts, analytical results and figures). You may think of a project as a folder where you store all your work. This workflow will serve you well in the future: Create an RStudio project for an analytical project (a project for most modules is already created in RStudio Cloud) Keep inputs there (we will soon talk about importing) Keep scripts there; edit them, run them in bits or as a whole from there Keep outputs there (like the PDF written above) Avoid using the mouse for pieces of your analytical workflow, such as loading a dataset or saving a figure. This is extremely important for the reproducibility and for making it possible to retrospectively determine how a numerical table or PDF was actually produced. Learn and use shortcuts as much as possible. For instance Alt+- for the assignment operator and Ctrl+Shift+M for the pipe operator. A reference card of shortcuts can be seen using Alt+Shift+K. Store your R commands in a script file and R scripts with a .R suffix. Comments start with one or more # symbols. Use them. RStudio helps you (de)comment selected lines with Ctrl+Shift+C (Windows and Linux) or Cmd+Shift+C (Mac). Values saved in R are stored in Objects. The interactive DataCamp course gave an introduction to some basic programming concepts and terminology: Data types: integers, doubles/numerics, logicals, and characters. Integers are values like -1, 0, 2, 4092. Doubles or numerics are a larger set of values containing both the integers but also fractions and decimal values like -24.932 and 0.8. Logicals are either TRUE or FALSE while characters are text such as “Hamilton”, “The Wire is the greatest TV show ever”, and “This ramen is delicious.” Note that characters are often denoted with the quotation marks around them. Vectors: a series of values. These are created using the c() function, where c() stands for “combine” or “concatenate.” For example, c(6, 11, 13, 31, 90, 92) creates a six element series of positive integer values . Factors: categorical data are commonly represented in R as factors. Categorical data can also be represented as strings. Data frames: rectangular spreadsheets. They are representations of datasets in R where the rows correspond to observations and the columns correspond to variables that describe the observations. Lists are general containers that can be used to store a set of different objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way. Comparison operators known to R are: &lt; for less than, &gt; for greater than, &lt;= for less than or equal to, &gt;= for greater than or equal to, == for equal to each other (and not = which is typically used for assignment!), != not equal to each other. A pipe (%&gt;%) sends the result of the left side of the pipe to be the first argument of the function on the right side of the pipe. Use pipes if you have many intermediate assignment operations. You may also have a look at the slides for this module. 8.7 Exercises Below you will find a set of exercises. Always have a look at the exercises before you meet in your study group and try to solve them yourself. Are you stuck, see the help page. Some of the solutions to each exercise can be seen by pressing the button at each question. Beware, you will not learn by giving up too early. Put some effort into finding a solution! Practice using shortcuts in RStudio (use Shift+Alt+K to get an overview). Link to the project on RStudio Cloud for this module. 8.7.1 Exercise (group work) You are not expected to start solving this exercise before you meet in your group. You have all been allocated into groups. During the course, you are expected to solve the R exercises in these groups. Before you start, it is a good idea to agree on a set of group rules: It is a good idea to have a shared place for your code. Have a look at the section Working in groups and decide on a place to share your code. Create a shared folder and project for your group. Agree on a coding convention. 8.7.2 Exercise (piping) Solve this exercise using a script file (e.g. exercises/pipe.R which already has been created). Remember that you can run a line in the file using Ctrl+Enter. The pipe %&gt;% can be used to perform operations sequentially without having to define intermediate objects (Ctrl+Shift+M). Have a look at the dataset mtcars: head(mtcars) ?mtcars The pipe library(tidyverse) mtcars %&gt;% select(cyl, gear, hp, mpg) %&gt;% filter(gear == 4 &amp; cyl == 4) #&gt; cyl gear hp mpg #&gt; Datsun 710 4 4 93 22.8 #&gt; Merc 240D 4 4 62 24.4 #&gt; Merc 230 4 4 95 22.8 #&gt; Fiat 128 4 4 66 32.4 #&gt; Honda Civic 4 4 52 30.4 #&gt; Toyota Corolla 4 4 65 33.9 #&gt; Fiat X1-9 4 4 66 27.3 #&gt; Volvo 142E 4 4 109 21.4 selects the columns related to cylinders, gears, horse power and miles, and then rows with cars having four cylinders and (operator &amp;) gears. × Solution mtcars %&gt;% select(mpg, hp, am, gear) #&gt; mpg hp am gear #&gt; Mazda RX4 21.0 110 1 4 #&gt; Mazda RX4 Wag 21.0 110 1 4 #&gt; Datsun 710 22.8 93 1 4 #&gt; Hornet 4 Drive 21.4 110 0 3 #&gt; Hornet Sportabout 18.7 175 0 3 #&gt; Valiant 18.1 105 0 3 #&gt; Duster 360 14.3 245 0 3 #&gt; Merc 240D 24.4 62 0 4 #&gt; Merc 230 22.8 95 0 4 #&gt; Merc 280 19.2 123 0 4 #&gt; Merc 280C 17.8 123 0 4 #&gt; Merc 450SE 16.4 180 0 3 #&gt; Merc 450SL 17.3 180 0 3 #&gt; Merc 450SLC 15.2 180 0 3 #&gt; Cadillac Fleetwood 10.4 205 0 3 #&gt; Lincoln Continental 10.4 215 0 3 #&gt; Chrysler Imperial 14.7 230 0 3 #&gt; Fiat 128 32.4 66 1 4 #&gt; Honda Civic 30.4 52 1 4 #&gt; Toyota Corolla 33.9 65 1 4 #&gt; Toyota Corona 21.5 97 0 3 #&gt; Dodge Challenger 15.5 150 0 3 #&gt; AMC Javelin 15.2 150 0 3 #&gt; Camaro Z28 13.3 245 0 3 #&gt; Pontiac Firebird 19.2 175 0 3 #&gt; Fiat X1-9 27.3 66 1 4 #&gt; Porsche 914-2 26.0 91 1 5 #&gt; Lotus Europa 30.4 113 1 5 #&gt; Ford Pantera L 15.8 264 1 5 #&gt; Ferrari Dino 19.7 175 1 5 #&gt; Maserati Bora 15.0 335 1 5 #&gt; Volvo 142E 21.4 109 1 4 Close Solution × Hint mtcars %&gt;% select(___, ___, ___, ___) Close Hint Create a pipe that selects columns related to miles, horsepower, transmission and gears. × Solution mtcars %&gt;% select(mpg, hp, am, gear) %&gt;% filter(mpg &lt; 20, gear == 4) #&gt; mpg hp am gear #&gt; Merc 280 19.2 123 0 4 #&gt; Merc 280C 17.8 123 0 4 Close Solution × Hint mtcars %&gt;% select(mpg, hp, am, gear) %&gt;% filter(___, ___) Close Hint Given the answer in 1), filter so cars have miles less than 20 and 4 gears. × Solution mtcars %&gt;% select(mpg, hp, am, gear) %&gt;% filter(mpg &lt; 20 | gear == 4) #&gt; mpg hp am gear #&gt; Mazda RX4 21.0 110 1 4 #&gt; Mazda RX4 Wag 21.0 110 1 4 #&gt; Datsun 710 22.8 93 1 4 #&gt; Hornet Sportabout 18.7 175 0 3 #&gt; Valiant 18.1 105 0 3 #&gt; Duster 360 14.3 245 0 3 #&gt; Merc 240D 24.4 62 0 4 #&gt; Merc 230 22.8 95 0 4 #&gt; Merc 280 19.2 123 0 4 #&gt; Merc 280C 17.8 123 0 4 #&gt; Merc 450SE 16.4 180 0 3 #&gt; Merc 450SL 17.3 180 0 3 #&gt; Merc 450SLC 15.2 180 0 3 #&gt; Cadillac Fleetwood 10.4 205 0 3 #&gt; Lincoln Continental 10.4 215 0 3 #&gt; Chrysler Imperial 14.7 230 0 3 #&gt; Fiat 128 32.4 66 1 4 #&gt; Honda Civic 30.4 52 1 4 #&gt; Toyota Corolla 33.9 65 1 4 #&gt; Dodge Challenger 15.5 150 0 3 #&gt; AMC Javelin 15.2 150 0 3 #&gt; Camaro Z28 13.3 245 0 3 #&gt; Pontiac Firebird 19.2 175 0 3 #&gt; Fiat X1-9 27.3 66 1 4 #&gt; Ford Pantera L 15.8 264 1 5 #&gt; Ferrari Dino 19.7 175 1 5 #&gt; Maserati Bora 15.0 335 1 5 #&gt; Volvo 142E 21.4 109 1 4 Close Solution × Hint mtcars %&gt;% select(mpg, hp, am, gear) %&gt;% filter(___ | ___) Close Hint Given the answer in 1), filter so cars have miles less than 20 or 4 gears. The “or” operator in R is |. × Solution mtcars %&gt;% filter(mpg &lt; 20, gear == 4) %&gt;% select(wt, vs) #&gt; wt vs #&gt; Merc 280 3.44 1 #&gt; Merc 280C 3.44 1 Close Solution × Hint mtcars %&gt;% filter(mpg &lt; 20, gear == 4) %&gt;% select(___, ___) Close Hint Create a pipe that filters the cars having miles less than 20 and 4 gears and selects columns related to weight and engine. × Solution dat &lt;- mtcars dat &lt;- filter(dat, mpg &lt; 20, gear == 4) dat &lt;- select(dat, wt, vs) dat #&gt; wt vs #&gt; Merc 280 3.44 1 #&gt; Merc 280C 3.44 1 Close Solution × Hint dat &lt;- mtcars dat &lt;- filter(dat, ___) dat &lt;- select(dat, ___) dat Close Hint Solve Question 4 without the pipe operator. 8.7.3 Exercise (working dir) Do this exercise from the Console in RStudio. When reading and writing to local files, your working directory becomes important. You can get and set the working directory using functions getwd and setwd. Set the working directory to the project directory using the menu: Session &gt; Set Working Directory &gt; To Project Directory. Now let us create some files: library(tidyverse) dir.create(&quot;subfolder&quot;, showWarnings = FALSE) write_file(&quot;Some text in a file&quot;, file = &quot;test1.txt&quot;) write_file(&quot;Some other text in a file&quot;, file = &quot;subfolder/test2.txt&quot;) Which folders and files have been created? You may have a look in the Files tab in RStudio. We can read the file again using: read_file(&quot;test1.txt&quot;) × Solution read_file(&quot;subfolder/test2.txt&quot;) Close Solution × Hint read_file(&quot;subfolder/___&quot;) Close Hint Read the file test2.txt. Set the working directory to subfolder using function setwd. Note that setwd supports relative paths. Check that you are in the right working directory using getwd. You may also have a look at the files in the directory using function list.files. × Solution setwd(&quot;subfolder&quot;) # done in Q3 read_file(&quot;../test1.txt&quot;) read_file(&quot;test2.txt&quot;) Close Solution × Hint setwd(&quot;subfolder&quot;) # done in Q3 read_file(&quot;../___&quot;) read_file(&quot;___&quot;) Close Hint Read files test1.txt and test2.txt. Note that in relative paths ../ means going to the parent folder. What is different compared to Question 2? 8.7.4 Exercise (vectors) Solve this exercise using a script file. × Solution n &lt;- 100 n * (n+1) / 2 #&gt; [1] 5050 Close Solution What is the sum of the first 100 positive integers? The formula for the sum of integers \\(1\\) through \\(n\\) is \\(n(n+1)/2\\). Define \\(n=100\\) and then use R to compute the sum of \\(1\\) through \\(100\\) using the formula. What is the sum? × Solution n &lt;- 1000 n * (n+1) / 2 #&gt; [1] 5e+05 Close Solution Now use the same formula to compute the sum of the integers from 1 through 1000. × Solution The answer is b). Close Solution Look at the result of typing the following code into R: n &lt;- 1000 x &lt;- seq(1, n) sum(x) Based on the result, what do you think the functions seq and sum do? You can use e.g help(\"sum\") or ?sum. sum creates a list of numbers and seq adds them up. seq creates a list of numbers and sum adds them up. seq creates a random list and sum computes the sum of 1 through 1,000. sum always returns the same number. × Solution Sample 30 integers in the range [1, 100]. Close Solution Run code. What does sample.int do (try running ?sample.int)? set.seed(123) v &lt;- sample.int(100,30) v #&gt; [1] 31 79 51 14 67 42 50 43 97 25 90 69 57 9 72 26 7 95 87 36 78 93 76 15 32 84 82 41 23 27 × Solution sum(v) #&gt; [1] 1598 mean(v) #&gt; [1] 53.3 sd(v) #&gt; [1] 28.8 Close Solution What is the sum, mean, and standard deviation of v? × Solution v[c(1, 6, 4, 15)] #&gt; [1] 31 42 14 72 Close Solution × Hint v[c(1, ___, ___, ___)] Close Hint Select elements 1, 6, 4, and 15 of v. × Solution v[v &gt; 50] #&gt; [1] 79 51 67 97 90 69 57 72 95 87 78 93 76 84 82 Close Solution Select elements with value above 50. × Solution v[v &gt; 75 | v &lt; 25] #&gt; [1] 79 14 97 90 9 7 95 87 78 93 76 15 84 82 23 Close Solution × Hint v[___ | ___] Close Hint Select elements with value above 75 or below 25. × Solution v[v == 43] #&gt; [1] 43 Close Solution Select elements with value 43. × Solution v[is.na(v)] #&gt; integer(0) Close Solution × Hint v[is.na(___)] Close Hint Select elements with value NA. × Solution which(v &gt; 75 | v &lt; 25) #&gt; [1] 2 4 9 11 14 17 18 19 21 22 23 24 26 27 29 Close Solution × Hint which(___ | ___) Close Hint Which elements have value above 75 or below 25? Hint: see the documentation of function which (?which). 8.7.5 Exercise (matrices) Solve this exercise using a script file. Consider matrices m1 &lt;- matrix(c(37, 8, 51, NA, 50, 97, 86, NA, 84, 46, 17, 62L), nrow = 3) m2 &lt;- matrix(c(37, 8, 51, NA, 50, 97, 86, NA, 84, 46, 17, 62L), nrow = 3, byrow = TRUE) m3 &lt;- matrix(c(37, 8, 51, NA, 50, 97, 86, NA, 84, 46, 17, 62L), ncol = 3) What is the difference between the three matrices (think/discuss before running the code). × Solution rowSums(m1, na.rm = T) #&gt; [1] 169 75 294 colSums(m2, na.rm = T) #&gt; [1] 171 151 154 62 Close Solution × Hint rowSums(___, na.rm = ___) colSums(___, na.rm = ___) Close Hint Calculate the row sums of m1 and column sums of m2 ignoring NA values. Hint: have a look at the documentation of rowSums. × Solution rbind(m1, c(1, 2, 3, 4)) #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 37 NA 86 46 #&gt; [2,] 8 50 NA 17 #&gt; [3,] 51 97 84 62 #&gt; [4,] 1 2 3 4 Close Solution × Hint rbind(___, ___) Close Hint Add row c(1, 2, 3, 4) as last row to m1. × Solution rbind(c(1, 2, 3, 4), m1) #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 1 2 3 4 #&gt; [2,] 37 NA 86 46 #&gt; [3,] 8 50 NA 17 #&gt; [4,] 51 97 84 62 Close Solution × Hint rbind(___, ___) Close Hint Add row c(1, 2, 3, 4) as first row to m1. × Solution cbind(m3, c(1, 2, 3, 4)) #&gt; [,1] [,2] [,3] [,4] #&gt; [1,] 37 50 84 1 #&gt; [2,] 8 97 46 2 #&gt; [3,] 51 86 17 3 #&gt; [4,] NA NA 62 4 Close Solution × Hint cbind(___, ___) Close Hint Add column c(1, 2, 3, 4) as last column to m3. × Solution m1[2,4] #&gt; [1] 17 Close Solution Select the element in row 2 and column 4 of m1. × Solution m1[2:3,1:2] #&gt; [,1] [,2] #&gt; [1,] 8 50 #&gt; [2,] 51 97 Close Solution × Hint m1[2:3,___] Close Hint Select elements in rows 2-3 and columns 1-2 of m1. × Solution m1[3, c(1,3,4)] #&gt; [1] 51 84 62 Close Solution × Hint m1[3,___] Close Hint Select elements in row 3 and columns 1, 3 and 4 of m1. × Solution m1[3,] #&gt; [1] 51 97 84 62 Close Solution Select elements in row 3 of m1. × Solution m2[is.na(m2)] #&gt; [1] NA NA Close Solution × Hint m2[is.na(___)] Close Hint Select all NA elements in m2. × Solution m2[m2 &gt; 50] #&gt; [1] 84 97 51 86 NA NA 62 Close Solution Select all elements greater that 50 in m2. 8.7.6 Exercise (data frames) Solve this exercise using a script file. Data frames may be seen as cell blocks in Excel. They are representations of datasets in R where the rows correspond to observations and the columns correspond to variables that describe the observations. We consider the data frame mtcars: str(mtcars) glimpse(mtcars) ?mtcars Use the head and tail functions to have a look at the data. × Solution mtcars[,4] #&gt; [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 65 97 150 150 245 #&gt; [25] 175 66 91 113 264 175 335 109 mtcars[,&quot;hp&quot;] #&gt; [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 65 97 150 150 245 #&gt; [25] 175 66 91 113 264 175 335 109 mtcars$hp #&gt; [1] 110 110 93 110 175 105 245 62 95 123 123 180 180 180 205 215 230 66 52 65 97 150 150 245 #&gt; [25] 175 66 91 113 264 175 335 109 Close Solution × Hint mtcars[,___] mtcars[,&quot;___&quot;] mtcars$___ Close Hint Select column hp using index (column 4), its name, and the $ operator. × Solution mtcars &lt;- rbind(mtcars, c(34, 3, 87, 112, 4.5, 1.515, 167, 1, 1, 5, 3)) rownames(mtcars)[33] &lt;- &quot;Phantom XE&quot; Close Solution × Hint mtcars &lt;- rbind(mtcars, ___) rownames(mtcars)[___] &lt;- &quot;Phantom XE&quot; Close Hint Update mtcars by adding row c(34, 3, 87, 112, 4.5, 1.515, 167, 1, 1, 5, 3). Name the row ‘Phantom XE’. × Solution col &lt;- c(NA, &quot;green&quot;, &quot;blue&quot;, &quot;red&quot;, NA, &quot;blue&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;red&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;red&quot;, &quot;red&quot;, NA, NA, &quot;red&quot;, &quot;green&quot;, &quot;red&quot;, &quot;red&quot;, NA, &quot;green&quot;, NA, &quot;blue&quot;, &quot;green&quot;, &quot;green&quot;, &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, NA) mtcars &lt;- cbind(mtcars, col) class(mtcars$col) #&gt; [1] &quot;character&quot; Close Solution × Hint col &lt;- c(NA, &quot;green&quot;, ......) mtcars &lt;- cbind(mtcars, ___) class(mtcars$___) Close Hint Update mtcars by adding column: col &lt;- c(NA, &quot;green&quot;, &quot;blue&quot;, &quot;red&quot;, NA, &quot;blue&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;red&quot;, &quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;red&quot;, &quot;red&quot;, NA, NA, &quot;red&quot;, &quot;green&quot;, &quot;red&quot;, &quot;red&quot;, NA, &quot;green&quot;, NA, &quot;blue&quot;, &quot;green&quot;, &quot;green&quot;, &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, NA) What class is column col? × Solution mtcars[mtcars$vs == 0,] #&gt; mpg cyl disp hp drat wt qsec vs am gear carb col #&gt; Mazda RX4 21.0 6 160 110 3.90 2.62 16.5 0 1 4 4 &lt;NA&gt; #&gt; Mazda RX4 Wag 21.0 6 160 110 3.90 2.88 17.0 0 1 4 4 green #&gt; Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 &lt;NA&gt; #&gt; Duster 360 14.3 8 360 245 3.21 3.57 15.8 0 0 3 4 green #&gt; Merc 450SE 16.4 8 276 180 3.07 4.07 17.4 0 0 3 3 green #&gt; Merc 450SL 17.3 8 276 180 3.07 3.73 17.6 0 0 3 3 blue #&gt; Merc 450SLC 15.2 8 276 180 3.07 3.78 18.0 0 0 3 3 blue #&gt; Cadillac Fleetwood 10.4 8 472 205 2.93 5.25 18.0 0 0 3 4 green #&gt; Lincoln Continental 10.4 8 460 215 3.00 5.42 17.8 0 0 3 4 red #&gt; Chrysler Imperial 14.7 8 440 230 3.23 5.34 17.4 0 0 3 4 red #&gt; Dodge Challenger 15.5 8 318 150 2.76 3.52 16.9 0 0 3 2 red #&gt; AMC Javelin 15.2 8 304 150 3.15 3.44 17.3 0 0 3 2 red #&gt; Camaro Z28 13.3 8 350 245 3.73 3.84 15.4 0 0 3 4 &lt;NA&gt; #&gt; Pontiac Firebird 19.2 8 400 175 3.08 3.85 17.1 0 0 3 2 green #&gt; Porsche 914-2 26.0 4 120 91 4.43 2.14 16.7 0 1 5 2 blue #&gt; Ford Pantera L 15.8 8 351 264 4.22 3.17 14.5 0 1 5 4 green #&gt; Ferrari Dino 19.7 6 145 175 3.62 2.77 15.5 0 1 5 6 red #&gt; Maserati Bora 15.0 8 301 335 3.54 3.57 14.6 0 1 5 8 green Close Solution × Hint mtcars[mtcars$___ == 0,] Close Hint Select cars with a V-shaped engine. 8.7.7 Exercise (lists) Solve this exercise using a script file. Lists are general containers that can be used to store a set of different objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. Let us define a list: lst &lt;- list(45, &quot;Lars&quot;, TRUE, 80.5) lst #&gt; [[1]] #&gt; [1] 45 #&gt; #&gt; [[2]] #&gt; [1] &quot;Lars&quot; #&gt; #&gt; [[3]] #&gt; [1] TRUE #&gt; #&gt; [[4]] #&gt; [1] 80.5 Elements can be accessed using brackets: x &lt;- lst[2] x #&gt; [[1]] #&gt; [1] &quot;Lars&quot; y &lt;- lst[[2]] y #&gt; [1] &quot;Lars&quot; × Solution class(x) #&gt; [1] &quot;list&quot; class(y) #&gt; [1] &quot;character&quot; Close Solution × Hint class(___) class(___) Close Hint What is the class of the two objects x and y? What is the difference between using one or two brackets? × Solution names(lst) &lt;- c(&quot;age&quot;, &quot;name&quot;, &quot;male&quot;, &quot;weight&quot;) lst #&gt; $age #&gt; [1] 45 #&gt; #&gt; $name #&gt; [1] &quot;Lars&quot; #&gt; #&gt; $male #&gt; [1] TRUE #&gt; #&gt; $weight #&gt; [1] 80.5 Close Solution × Hint names(lst) &lt;- c(&quot;age&quot;, ___, ___, ___) lst Close Hint Add names age, name, male and weight to the 4 components of the list. × Solution lst$name #&gt; [1] &quot;Lars&quot; Close Solution Extract the name component using the $ operator. You can add/change/remove components using: lst$height &lt;- 173 # add component lst$name &lt;- list(first = &quot;Lars&quot;, last = &quot;Nielsen&quot;) # change the name component lst$male &lt;- NULL # remove male component lst #&gt; $age #&gt; [1] 45 #&gt; #&gt; $name #&gt; $name$first #&gt; [1] &quot;Lars&quot; #&gt; #&gt; $name$last #&gt; [1] &quot;Nielsen&quot; #&gt; #&gt; #&gt; $weight #&gt; [1] 80.5 #&gt; #&gt; $height #&gt; [1] 173 × Solution lst$name$last #&gt; [1] &quot;Nielsen&quot; Close Solution × Hint lst$name$___ Close Hint Extract the last name component using the $ operator. 8.7.8 Exercise (string management) Strings in R can be defined using single or double quotes: str1 &lt;- &quot;Business Analytics (BA) refers to the scientific process of transforming data into insight for making better decisions in business.&quot; str2 &lt;- &#39;BA can both be seen as the complete decision making process for solving a business problem or as a set of methodologies that enable the creation of business value.&#39; str3 &lt;- c(str1, str2) # vector of strings The stringr package in tidyverse provides many useful functions for string manipulation. We will consider a few. str4 &lt;- str_c(str1, str2, &quot;As a process it can be characterized by descriptive, predictive, and prescriptive model building using data sources.&quot;, sep = &quot; &quot;) # join strings str4 #&gt; [1] &quot;Business Analytics (BA) refers to the scientific process of transforming data into insight for making better decisions in business. BA can both be seen as the complete decision making process for solving a business problem or as a set of methodologies that enable the creation of business value. As a process it can be characterized by descriptive, predictive, and prescriptive model building using data sources.&quot; str_c(str3, collapse = &quot; &quot;) # collapse vector to a string #&gt; [1] &quot;Business Analytics (BA) refers to the scientific process of transforming data into insight for making better decisions in business. BA can both be seen as the complete decision making process for solving a business problem or as a set of methodologies that enable the creation of business value.&quot; str_replace(str2, &quot;BA&quot;, &quot;Business Analytics&quot;) # replace first occurrence #&gt; [1] &quot;Business Analytics can both be seen as the complete decision making process for solving a business problem or as a set of methodologies that enable the creation of business value.&quot; str_replace_all(str2, &quot;the&quot;, &quot;a&quot;) # replace all occurrences #&gt; [1] &quot;BA can both be seen as a complete decision making process for solving a business problem or as a set of methodologies that enable a creation of business value.&quot; str_remove(str1, &quot; for making better decisions in business&quot;) #&gt; [1] &quot;Business Analytics (BA) refers to the scientific process of transforming data into insight.&quot; str_detect(str2, &quot;BA&quot;) # detect a pattern #&gt; [1] TRUE × Solution str_detect(str1, &quot;Business&quot;) #&gt; [1] TRUE str_detect(str2, &quot;Business&quot;) #&gt; [1] FALSE Close Solution × Hint str_detect(str1, ___) str_detect(___, ___) Close Hint Is Business (case sensitive) contained in str1 and str2? × Solution str5 &lt;- str_replace(str2, &quot;BA&quot;, &quot;Business Analytics&quot;) str5 #&gt; [1] &quot;Business Analytics can both be seen as the complete decision making process for solving a business problem or as a set of methodologies that enable the creation of business value.&quot; Close Solution × Hint str5 &lt;- str_replace(str2, ___, ___) Close Hint Define a new string that replace BA with Business Analytics in str2 × Solution str5 &lt;- str_remove(str5, &quot; or as a set of methodologies that enable the creation of business value&quot;) str5 #&gt; [1] &quot;Business Analytics can both be seen as the complete decision making process for solving a business problem.&quot; Close Solution × Hint str5 &lt;- str_remove(str5, ___) Close Hint In the string from Question 2, remove or as a set of methodologies that enable the creation of business value. × Solution str5 &lt;- str_c(str5, &quot;This course will focus on programming and descriptive analytics.&quot;, sep= &quot; &quot;) str5 #&gt; [1] &quot;Business Analytics can both be seen as the complete decision making process for solving a business problem. This course will focus on programming and descriptive analytics.&quot; Close Solution × Hint str5 &lt;- str_c(str5, ___, sep= ___) Close Hint In the string from Question 3, add This course will focus on programming and descriptive analytics.. × Solution str5 &lt;- str_replace(str5, &quot;analytics&quot;, &quot;business analytics&quot;) str5 #&gt; [1] &quot;Business Analytics can both be seen as the complete decision making process for solving a business problem. This course will focus on programming and descriptive business analytics.&quot; Close Solution × Hint str5 &lt;- str_replace(str5, ___, ___) Close Hint In the string from Question 4, replace analytics with business analytics. × Solution str_replace(str2, &quot;BA&quot;, &quot;Business Analytics&quot;) %&gt;% str_remove(&quot; or as a set of methodologies that enable the creation of business value&quot;) %&gt;% str_c(&quot;This course will focus on programming and descriptive analytics.&quot;, sep= &quot; &quot;) %&gt;% str_replace(&quot;analytics&quot;, &quot;business analytics&quot;) #&gt; [1] &quot;Business Analytics can both be seen as the complete decision making process for solving a business problem. This course will focus on programming and descriptive business analytics.&quot; Close Solution × Hint str_replace(str2, ___, ___) %&gt;% str_remove(___) %&gt;% str_c(___) %&gt;% str_replace(___) Close Hint Do all calculations in Question 2-5 using pipes. References "],["groups.html", "A Working in groups Joint R project structure Using Git together with GitHub", " A Working in groups During the course you have been allocated into groups. You are expected to solve the exercises and write the project reports in these groups. Before you start, it is a good idea to agree on a set of group rules. First, agree on a coding convention. Most people in the R community use snake case but camel case is also okay. Next, setup rules on when to meet and how you will organize the work. For instance, it is a good idea that all try to solve some of the exercises before you meet and you then discuss the answers, problems etc. Finally, it is a good idea to have a common place for your code. You have different options: Use a cloud storage services such as Dropbox, OneDrive or Google Drive. Use a version control system such as Git together with GitHub. GitHub is a code sharing and publishing service and may be seen as a social networking site for programmers. If you use RStudio Cloud then one person in the group can create a shared workspace with projects: First create a new workspace named e.g. Shared. Press Members and add the group members as moderators. Now go back to Projects in the Tools for Analytics workspace and move one project to the shared workspace. Rename it to e.g. Group Project. Members will now have access to this project where you can share code. NOTE you can not work collectively on a file simultaneously. That is, only one member can change a file at a time! Hence it is a good idea to have your own private project to work on and use this project as a place where you can share code. If you want to download a project to your laptop then press the export button. The benefit of a cloud storage service is that it is well known to you and easy to setup. Cons are that you cannot work on the same file simultaneously. The benefit of Git and GitHub is that it manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids. Here you can work on files simultaneously. Moreover, it can be used from within RStudio. Cons are that it is harder to setup and learn. For a detailed description see Why Git? Why GitHub?. I recommend that you use Git and GitHub. However, if you find the learning curve to high just use a cloud storage service. The Using Git together with GitHub section gives a tutorial on how to setup Git and GitHub. Skip it if you use a cloud storage service. Joint R project structure I suggest to have an R project with subfolders joint, [student1 name], [student2 name], …, [student5 name]. Student folders contain files only a single student work on (good when you do some exercises before class). Folder joint contains joint work. That could for instance be a joint answer of an exercise (based on the work you did in the student folders) and a sub-folder with the project report. Using Git together with GitHub Git is a version control system. Git manages the evolution of a set of files – called a repository – in a sane, highly structured way. If you have no idea what I’m talking about, think of it as the “Track Changes” features from Microsoft Word on steroids. GitHub provide a home for your Git-based projects on the internet. If you have no idea what I’m talking about, think of it as DropBox but much, much better. It allows other people to see your stuff, sync up with you, and perhaps even make changes. Even for private solo projects, it’s a good idea to push your work to a remote location for peace of mind. To configure your computer go though the following steps: Register a free GitHub account Sign-up at GitHub. Some thoughts about your username: Incorporate your actual name! People like to know who they’re dealing with. Also makes your username easier for people to guess or remember. Reuse your username from other contexts, e.g., Twitter or Slack. But, of course, someone with no GitHub activity will probably be squatting on that. Pick a username you will be comfortable revealing to your future boss. Shorter is better than longer. Be as unique as possible in as few characters as possible. In some settings GitHub auto-completes or suggests usernames. Make it timeless. Don’t highlight your current university, employer, or place of residence, e.g. JennyFromTheBlock. Avoid the use of upper vs. lower case to separate words. We highly recommend all lowercase. GitHub treats usernames in a case insensitive way, but using all lowercase is kinder to people doing downstream regular expression work with usernames, in various languages. A better strategy for word separation is to use a hyphen - or underscore _. Install Git Find installation instructions below for your operating system. Windows Install Git from the web. Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. Unless you have specific reasons to otherwise, follow this convention. If asked about “Adjusting your PATH environment”, make sure to select “Git from the command line and also from 3rd-party software”. macOS Option 1 (highly recommended): Install the Xcode command line tools (not all of Xcode), which includes Git. Go to the shell and enter one of these commands to elicit an offer to install developer command line tools: git --version git config Accept the offer! Click on “Install”. Here’s another way to request this installation, more directly: xcode-select --install We just happen to find this Git-based trigger apropos. Note also that, after upgrading macOS, you might need to re-do the above and/or re-agree to the Xcode license agreement. We have seen this cause the RStudio Git pane to disappear on a system where it was previously working. Use commands like those above to tickle Xcode into prompting you for what it needs, then restart RStudio. Option 2 (recommended): Install Git from here: http://git-scm.com/downloads. This arguably sets you up the best for the future. It will certainly get you the latest version of Git of all approaches described here. The GitHub home for the macOS installer is here: https://github.com/timcharper/git_osx_installer. At that link, you can find more info if something goes wrong or you are working on an old version of macOS. Option 3 (recommended): If you anticipate getting heavily into scientific computing, you’re going to be installing and updating lots of software. You should check out Homebrew, “the missing package manager for OS X”. Among many other things, it can install Git for you. Once you have Homebrew installed, do this in the shell: brew install git Linux Install Git via your distro’s package manager. Ubuntu or Debian Linux: sudo apt-get install git Fedora or RedHat Linux: sudo yum install git A comprehensive list for various Linux and Unix package managers: https://git-scm.com/download/linux Check your installation Quit and re-launch RStudio if there’s any doubt in your mind about whether you opened RStudio before or after installing Git. You can set your Git user name and email from within R using the usethis package: ## install if needed (do this exactly once): ## install.packages(&quot;usethis&quot;) library(usethis) use_git_config(user.name = &quot;Jane Doe&quot;, user.email = &quot;jane@example.org&quot;) What user name should you give to Git? This does not have to be your GitHub user name, although it can be. Another good option is your actual first name and last name. If you commit from different machines, sometimes people work that info into the user name. Your commits will be labelled with this user name, so make it informative to potential collaborators and future you. What email should you give to Git? This must be the email associated with your GitHub account. These commands return nothing. You can check that Git understood what you typed by looking at the output of git config --global --list from a shell. An easy way to get into a shell from RStudio is **Tools &gt; Terminal* or *Tools &gt; Shell**. If you have any problems go though Chapters 4-14 on the Happy Git site. Setup projects using Git and GitHub You have different options depending on how you start you project. I will only highlight the prefererd one. New project, GitHub first Here we create a project with “GitHub first, then RStudio” sequence: Step 1: Go to GitHub and make sure you are logged in. Click green “New repository” button. Or, if you are on your own profile page, click on “Repositories”, then click the green “New” button. Repository name: test (or whatever you wish) Public YES Initialize this repository with a README Click the big green button “Create repository.” Copy the HTTPS clone URL to your clipboard via the green “Clone or Download” button. Step 2: In RStudio, start a new Project: File &gt; New Project &gt; Version Control &gt; Git. In the “repository URL” paste the URL of your new GitHub repository. It will be something like this https://github.com/[you-username]/test.git. Be intentional about where you create this Project. Suggest you “Open in new session”. Click “Create Project” to create a new directory, which will be all of these things: a directory or “folder” on your computer a Git repository, linked to a remote GitHub repository an RStudio Project In the absence of other constraints, I suggest that all of your R projects have exactly this set-up. This should download the README.md file that we created on GitHub in the previous step. Look in RStudio’s file browser pane for the README.md file. There’s a big advantage to the “GitHub first, then RStudio” workflow: the remote GitHub repo is added as a remote for your local repo and your local master branch is now tracking master on GitHub. This is a technical but important point about Git. The practical implication is that you are now set up to push and pull. No need to fanny around setting up Git remotes and tracking branches on the command line. Step 3: Make local changes, save, commit. Do this every time you finish a valuable chunk of work, probably many times a day. From RStudio, modify the README.md file, e.g., by adding the line “This is a line from RStudio”. Save your changes. Commit these changes to your local repo. How? Click the “Git” tab in upper right pane Check “Staged” box for any files whose existence or modifications you want to commit. To see more detail on what’s changed in file since the last commit, click on “Diff” for a Git pop-up If you’re not already in the Git pop-up, click “Commit” Type a message in “Commit message”, such as “Commit from RStudio”. Click “Commit” Step 4: Push your local changes to GitHub Do this a few times a day, but possibly less often than you commit. You have new work in your local Git repository, but the changes are not online yet. This will seem counterintuitive, but first let’s stop and pull from GitHub. Why? Establish this habit for the future! If you make changes to the repo in the browser or from another machine or (one day) a collaborator has pushed, you will be happier if you pull those changes in before you attempt to push. Click the blue “Pull” button in the “Git” tab in RStudio. I doubt anything will happen, i.e. you’ll get the message “Already up-to-date.” This is just to establish a habit. Click the green “Push” button to send your local changes to GitHub. You should see some message along these lines. [master dc671f0] blah 3 files changed, 22 insertions(+) create mode 100644 .gitignore create mode 100644 myrepo.Rproj Step 5: Confirm the local change propagated to the GitHub remote Go back to the browser. I assume we’re still viewing your new GitHub repo. Refresh. You should see the new “This is a line from RStudio” in the README. If you click on “commits,” you should see one with the message “Commit from RStudio”. Step 6: Make a change on GitHub Click on README.md in the file listing on GitHub. In the upper right corner, click on the pencil for “Edit this file”. Add a line to this file, such as “Line added from GitHub.” Edit the commit message in “Commit changes” or accept the default. Click the big green button “Commit changes.” Step 7: Pull from GitHub Back in RStudio locally … Inspect your README.md. It should NOT have the line “Line added from GitHub”. It should be as you left it. Verify that. Click the blue Pull button. Look at README.md again. You should now see the new line there. The end Now just repeat these operations when you do group work. Do work somewhere. Commit it. Push it or pull it depending on where you did it, but get local and remote “synced up”. Repeat. Note that in general (and especially in future when collaborating with other developers) you will usually need to pull changes from the remote (GitHub) before pushing the local changes you have made. For this reason, it’s a good idea to try and get into the habit of pulling before you attempt to push. If you have to type in your password over and over again, this can be avoided. Have a look at Chapter 10 of Happy Git. Existing project, GitHub first See details in Chapter 16 of Happy Git. Existing project, GitHub last See details in Chapter 17 of Happy Git. "],["annotate.html", "B Annotate the course notes", " B Annotate the course notes I recommend using hypothes.is to annotate the online course notes. You can create both private and public annotations. Collaborative annotation helps people connect to each other and what they’re reading, even when they’re keeping their distance. You may also use public notes to help me indicate spell errors, unclear content etc. in the notes. "],["help.html", "C Getting help", " C Getting help We all get stuck sometimes and need some help. Below are some advises on how to help yourself and ask for help: First try to understand the error message and solve the problem. You may try to debug your code by inserting break points in VBA or use browser() in your R code. See Chapter 11 in Bryan and H (n.d.) for further details. Google is your friend. This is always the first step. Try searches like “vba range”, “r dplyr filter”, “r tidyverse”, “r subset vector”, etc. Do you need help for a specific function in R then try ?[function-name] such as ?geom_line, ?mutate, etc. Mostly, focus on the last section with examples. Moreover, some packages may have written vignettes try browseVignettes(package = \"package_name\") to check. Have a look at Help &gt; Cheatsheets in RStudio. If you can’t find an answer then it is time to ask on-line. I recommend asking a question at stackoverflow. To make your question effective, the idea is to make things as easy as possible for someone to answer. This stack overflow thread How to make a great R reproducible example? give you some good hints. The process of providing a good minimal reproducible example (reprex) often causes you to answer your own question! See also Stack Exchange’s ‘How to ask’ and How to make a reprex at tidyverse. If you have a more course related question then ask it at our course forum and we will try to answer your question asap. Students are also welcome in helping each other. You can also try to annotate the online course notes if something is unclear. I will try to answer asap. You can get help from our TAs at study cafés. Note help using mail correspondence is not supported! References "],["coding-convention.html", "D Coding/naming convention D.1 Commenting your code", " D Coding/naming convention The main reason for using a consistent set of coding conventions is to standardize the structure and coding style of an application so that you and others can easily read and understand the code. Good coding conventions result in precise, readable, and unambiguous source code that is consistent with other language conventions and as intuitive as possible. Different ways of naming you variables exists. You are advised to adopt a naming convention; some use snake case others use camel case. The Leszynski naming convention define variables with a consistent prefix that makes it easy to identify its data type. It is common to use Leszynski convention within the VBA community. The R community use snake case but camel case is also okay. Some common prefixes used for the Leszynski naming convention are: Type Prefix Example Boolean bln blnFound Currency cur curRevenue Date (Time) dtm dtmStart Double dbl dblTolerance Integer int intQuantity Long lng lngDistance String str strFName Variant vnt vntCheckSum Array ary aryNumbers (optional) User form frm frmProcess Worksheet wst wstDistances Workbook wbk wbkData Many other prefixes can be used also. Choose the naming convention you like best in your study group. But stick only to one of them. A few examples: this_is_snake_case # note you do not use capital letters here thisIsCamelCase # you start each word with a capital letter (except the first) dblTolerance # Lezynski convention naming a double (dbl) variable strFullName # Lezynski naming a string (str) variable When defining variables and functions, it is in general good practice to use nouns for variables and verbs for functions. D.1 Commenting your code It is always good practice to comment your code. Such that others can get a fast overview and understand your code easier. We will use roxygen documentation comments which are widely known. A few examples in VBA are The top of a module file: &#39;&#39;&#39; Module description. &#39; Can be more than one line. &#39; @remarks Put your remarks on the module implementation here &#39; @author Lars Relund &lt;junk@relund.dk&gt; &#39; @date 2016-08-26 Before each sub, function etc. write: &#39;&#39; Sub description &#39; @pre Precondition &#39; @post Postcondition &#39; @param strA Explanation of input parameter strA &#39; @param intB Explanation of input parameter intB &#39; @return Return value (if a function) &#39; @remarks Further remarks Public Function MyFunc(strA As String, intB As Integer) As Integer { ... } Further tags (i.e. keywords starting with @) can be seen here. In R we use a ‘hash’ (#’) to comment functions: #&#39; Subtract two vectors #&#39; #&#39; @param x First vector. #&#39; @param y Vector to be subtracted. #&#39; #&#39; @return The difference. #&#39; @export #&#39; #&#39; @examples #&#39; subtract(x = c(5,5), y = c(2,3)) subtract &lt;- function(x, y) { return(x-y) } "],["apdx-vba.html", "E VBA specific topics E.1 Debugging your code E.2 Error handling E.3 Course procedures", " E VBA specific topics E.1 Debugging your code You debug you code to find errors and correct bugs in your program. VBA has a built-in debugger that you may use to step though you code and check if the values in memory are correct. You start and use the debugger using the debugger buttons in the VBA editor, e.g. set the cursor in the top of a sub and press the Step Into button ( F8, ⇧⌘I). You can now repeatedly press the button to step though the code. In the Locals window you can see the values of the variables as you run you code. Finally, if you want to run the program until a specific line or code then insert a break-point by clicking the margin of that line in the VBA editor. Next, run you sub and the debugger will stop at that line. For more details you may have a look at Chapter 9 in Wøhlk (2010) or the videos Debug toolbar, Locals window and Breakpoints. E.2 Error handling See https://excelmacromastery.com/vba-error-handling/ E.3 Course procedures The course have a set of course procedures that you may use ‘as is’ during the course and at the exam without any warranty. I will explicitly state if you are not allowed to use them. An overview is given in Table E.1. All procedures within a topic start with the same suffix so you easy can find them using auto complete in the VBA editor (Ctrl + Space). On a mac you may have to disable the default shortcut (Ctrl + Space) for switching input sources. You can go to the System Preferences -&gt; Keyboard -&gt; Shortcuts -&gt; Input Sources and disable it. For instance all procedures related to arrays start with suffix Ary. Similar the procedures are stored in module ModAry. The modules are stored in the template files for each teaching module (if used) and all course procedures can be found in as text files. If you want to use a procedure copy/import the whole module containing the procedure to the Excel file. Table E.1: Course procedures. See the modules named ModRng, ModAry, ModWst, ModCol, and ModTm for further info. procedure type desc AryDim function Array dimension AryEmpty function Check if an array empty AryFromCSV sub Read a csv file to and array AryPaste sub Paste a 1D or 2D array to a sheet AryQuickSort sub Sort a 2-Dimensional array using a quicksort algorithm AryRead sub Read a range into a 2D array AryReadLong sub Read a range (long format) into an array (up to a 5D array is supported) AryToSeq sub Set all array elements to a sequence AryToStr function Convert an array to a string AryToVal sub Set all array elements to a specific value Col2Str function Convert a collection to a string ColCopy function Copy a collection RngClear sub Clear a range RngCurRegion function Return the current region of a range RngFormat sub Format a range RngFromCSV function Read a csv file and output it to cells RngGetAddress function Return the address of a range. RngGetColLetter function Convert column number to letter RngGetCols function Columns in range RngGetCurRegionAddress function Return the address of the current region of a range RngGetCurRegionCols function Columns in current region RngGetCurRegionFirstCol function First column in current region RngGetCurRegionFirstRow function First row in current region RngGetCurRegionLastCol function Last column in current region RngGetCurRegionLastRow function Last row in current region RngGetCurRegionLowerLeft function Return the lower left cell of the current region RngGetCurRegionLowerRight function Return the lower right cell of the current region RngGetCurRegionRange function Return the part of the current region starting with upper right cell in row and col RngGetCurRegionRows function Rows in current region RngGetCurRegionUpperLeft function Return the upper left cell of the current region RngGetCurRegionUpperRight function Return the upper right cell of the current region RngGetFirstCol function First column in range RngGetFirstRow function First row in range RngGetLastCol function Last column in range RngGetLastRow function Last row in range RngGetLowerLeft function Return the lower left cell of the range RngGetLowerRight function Return the lower right cell of the range RngGetRange function Return the part of the range starting with upper right cell in row and col RngGetRows function Rows in range RngGetUpperLeft function Return the upper left cell of the range RngGetUpperRight function Return the upper right cell of the range RngJoin function Join two ranges RngPaste function Paste a range on a sheet. RngRemoveInterior sub Remove fill colors in cell range RngToCSV sub Write a range to a csv file TmElapsed function Time since timer has be started. TmEx sub Example of using the timer procedures TmRestoreAfterSpeedOptimize sub Restore properties for the Application object after have called ApplicationSpeedOptimize TmSpeedOptimize sub Set some properties for the Application object to optimize excecution of vba TmStart function Start timer (unit seconds) WstClear function Clear a worksheet if it exists WstCreate function Create a worksheet WstDelete function Delete a worksheet if it exists WstExists function Check if a worksheet exists WstRename function Rename a worksheet if it exists and no sheet with the new name References "],["lg-course.html", "F Learning goals", " F Learning goals The purpose of this course is to give students a knowledge about IT tools for Analytics which requires the analyst to be qualified in handling tools beyond e.g. basic Excel. After having participated in the course, the student must, in addition to achieving general academic skills, demonstrate: Knowledge of how a computer works at a basic level. basic programming such as variables, arrays, loops, functions and procedures. what an algorithm is. how to implement an algorithm based on a description. different programming languages. how to manage a code in a collaborative working environment. Skills to handle data such as import, tidy, transform, visualize and export. develop well-structured code. perform testing and debugging. implement/code selected algorithms. apply analytical techniques on data. apply relevant methods, algorithms and techniques from this course in order to solve a specific problem. Competences to independently handle data given a problem. independently analyze data given a relevant research question. compare different programming languages. compare different algorithms solving a problem and discuss their advantages and disadvantages. interpret and discuss results based on a data analysis in relation to the relevant academic literature. communicate results from applied research in a scientific way, e.g. using literate programming. "],["ba.html", "G Business Analytics", " G Business Analytics Business Analytics (BA) refers to the scientific process of transforming data into insight for making better decisions in business. BA can both be seen as the complete decision making process for solving a business problem or as a set of methodologies that enable the creation of business value. As a process it can be characterized by descriptive, predictive, and prescriptive model building using “big” data sources. Descriptive Analytics: A set of technologies and processes that use data to understand and analyze business performance. Descriptive analytics are the most commonly used and most well understood type of analytics. Descriptive analytics categorizes, characterizes, consolidates, and classifies data. Examples are standard reporting and dashboards (KPIs, what happened or is happening now?) and ad-hoc reporting (how many/often?). Descriptive analytics often serves as a first step in the successful application of predictive or prescriptive analytics. Predictive Analytics: The use of data and statistical techniques to make predictions about future outputs/outcomes, identify patterns or opportunities for business performance. Examples of techniques are data mining (what data is correlated with other data?), pattern recognition and alerts (when should I take action to correct/adjust a spare part?), Monte-Carlo simulation (what could happen?), neural networks (which customer group are best?) and forecasting (what if these trends continue?). Prescriptive Analytics: The use of optimization and other decision modelling techniques using the results of descriptive and predictive analytics to suggest decision options with the goal of improving business performance. Prescriptive analytics attempt to quantify the effect of future decisions in order to advise on possible outcomes before the decisions are actually made. Prescriptive analytics predicts not only what will happen, but also why it will happen and provides recommendations regarding actions that will take advantage of the predictions. Prescriptive analytics are relatively complex to administer, and most companies are not yet using it in their daily course of business. However, when implemented correctly, it can have a huge impact on business performance and how businesses make decisions. Examples on prescriptive analytics are optimization in production planning and scheduling, inventory management, the supply chain and transportation planning. Companies who use BA focus on fact-based management to drive decision making and treats data and information as a strategic asset that is shared within the company. This enterprise approach generates a companywide respect for applying descriptive, predictive and prescriptive analytics in areas such as supply chain, marketing and human resources. Related areas: In the past Business Intelligence traditionally focuses on querying, reporting, online analytical processing, i.e. descriptive analytics. However, a more modern definition of Business Intelligence is the union of descriptive and predictive analytics. Operations Research or Management Science deals with the application of advanced analytical methods to help make better decisions and can hence be seen as prescriptive analytics. However, traditionally it has been taking a more theoretical approach and focusing on problem-driven research while BA takes a more data-driven approach. Logistics is a cross-functional area focusing on the effective and efficient flows of goods and services, and the related flows of information and cash. Supply Chain Management adds a process-oriented and cross-company perspective. Both can be seen as prescriptive analytics with a more problem-driven research focus. Advanced Analytics is often used as a classification of both predictive and prescriptive analytics. Data science is an interdisciplinary field about scientific methods, processes, and systems to extract knowledge or insights from data in various forms, either structured or unstructured and can be seen as Business analytics applied to a wider range of data. Resources http://analytics-magazine.org/the-analytics-journey/ https://en.wikipedia.org/wiki/Business_analytics http://connect.informs.org/analytics/home https://www.or-exchange.org/questions/5645/informs-analytics-definition https://en.wikipedia.org/wiki/Prescriptive_analytics https://en.wikipedia.org/wiki/Predictive_analytics "],["colophon.html", "H Colophon", " H Colophon These notes were written in bookdown inside RStudio. This version of the book was built with: #&gt; Finding R package dependencies ... [11/31] \b\b\b\b\b\b\b\b[12/31] \b\b\b\b\b\b\b\b[13/31] \b\b\b\b\b\b\b\b[14/31] \b\b\b\b\b\b\b\b[15/31] \b\b\b\b\b\b\b\b[16/31] \b\b\b\b\b\b\b\b[17/31] \b\b\b\b\b\b\b\b[18/31] \b\b\b\b\b\b\b\b[19/31] \b\b\b\b\b\b\b\b[20/31] \b\b\b\b\b\b\b\b[21/31] \b\b\b\b\b\b\b\b[22/31] \b\b\b\b\b\b\b\b[23/31] \b\b\b\b\b\b\b\b[24/31] \b\b\b\b\b\b\b\b[25/31] \b\b\b\b\b\b\b\b[26/31] \b\b\b\b\b\b\b\b[27/31] \b\b\b\b\b\b\b\b[28/31] \b\b\b\b\b\b\b\b[29/31] \b\b\b\b\b\b\b\b[30/31] \b\b\b\b\b\b\b\b[31/31] Done! #&gt; setting value #&gt; version R version 4.2.1 (2022-06-23) #&gt; os macOS Big Sur ... 10.16 #&gt; system x86_64, darwin17.0 #&gt; ui X11 #&gt; language (EN) #&gt; collate en_US.UTF-8 #&gt; ctype en_US.UTF-8 #&gt; tz Europe/Copenhagen #&gt; date 2022-08-08 #&gt; pandoc 2.18 @ /Applications/RStudio.app/Contents/MacOS/quarto/bin/tools/ (via rmarkdown) Along with these packages: "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
